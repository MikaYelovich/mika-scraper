{"version":3,"sources":["../src/textcraft/TextCraftClient.ts","../src/downloader/tiktok.ts","../src/deepseek-r1/deepseek.ts","../src/deepseek-r1/session.ts","../src/logo-generator/fantaxy.ts","../src/enchant-image/ihance.ts","../src/mcpedl-search/mcpedl.ts","../src/animob/animob.ts","../src/games/mobile-legends/ml-news.ts","../src/temp-mail/tempmail.ts","../src/magic-studio/magic-studio.ts","../src/instagram/instagram.ts","../src/anime-finder/anime-finder.ts","../src/poem/poem-generator.ts","../src/felo/felo.ts","../src/sticker/sticker-pack.ts","../src/youtube/ytdl.ts","../src/humanizer/humanizer.ts","../src/aifreebox/aifreebox.ts","../src/song-lyrics/song.ts","../src/minecraft/minecraft.ts","../src/gemini/gemini.ts","../src/nakanimendo/nakanime.ts","../src/_other-scraper/uploader.ts","../src/ghibli/ghibli.ts","../src/deepfake/deepfake.ts","../src/_other-scraper/imagetoprompt.ts","../src/_other-scraper/snackVideoDL.ts","../src/games/guess-flag.ts"],"sourcesContent":["/**\r\n * @module TextCraftClient\r\n * @description\r\n * Fully customizable, typed client for interacting with the TextCraft.net API to generate\r\n * Minecraft-style logo images. Supports default settings and per-request overrides.\r\n */\r\n\r\nimport axios, { AxiosResponse } from 'axios';\r\nimport { parseStringPromise } from 'xml2js';\r\nimport { z } from 'zod';\r\n\r\n/**\r\n * Schema for input text fields (1 to 3 lines).\r\n */\r\nexport const TextCraftTextSchema = z.object({\r\n  text: z.string().min(1, 'Main text is required'),\r\n  text2: z.string().optional(),\r\n  text3: z.string().optional(),\r\n});\r\n\r\n/**\r\n * Advanced config schema (style overrides).\r\n */\r\nexport const TextCraftOptionsSchema = z.object({\r\n  fontStyle: z.string().optional(),\r\n  fontStyle2: z.string().optional(),\r\n  fontStyle3: z.string().optional(),\r\n  fontSize: z.string().optional(),\r\n  fontSize2: z.string().optional(),\r\n  fontSize3: z.string().optional(),\r\n  fontColour: z.string().optional(),\r\n  fontColour2: z.string().optional(),\r\n  fontColour3: z.string().optional(),\r\n  borderColour: z.string().optional(),\r\n  borderColour2: z.string().optional(),\r\n  borderColour3: z.string().optional(),\r\n  dropShadow: z.boolean().optional(),\r\n  glossy: z.boolean().optional(),\r\n  lighting: z.boolean().optional(),\r\n  glitterBorder: z.boolean().optional(),\r\n});\r\n\r\n/**\r\n * Combined full input shape.\r\n */\r\nexport const TextCraftInputSchema = TextCraftTextSchema.merge(TextCraftOptionsSchema);\r\nexport type TextCraftInput = z.infer<typeof TextCraftInputSchema>;\r\n\r\n/**\r\n * Error thrown when the API returns invalid structure.\r\n */\r\nexport class InvalidTextCraftResponseError extends Error {\r\n  constructor(message = 'TextCraft API returned invalid structure') {\r\n    super(message);\r\n    this.name = 'InvalidTextCraftResponseError';\r\n  }\r\n}\r\n\r\n/**\r\n * Optional config passed when constructing the TextCraftClient\r\n */\r\nexport interface TextCraftClientOptions {\r\n  baseURL?: string;\r\n  defaultStyle?: Partial<z.infer<typeof TextCraftOptionsSchema>>;\r\n}\r\n\r\n/**\r\n * TextCraft image generation client (configurable and reusable).\r\n */\r\nexport class TextCraftClient {\r\n  private readonly endpoint: string;\r\n  private readonly defaultStyle: Partial<TextCraftInput>;\r\n\r\n  constructor(options?: TextCraftClientOptions) {\r\n    this.endpoint = options?.baseURL ?? 'https://textcraft.net/gentext3.php';\r\n    this.defaultStyle = options?.defaultStyle ?? {\r\n      fontStyle: 'font1',\r\n      fontStyle2: 'font6',\r\n      fontStyle3: 'font6',\r\n      fontSize: 'x',\r\n      fontSize2: 't',\r\n      fontSize3: 't',\r\n      fontColour: '0',\r\n      fontColour2: '68',\r\n      fontColour3: '66',\r\n      borderColour: '#2C262E',\r\n      borderColour2: '#211E4E',\r\n      borderColour3: '#EBD406',\r\n      glitterBorder: true,\r\n      dropShadow: true,\r\n      glossy: false,\r\n      lighting: false\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate a Minecraft-style image using text and optional styles.\r\n   * @param input - Required text and optional style overrides.\r\n   * @returns Promise<string> - Direct URL to the generated image.\r\n   */\r\n  async generateImage(input: TextCraftInput): Promise<string> {\r\n    const validated = TextCraftInputSchema.parse({ ...this.defaultStyle, ...input });\r\n\r\n    const {\r\n      text, text2 = '', text3 = '',\r\n      fontStyle, fontStyle2, fontStyle3,\r\n      fontSize, fontSize2, fontSize3,\r\n      fontColour, fontColour2, fontColour3,\r\n      borderColour, borderColour2, borderColour3,\r\n      dropShadow, glossy, lighting, glitterBorder\r\n    } = validated;\r\n\r\n    const params = new URLSearchParams({\r\n      text, text2, text3,\r\n      font_style: fontStyle || 'font1',\r\n      font_style2: fontStyle2 || 'font6',\r\n      font_style3: fontStyle3 || 'font6',\r\n      font_size: fontSize || 'x',\r\n      font_size2: fontSize2 || 't',\r\n      font_size3: fontSize3 || 't',\r\n      font_colour: fontColour || '0',\r\n      font_colour2: fontColour2 || '68',\r\n      font_colour3: fontColour3 || '66',\r\n      border_colour: borderColour || '#2C262E',\r\n      border_colour2: borderColour2 || '#211E4E',\r\n      border_colour3: borderColour3 || '#EBD406',\r\n      text_border: '1',\r\n      text_border2: '1',\r\n      text_border3: '1',\r\n      glow_halo: '0',\r\n      non_trans: 'false',\r\n      fit_lines: '0',\r\n      truecolour_images: '0',\r\n      anim_type: 'none',\r\n      multiline: '3',\r\n      submit_type: 'text',\r\n      savedb: '0',\r\n      bgcolour: '#2C262E',\r\n      drop_shadow: dropShadow ? '1' : '0',\r\n      glossy: glossy ? '1' : '0',\r\n      lighting: lighting ? '1' : '0',\r\n      glitter_border: glitterBorder ? 'true' : 'false',\r\n      perspective_effect: '1'\r\n    });\r\n\r\n    const fullUrl = `${this.endpoint}?${params.toString()}`;\r\n\r\n    try {\r\n      const response: AxiosResponse<string> = await axios.get(fullUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0',\r\n          Accept: 'application/xml,text/html;q=0.9,*/*;q=0.8',\r\n          Referer: 'https://textcraft.net/',\r\n          'Cache-Control': 'no-cache'\r\n        },\r\n        timeout: 10000\r\n      });\r\n\r\n      const parsed = await parseStringPromise(response.data);\r\n      const filename = parsed?.image?.fullfilename?.[0];\r\n      const datadir = parsed?.image?.datadir?.[0];\r\n\r\n      if (!filename || !datadir) throw new InvalidTextCraftResponseError();\r\n\r\n      return `https://static1.textcraft.net/${datadir}/${filename}`;\r\n    } catch (err) {\r\n      if (axios.isAxiosError(err)) {\r\n        throw new Error(`Network error: ${err.message}`);\r\n      }\r\n      if (err instanceof z.ZodError) {\r\n        throw new Error(`Validation error: ${err.issues.map(e => e.message).join(', ')}`);\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module TMateClient\r\n * @description\r\n * A scraper-based client for interacting with the https://tmate.cc TikTok download service.\r\n * It simulates browser-like behavior to extract direct download links for MP4 (no watermark),\r\n * MP3 audio, or image slideshows using HTTP cookies, CSRF token handling, and HTML parsing.\r\n */\r\n\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Structure of the token and cookie required for posting TikTok URLs.\r\n */\r\ninterface TokenCookie {\r\n  token: string;\r\n  cookie: string;\r\n}\r\n\r\n/**\r\n * Common download link shape returned from parsed HTML anchors.\r\n */\r\nexport interface DownloadLink {\r\n  href: string;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * Result structure if a video is found.\r\n */\r\nexport interface VideoResult {\r\n  type: 'video';\r\n  title: string;\r\n  mp4Links: DownloadLink[];\r\n  mp3Link?: DownloadLink;\r\n}\r\n\r\n/**\r\n * Result structure if images are found (image slides / carousel).\r\n */\r\nexport interface ImageResult {\r\n  type: 'image';\r\n  title: string;\r\n  images: string[];\r\n  mp3Link?: DownloadLink;\r\n}\r\n\r\nexport type TikTokResult = VideoResult | ImageResult;\r\n\r\n/**\r\n * Retry options for failed requests.\r\n*/\r\nexport interface RetryOptions {\r\n  retries?: number;\r\n  delayMs?: number;\r\n}\r\n\r\n/**\r\n * Internal utility to fetch CSRF token and session cookies from tmate.cc.\r\n * Simulates a browser request to `/id`.\r\n */\r\nasync function getTokenAndCookie(): Promise<TokenCookie> {\r\n  const res: AxiosResponse<string> = await axios.get('https://tmate.cc/id', {\r\n    headers: {\r\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'\r\n    }\r\n  });\r\n\r\n  const cookie = res.headers['set-cookie']\r\n    ?.map((c) => c.split(';')[0])\r\n    .join('; ') || '';\r\n\r\n  const tokenMatch = res.data.match(/<input[^>]+name=\"token\"[^>]+value=\"([^\"]+)\"/i);\r\n  const token = tokenMatch?.[1];\r\n\r\n  if (!token) throw new Error('Token tidak ditemukan (token ga ada)');\r\n\r\n  return { token, cookie };\r\n}\r\n\r\n/**\r\n * Downloads TikTok content via tmate.cc by submitting a URL and scraping response data.\r\n *\r\n * @param tiktokUrl - Full TikTok video or image post URL.\r\n * @param retryOptions - Retry options for failed requests (default: { retries: 3, delayMs: 1000 }).\r\n * @returns TikTokResult object containing video, image, or audio links.\r\n * @throws Error if token, HTML content, or links are missing or invalid.\r\n */\r\nexport async function downloadTikTok(\r\n  tiktokUrl: string,\r\n  retryOptions: RetryOptions = {}\r\n): Promise<TikTokResult> {\r\n  const maxRetries = retryOptions.retries ?? 3;\r\n  const delayMs = retryOptions.delayMs ?? 1000;\r\n\r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      const { token, cookie } = await getTokenAndCookie();\r\n\r\n      const params = new URLSearchParams();\r\n      params.append('url', tiktokUrl);\r\n      params.append('token', token);\r\n\r\n      const res = await axios.post('https://tmate.cc/action', params.toString(), {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'User-Agent': 'Mozilla/5.0',\r\n          'Referer': 'https://tmate.cc/id',\r\n          'Origin': 'https://tmate.cc',\r\n          'Cookie': cookie\r\n        }\r\n      });\r\n\r\n      const html = res.data?.data;\r\n      if (!html) throw new Error('HTML kosong dari tmate');\r\n\r\n      const titleMatch = html.match(/<h1[^>]*>(.*?)<\\/h1>/i);\r\n      const title = titleMatch?.[1]?.replace(/<[^>]+>/g, '').trim() || 'Tanpa Judul';\r\n\r\n      const matches = [\r\n        ...html.matchAll(\r\n          /<a[^>]+href=\"(https:\\/\\/[^\"]+)\"[^>]*>\\s*<span>\\s*<span>([^<]*)<\\/span><\\/span><\\/a>/gi\r\n        )\r\n      ];\r\n\r\n      const seen = new Set<string>();\r\n      const links: DownloadLink[] = matches\r\n        .map(([_, href, label]) => ({ href, label: label.trim() }))\r\n        .filter(({ href }) => !href.includes('play.google.com') && !seen.has(href) && seen.add(href));\r\n\r\n      const mp4Links = links.filter((v) => /download without watermark/i.test(v.label));\r\n      const mp3Link = links.find((v) => /download mp3 audio/i.test(v.label));\r\n\r\n      if (mp4Links.length > 0) {\r\n        return {\r\n          type: 'video',\r\n          title,\r\n          mp4Links,\r\n          mp3Link\r\n        };\r\n      }\r\n\r\n      const imageMatches = [\r\n        ...html.matchAll(/<img[^>]+src=\"(https:\\/\\/tikcdn\\.app\\/a\\/images\\/[^\"]+)\"/gi)\r\n      ];\r\n      const imageLinks = [...new Set(imageMatches.map((m) => m[1]))];\r\n\r\n      if (imageLinks.length > 0) {\r\n        return {\r\n          type: 'image',\r\n          title,\r\n          images: imageLinks,\r\n          mp3Link\r\n        };\r\n      }\r\n\r\n      throw new Error('tidak ada konten yang valid di halaman');\r\n\r\n    } catch (err) {\r\n      const isLastAttempt = attempt === maxRetries;\r\n      const error = err as AxiosError;\r\n      if (isLastAttempt) {\r\n        throw new Error(\r\n          `Gagal download setelah ${maxRetries} percobaan: ${error.message}`\r\n        );\r\n      }\r\n      console.warn(`Percobaan ${attempt} gagal: ${error.message} — retrying...`);\r\n      await new Promise((res) => setTimeout(res, delayMs * attempt)); // simple backoff\r\n    }\r\n  }\r\n\r\n  throw new Error('Unreachable: semua percobaan gagal');\r\n}\r\n","import axios from 'axios';\r\nimport { EventSource } from 'eventsource';\r\nimport { generateSessionHash } from './session.js';\r\n\r\n/**\r\n * Interface representing the expected structure of the payload\r\n * sent to the Gradio queue endpoint.\r\n */\r\nexport interface ChatPayload {\r\n  data: [string, unknown[], boolean]; // [question, chat history, web search flag]\r\n  event_data: null;\r\n  fn_index: number;\r\n  session_hash: string;\r\n}\r\n\r\n/**\r\n * Represents the shape of a streamed message returned by Gradio’s EventSource.\r\n * Specifically for the DeepSeek chatbot's `process_completed` response format.\r\n */\r\nexport interface GradioStreamMessage {\r\n  msg: 'process_completed' | string;\r\n  output?: GradioChatOutput;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Represents the detailed structure of the `output` object returned by DeepSeek.\r\n */\r\nexport interface GradioChatOutput {\r\n  /**\r\n   * The actual chat result, typically an array containing:\r\n   *   [ [ [inputText, responseText] ], \"\" ]\r\n   */\r\n  data: [[[input: string, response: string]], string];\r\n  is_generating: boolean;\r\n  duration: number;\r\n  average_duration: number;\r\n  render_config: any;\r\n  changed_state_ids: string[];\r\n}\r\n\r\n/**\r\n * Sends a user question to a remote AI model hosted via Gradio on Hugging Face,\r\n * and listens for the final generated response using Server-Sent Events (SSE).\r\n *\r\n * This function handles:\r\n * - Constructing the correct Gradio payload\r\n * - Managing session identification\r\n * - Establishing a streaming connection for the response\r\n * - Resolving or rejecting based on the backend state\r\n *\r\n * @param question - The user's prompt or message to send to the AI.\r\n * @param useWebSearch - Optional flag (default `false`) to enable enhanced web search in the AI model.\r\n * @returns A promise that resolves with the AI-generated response once processing completes.\r\n * @throws An error if the HTTP request fails or if the event stream encounters an issue.\r\n */\r\nexport async function DeepseekR1(\r\n  question: string,\r\n  useWebSearch: boolean = false\r\n): Promise<GradioChatOutput> {\r\n  // Generate a unique session identifier for this request lifecycle\r\n  const sessionHash = generateSessionHash();\r\n\r\n  // Construct the request payload to be sent to the Gradio server\r\n  const payload: ChatPayload = {\r\n    data: [question, [], useWebSearch],\r\n    event_data: null,\r\n    fn_index: 2, // Based on Gradio function indexing\r\n    session_hash: sessionHash,\r\n  };\r\n\r\n  try {\r\n    // Initiate the queue by registering the session\r\n    await axios.post(\r\n      'https://ginigen-deepseek-r1-0528-api.hf.space/gradio_api/queue/join',\r\n      payload,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n\r\n    // Wait for Gradio to respond via real-time event streaming\r\n    return new Promise((resolve, reject) => {\r\n      const es = new EventSource(\r\n        `https://ginigen-deepseek-r1-0528-api.hf.space/gradio_api/queue/data?session_hash=${sessionHash}`\r\n      );\r\n\r\n      es.onmessage = (event: MessageEvent) => {\r\n        try {\r\n          const data: GradioStreamMessage = JSON.parse(event.data);\r\n\r\n          // When processing completes, return the final output\r\n          if (data.msg === 'process_completed') {\r\n            es.close();\r\n            resolve(data.output as GradioChatOutput);\r\n          }\r\n        } catch (error: any) {\r\n          es.close();\r\n          reject(\r\n            new Error(`Failed to parse server response: ${error.message}`)\r\n          );\r\n        }\r\n      };\r\n\r\n      es.onerror = () => {\r\n        es.close();\r\n        reject(new Error('Connection to event stream failed.'));\r\n      };\r\n    });\r\n  } catch (error: any) {\r\n    throw new Error(`Request failed: ${error.message}`);\r\n  }\r\n}\r\n","/**\r\n * Generates a pseudo-random session identifier using\r\n * a base-36 encoded string for uniqueness across user sessions.\r\n *\r\n * This session hash is used to tie requests and event streams together.\r\n *\r\n * @returns A unique alphanumeric session ID string.\r\n */\r\nexport function generateSessionHash(): string {\r\n  return Math.random().toString(36).substring(2);\r\n}\r\n","import axios from 'axios';\r\nimport { EventSource } from 'eventsource';\r\n\r\n/**\r\n * Options used to describe the logo prompt.\r\n */\r\nexport interface LogoRequestOptions {\r\n  style: string;\r\n  color: string;\r\n  concept: string;\r\n  text: string;\r\n  background: string;\r\n}\r\n\r\n/**\r\n * Represents the full response returned when logo generation completes successfully.\r\n */\r\nexport interface FantaxyCompletedResponse {\r\n  msg: 'process_completed';\r\n  event_id: string;\r\n  output: FantaxyOutput;\r\n  success: boolean;\r\n  title: string | null;\r\n}\r\n\r\n/**\r\n * The `output` field containing the generated logo data and metadata.\r\n */\r\nexport interface FantaxyOutput {\r\n  data: [LogoFileData, number];\r\n  is_generating: boolean;\r\n  duration: number;\r\n  average_duration: number;\r\n  render_config: any;\r\n  changed_state_ids: string[];\r\n}\r\n\r\n/**\r\n * The logo file metadata returned by Gradio.\r\n */\r\nexport interface LogoFileData {\r\n  path: string;\r\n  url: string;\r\n  size: number | null;\r\n  orig_name: string;\r\n  mime_type: string | null;\r\n  is_stream: boolean;\r\n  meta: {\r\n    _type: 'gradio.FileData';\r\n  };\r\n}\r\n\r\n/**\r\n * Initiates a logo generation request by formatting the textual prompt\r\n * and registering the job with the Fantaxy Gradio queue.\r\n *\r\n * @param options - Description fields used to customize the logo\r\n * @returns An object containing the session hash for tracking\r\n */\r\nexport async function requestLogo(options: LogoRequestOptions): Promise<{ session_hash: string; }> {\r\n  const session_hash = Math.random().toString(36).slice(2);\r\n\r\n  const prompt = `[Style: ${options.style}] [Color: ${options.color}] [Concept: ${options.concept}] [Text: '${options.text}'] [Background: ${options.background}]`;\r\n\r\n  const payload = {\r\n    data: [prompt, 0, true, 512, 512, 4],\r\n    event_data: null,\r\n    fn_index: 2,\r\n    trigger_id: 7,\r\n    session_hash\r\n  };\r\n\r\n  const headers = {\r\n    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Mobile Safari/537.36',\r\n    'Content-Type': 'application/json',\r\n    'sec-ch-ua-platform': '\"Android\"',\r\n    'sec-ch-ua': '\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"',\r\n    'dnt': '1',\r\n    'sec-ch-ua-mobile': '?1',\r\n    'origin': 'https://fantaxy-ofai-flx-logo.hf.space',\r\n    'sec-fetch-site': 'same-origin',\r\n    'sec-fetch-mode': 'cors',\r\n    'sec-fetch-dest': 'empty',\r\n    'referer': 'https://fantaxy-ofai-flx-logo.hf.space/',\r\n    'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n    'priority': 'u=1, i'\r\n  };\r\n\r\n  await axios.post(\r\n    'https://fantaxy-ofai-flx-logo.hf.space/gradio_api/queue/join?__theme=system',\r\n    payload,\r\n    { headers }\r\n  );\r\n\r\n  return { session_hash };\r\n}\r\n\r\n/**\r\n * Subscribes to the Gradio event stream and waits for the process to complete.\r\n *\r\n * @param sessionHash - The session hash from the original request\r\n * @returns Full event response including output URL\r\n */\r\nexport async function waitForLogo(sessionHash: string): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    const stream = new EventSource(`https://fantaxy-ofai-flx-logo.hf.space/gradio_api/queue/data?session_hash=${sessionHash}`);\r\n\r\n    stream.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n\r\n        if (data.msg === 'process_completed') {\r\n          stream.close();\r\n          resolve(data);\r\n        } else if (data.msg === 'error') {\r\n          stream.close();\r\n          reject(new Error('Fantaxy returned an error response.'));\r\n        } else {\r\n          console.log('Intermediate event:', data.msg);\r\n        }\r\n      } catch (e) {\r\n        stream.close();\r\n        reject(new Error('Failed to parse event stream data.'));\r\n      }\r\n    };\r\n\r\n    stream.onerror = () => {\r\n      stream.close();\r\n      reject(new Error('EventSource connection failed.'));\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Main entry point to generate a logo in a single call.\r\n * Combines the prompt generation and streaming response into one flow.\r\n *\r\n * @param options - Logo prompt description\r\n * @returns Final response payload containing the generated asset URL\r\n */\r\nexport async function generateLogo(options: LogoRequestOptions): Promise<FantaxyCompletedResponse> {\r\n  try {\r\n    const { session_hash } = await requestLogo(options);\r\n    const result = await waitForLogo(session_hash);\r\n    return result;\r\n  } catch (err) {\r\n    throw new Error(`Fantaxy logo generation failed: ${(err as Error).message}`);\r\n  }\r\n}\r\n","// src/services/ihancer.ts\r\n\r\nimport axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n/**\r\n * Options for image enhancement.\r\n */\r\nexport interface EnhanceImageOptions {\r\n  /**\r\n   * Image input buffer or file path.\r\n   */\r\n  image: Buffer | string;\r\n\r\n  /**\r\n   * Optional flag to save the enhanced image locally.\r\n   */\r\n  saveToFile?: boolean;\r\n\r\n  /**\r\n   * Optional output directory if saving to file.\r\n   */\r\n  outputDir?: string;\r\n}\r\n\r\n/**\r\n * Sends an image to ihancer.com for enhancement and returns the enhanced image as a Buffer.\r\n *\r\n * @param options - EnhanceImageOptions with image buffer or path, and save flags\r\n * @returns Buffer of the enhanced image\r\n */\r\nexport async function enhanceImage(options: EnhanceImageOptions): Promise<Buffer> {\r\n  const { image, saveToFile = false, outputDir = './tmp' } = options;\r\n\r\n  let imageBuffer: Buffer;\r\n\r\n  if (Buffer.isBuffer(image)) {\r\n    imageBuffer = image;\r\n  } else if (typeof image === 'string' && fs.existsSync(image)) {\r\n    imageBuffer = fs.readFileSync(image);\r\n  } else {\r\n    throw new Error('❌ Invalid image input: must be a Buffer or valid file path.');\r\n  }\r\n\r\n  const form = new FormData();\r\n  form.append('method', '1');\r\n  form.append('is_pro_version', 'false');\r\n  form.append('is_enhancing_more', 'false');\r\n  form.append('max_image_size', 'low');\r\n  form.append('file', imageBuffer, {\r\n    filename: 'input.jpg',\r\n    contentType: 'image/jpeg',\r\n  });\r\n\r\n  const response = await axios.post('https://ihancer.com/api/enhance', form, {\r\n    headers: {\r\n      ...form.getHeaders(),\r\n      'accept': '*/*',\r\n      'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n      'sec-ch-ua': '\"Not-A.Brand\";v=\"99\", \"Chromium\";v=\"124\"',\r\n      'sec-ch-ua-mobile': '?1',\r\n      'sec-ch-ua-platform': '\"Android\"',\r\n      'sec-fetch-dest': 'empty',\r\n      'sec-fetch-mode': 'cors',\r\n      'sec-fetch-site': 'same-origin',\r\n      'referer': 'https://ihancer.com/app/',\r\n    },\r\n    responseType: 'arraybuffer',\r\n  });\r\n\r\n  const outputBuffer = Buffer.from(response.data);\r\n\r\n  if (saveToFile) {\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const filePath = path.join(outputDir, `ihanced-${timestamp}.jpg`);\r\n    fs.writeFileSync(filePath, outputBuffer);\r\n    console.log(`✅ Saved enhanced image to: ${filePath}`);\r\n  }\r\n\r\n  return outputBuffer;\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Supported content categories on MCPEDL.\r\n */\r\nexport type McpedlCategory = 'downloading' | 'mods' | 'maps' | 'textures' | 'shaders';\r\n\r\n/**\r\n * Represents a single post (mod, map, etc.) scraped from MCPEDL.\r\n */\r\nexport interface McpedlEntry {\r\n  title: string;\r\n  link: string;\r\n}\r\n\r\n\r\n/**\r\n * Map user-friendly category keys to actual URL slugs on mcpedl.org.\r\n */\r\nexport const categoryMap: Record<McpedlCategory, string> = {\r\n  downloading: 'downloading',\r\n  mods: 'mods-minecraft-pe',\r\n  maps: 'maps-minecraft-pe',\r\n  textures: 'textures-minecraft-pe',\r\n  shaders: 'textures-minecraft-pe/shaders'\r\n};\r\n\r\n/**\r\n * Search a list of article titles and links from MCPEDL.org for a given category and page.\r\n *\r\n * @param category - The content category (mods, maps, textures, etc.)\r\n * @param page - The page number to scrape (starting from 1)\r\n * @returns A list of articles with titles and URLs\r\n */\r\nexport async function McpedlSearch(category: McpedlCategory, page: number = 1): Promise<McpedlEntry[]> {\r\n  const categorySlug = categoryMap[category];\r\n  const url = `https://mcpedl.org/${categorySlug}/page/${page}/`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    const $ = load(response.data);\r\n    const entries: McpedlEntry[] = [];\r\n\r\n    $('article.post').each((_, element) => {\r\n      const title = $(element).find('h2.entry-title a').text().trim();\r\n      const link = $(element).find('h2.entry-title a').attr('href') ?? '';\r\n\r\n      if (title && link) {\r\n        entries.push({ title, link });\r\n      }\r\n    });\r\n\r\n    return entries;\r\n  } catch (err: any) {\r\n    console.error(`❌ Error scraping MCPEDL: ${err.message}`);\r\n    return [];\r\n  }\r\n}\r\n","import axios, { AxiosInstance } from 'axios';\r\n\r\n/**\r\n * Basic anime metadata returned by most endpoints.\r\n */\r\nexport interface Anime {\r\n  id: string;\r\n  title: string;\r\n  image: string;\r\n  type: string;\r\n  status: string;\r\n  description?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Episode object associated with a specific anime.\r\n */\r\nexport interface Episode {\r\n  id: string;\r\n  number: number;\r\n  title?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Server descriptor for streaming.\r\n */\r\nexport interface StreamServer {\r\n  serverName: string;\r\n  type: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Video stream metadata (sources, headers, etc.)\r\n */\r\nexport interface StreamResponse {\r\n  sources: {\r\n    url: string;\r\n    quality: string;\r\n    isM3U8: boolean;\r\n  }[];\r\n  headers?: Record<string, string>;\r\n  intro?: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Animob API Client\r\n *\r\n * A class-based wrapper around unofficial HiAnime/AniWatch APIs, giving you access to:\r\n * - Homepage featured anime\r\n * - Search and filter by genre\r\n * - Retrieve full anime info and episodes\r\n * - Extract streaming links from server ID\r\n *\r\n * Example usage:\r\n * ```ts\r\n * const client = new Animob();\r\n * const popular = await client.home();\r\n * const naruto = await client.search('naruto');\r\n * const detail = await client.detail('naruto');\r\n * const stream = await client.episode('naruto-ep-1?ep=1', 'HD-1');\r\n * ```\r\n */\r\nexport class Animob {\r\n  private client: AxiosInstance;\r\n  private _client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: 'https://aniwatch-api-2-animob.vercel.app/api/v2',\r\n      headers: {\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2'\r\n      }\r\n    });\r\n\r\n    this._client = axios.create({\r\n      baseURL: 'https://animob-api-v4.vercel.app/api',\r\n      headers: {\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2'\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetches curated content from the homepage: trending, latest, popular, etc.\r\n   * @returns List of homepage anime blocks\r\n   */\r\n  async home(): Promise<Anime[]> {\r\n    const { data } = await this.client.get('/hianime/home');\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a paginated list of anime for a specific genre.\r\n   * @param genre - Genre slug (e.g. 'action', 'drama', 'fantasy')\r\n   * @param page - Page number for pagination\r\n   * @returns List of anime under the selected genre\r\n   * @throws Error if the genre is not supported\r\n   */\r\n  async genre(genre: string = 'action', page: number = 1): Promise<Anime[]> {\r\n    const allowedGenres = [\r\n      'action', 'adventure', 'cars', 'comedy', 'dementia', 'demons', 'drama', 'ecchi',\r\n      'fantasy', 'game', 'harem', 'historical', 'horror', 'isekai', 'josei', 'kids',\r\n      'magic', 'martial-arts', 'mecha', 'military', 'music', 'mystery', 'parody', 'police',\r\n      'psychological', 'romance', 'samurai', 'school', 'sci-fi', 'seinen', 'shoujo',\r\n      'shoujo-ai', 'shounen', 'shounen-ai', 'slice-of-life', 'space', 'sports',\r\n      'super-power', 'supernatural', 'thriller', 'vampire'\r\n    ];\r\n\r\n    if (!allowedGenres.includes(genre)) {\r\n      throw new Error(`Invalid genre. Allowed genres: ${allowedGenres.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get(`/hianime/genre/${genre}`, {\r\n      params: { page }\r\n    });\r\n\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Searches anime using a keyword.\r\n   * @param query - The title or keyword to search for\r\n   * @param page - Page number for pagination\r\n   * @returns List of matching anime\r\n   * @throws Error if no query is provided\r\n   */\r\n  async search(query: string, page: number = 1): Promise<Anime[]> {\r\n    if (!query) throw new Error('Query is required');\r\n\r\n    const { data } = await this.client.get('/hianime/search', {\r\n      params: { q: query, page }\r\n    });\r\n\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Fetches full metadata for a specific anime, including all episodes.\r\n   * @param id - Anime slug ID (e.g. 'naruto')\r\n   * @returns Anime metadata object with attached episodes\r\n   * @throws Error if ID is not provided\r\n   */\r\n  async detail(id: string): Promise<Anime & { episodes: Episode[] }> {\r\n    if (!id) throw new Error('ID is required');\r\n\r\n    const { data } = await this.client.get(`/hianime/anime/${id}`);\r\n    const { data: ep } = await this.client.get(`/hianime/anime/${id}/episodes`);\r\n\r\n    return {\r\n      ...data.data.anime,\r\n      episodes: ep.data\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fetches streaming sources for a given episode ID and server name.\r\n   * @param episodeId - Full episode ID string (e.g. 'bleach-ep-1?ep=1')\r\n   * @param server - Server name (e.g. 'HD-1', 'HD-2', 'Auto')\r\n   * @returns StreamResponse with sources and headers\r\n   * @throws If episode ID is invalid or server does not exist\r\n   */\r\n  async episode(episodeId: string, server: string = 'HD-1'): Promise<StreamResponse> {\r\n    if (!episodeId || !episodeId.includes('?ep=')) {\r\n      throw new Error('Invalid episode ID. It must contain ?ep= query parameter.');\r\n    }\r\n\r\n    const { data: sv } = await this._client.get<{ results: StreamServer[] }>(\r\n      `/servers/${episodeId}`\r\n    );\r\n\r\n    const servers = sv.results.map(s => s.serverName);\r\n    if (!servers.includes(server)) {\r\n      throw new Error(`Server not available. Available servers: ${servers.join(', ')}`);\r\n    }\r\n\r\n    const selected = sv.results.find(s => s.serverName === server);\r\n    if (!selected) throw new Error('Server type resolution failed.');\r\n\r\n    const { data } = await this._client.get<{ results: StreamResponse }>('/stream', {\r\n      params: {\r\n        id: episodeId,\r\n        server,\r\n        type: selected.type\r\n      }\r\n    });\r\n\r\n    return data.results;\r\n  }\r\n}\r\n\r\n/**\r\n * Singleton instance for quick use without manual instantiation.\r\n */\r\nexport const animob = new Animob();\r\n","import axios from 'axios';\r\nimport { JSDOM } from 'jsdom';\r\n\r\n/**\r\n * Source IDs used to fetch Mobile Legends news content.\r\n * These appear to represent different news feeds or categories.\r\n */\r\nconst SOURCE_IDS: number[] = [2672947, 2756566, 2756564];\r\n\r\n/**\r\n * Extracts plain text content from a given HTML string.\r\n *\r\n * @param html - Raw HTML content\r\n * @returns Cleaned text content\r\n */\r\nfunction extractText(html: string = ''): string {\r\n  const dom = new JSDOM(`<body>${html}</body>`);\r\n  return dom.window.document.body.textContent?.trim() || '';\r\n}\r\n\r\n/**\r\n * Attempts to extract the first image URL from the HTML body.\r\n *\r\n * @param html - HTML body string\r\n * @returns Image URL string or null\r\n */\r\nfunction extractThumbnail(html: string = ''): string | null {\r\n  const dom = new JSDOM(`<body>${html}</body>`);\r\n  const img = dom.window.document.querySelector('img');\r\n  return img?.getAttribute('src') || null;\r\n}\r\n\r\n/**\r\n * Represents a news article item extracted from the API.\r\n */\r\nexport interface MobileLegendsNewsItem {\r\n  title: string;\r\n  author: string | null;\r\n  avatar: string | null;\r\n  thumbnail: string | null;\r\n  date: string;\r\n  caption: string;\r\n  link: string;\r\n}\r\n\r\n/**\r\n * Fetches and parses news articles from a specific Moonton source ID.\r\n *\r\n * @param sourceId - Source feed identifier from Moonton\r\n * @returns List of parsed and structured news items\r\n */\r\nexport async function fetchNews(sourceId: number): Promise<MobileLegendsNewsItem[]> {\r\n  try {\r\n    const response = await axios.post(\r\n      `https://api.gms.moontontech.com/api/gms/source/2669606/${sourceId}`,\r\n      {\r\n        pageIndex: 1,\r\n        pageSize: 50,\r\n        filters: [],\r\n        sorts: [],\r\n        object: [2667533],\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-appid': '2669606',\r\n          'x-actid': '2669607',\r\n          'x-lang': 'id',\r\n          'origin': 'https://www.mobilelegends.com',\r\n          'referer': 'https://www.mobilelegends.com/',\r\n        },\r\n      }\r\n    );\r\n\r\n    const records = response.data?.data?.records ?? [];\r\n\r\n    return records.map((record: any): MobileLegendsNewsItem => {\r\n      const d = record.data;\r\n      const body = d.body || '';\r\n      const image = extractThumbnail(body) || d.cover || d.image || null;\r\n\r\n      return {\r\n        title: extractText(d.title || 'No Title'),\r\n        author: d.author?.name || null,\r\n        avatar: d.author?.avatar || null,\r\n        thumbnail: image,\r\n        date: new Date(d.start_time).toISOString(),\r\n        caption: extractText(body),\r\n        link: `https://www.mobilelegends.com/news/articleldetail?newsid=${record.id}`,\r\n      };\r\n    });\r\n  } catch (err: any) {\r\n    console.error(`❌ Failed to fetch from source ${sourceId}:`, err.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches and combines news from all known Mobile Legends news sources.\r\n *\r\n * @returns News response object with metadata and article list\r\n */\r\nexport async function MobileLegendsNewsInfo(): Promise<{\r\n  status: boolean;\r\n  total: number;\r\n  result: MobileLegendsNewsItem[];\r\n}> {\r\n  const results = await Promise.all(SOURCE_IDS.map(fetchNews));\r\n  const merged = results.flat();\r\n\r\n  return {\r\n    status: true,\r\n    total: merged.length,\r\n    result: merged,\r\n  };\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * The actual email record returned after creation.\r\n */\r\nexport interface TempMailCreateData {\r\n  email: string;\r\n  email_token: string;\r\n  deleted_in: string;\r\n}\r\n\r\n/**\r\n * The `result` structure in create() response.\r\n */\r\nexport interface TempMailCreateResult {\r\n  status: 'success' | 'error';\r\n  data: TempMailCreateData;\r\n}\r\n\r\n\r\n/**\r\n * Response type returned from the Tempail API for both endpoints.\r\n */\r\nexport interface TempMailResponse<T> {\r\n  success: boolean;\r\n  code: number;\r\n  result: T;\r\n}\r\n/**\r\n * Raw email message shape returned by the inbox endpoint.\r\n */\r\nexport interface TempMailMessage {\r\n  from: string;\r\n  subject: string;\r\n  body: string;\r\n  date: string;\r\n  id: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Tempail Temporary Email SDK\r\n * Provides access to temp email creation and inbox message reading\r\n * via the unofficial API: https://tempail.top\r\n */\r\nexport class TempMail {\r\n  private static baseHeaders = {\r\n    'User-Agent': 'Dalvik/2.1.0 (Linux; Android 15)',\r\n    'Connection': 'Keep-Alive',\r\n    'Accept-Encoding': 'gzip',\r\n  };\r\n\r\n  /**\r\n   * Generates a new temporary email address.\r\n   *\r\n   * @returns {Promise<TempMailResponse>} An object with a generated email address and token.\r\n   * @throws On HTTP or parsing errors.\r\n   */\r\n  public static async create():  Promise<TempMailResponse<TempMailCreateResult>> {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://tempail.top/api/email/create/ApiTempail',\r\n        null,\r\n        {\r\n          headers: {\r\n            ...this.baseHeaders,\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Content-Length': '0',\r\n          },\r\n        }\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: response.data,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('❌ Error creating tempmail:', error.message);\r\n      throw new Error('Failed to create temporary email address.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches inbox messages for a specific temp email token.\r\n   *\r\n   * @param token - Unique token tied to the generated email address\r\n   * @returns {Promise<TempMailResponse<TempMailMessage[]>>} List of inbox messages\r\n   * @throws If token is invalid or request fails\r\n   */\r\n  public static async checkInbox(token: string): Promise<TempMailResponse<TempMailMessage[]>> {\r\n    if (!token || typeof token !== 'string') {\r\n      throw new Error('Invalid or missing token for inbox check.');\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://tempail.top/api/messages/${token}/ApiTempail`,\r\n        { headers: this.baseHeaders }\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: response.data,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('❌ Error checking inbox:', error.message);\r\n      throw new Error('Failed to fetch inbox messages. Verify your token.');\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * Generates a random alphanumeric client ID for the request header.\r\n * Mimics client fingerprinting from browser.\r\n */\r\nfunction generateClientId(length: number = 40): string {\r\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');\r\n}\r\n\r\n/**\r\n * Sends a prompt to MagicStudio's AI art generator and uploads the result to Catbox.\r\n * \r\n * @param prompt - Description of the image you want MagicStudio to generate\r\n * @returns A URL pointing to the uploaded image on catbox.moe\r\n */\r\nexport async function MagicStudioArt(prompt: string): Promise<string> {\r\n  const anonymousUserId = uuidv4();\r\n  const requestTimestamp = (Date.now() / 1000).toFixed(3);\r\n  const clientId = generateClientId();\r\n  const tempPath = path.join(__dirname, `magic_${Date.now()}.jpg`);\r\n\r\n  const formData = new FormData();\r\n  formData.append('prompt', prompt);\r\n  formData.append('output_format', 'bytes');\r\n  formData.append('user_profile_id', 'null');\r\n  formData.append('anonymous_user_id', anonymousUserId);\r\n  formData.append('request_timestamp', requestTimestamp);\r\n  formData.append('user_is_subscribed', 'false');\r\n  formData.append('client_id', clientId);\r\n\r\n  try {\r\n    // Generate AI image\r\n    const response = await axios.post('https://ai-api.magicstudio.com/api/ai-art-generator', formData, {\r\n      headers: {\r\n        ...formData.getHeaders(),\r\n        'User-Agent': 'Mozilla/5.0 (Linux; Android 10)',\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'origin': 'https://magicstudio.com',\r\n        'referer': 'https://magicstudio.com/ai-art-generator/',\r\n        'sec-ch-ua': '\"Chromium\";v=\"118\", \"Google Chrome\";v=\"118\", \"Not=A?Brand\";v=\"99\"',\r\n        'sec-ch-ua-mobile': '?1',\r\n        'sec-ch-ua-platform': '\"Android\"',\r\n        'sec-fetch-site': 'same-site',\r\n        'sec-fetch-mode': 'cors',\r\n        'sec-fetch-dest': 'empty',\r\n        'accept-language': 'en-US,en;q=0.9',\r\n      },\r\n      responseType: 'arraybuffer',\r\n    });\r\n\r\n    // Save temporary image\r\n    fs.writeFileSync(tempPath, response.data);\r\n\r\n    // Upload to Catbox\r\n    const uploadForm = new FormData();\r\n    uploadForm.append('reqtype', 'fileupload');\r\n    uploadForm.append('fileToUpload', fs.createReadStream(tempPath));\r\n\r\n    const uploadResponse = await axios.post('https://catbox.moe/user/api.php', uploadForm, {\r\n      headers: uploadForm.getHeaders(),\r\n    });\r\n\r\n    fs.unlinkSync(tempPath);\r\n    return uploadResponse.data; // URL string\r\n  } catch (error: any) {\r\n    console.error('❌ Failed to generate or upload image:', error.message);\r\n    return 'Failed to generate or upload image.';\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\n/**\r\n * Video/audio representation extracted from DASH manifest.\r\n */\r\nexport interface MediaTrack {\r\n  url: string;\r\n  bandwidth: number;\r\n  codecs: string;\r\n  mimeType: string;\r\n  resolution?: string;\r\n  qualityLabel?: string;\r\n}\r\n\r\n/**\r\n * Instagram video metadata object.\r\n */\r\nexport interface InstagramMedia {\r\n  code: string;\r\n  id: string;\r\n  title: string;\r\n  profile: {\r\n    username: string;\r\n    full_name: string;\r\n    profile_pic_url: string;\r\n  };\r\n  thumbnails: {\r\n    url: string;\r\n    width: number;\r\n    height: number;\r\n  }[];\r\n  videoTracks: MediaTrack[];\r\n  audioTracks: MediaTrack[];\r\n}\r\n\r\n/**\r\n * Extracts Instagram reel video + audio stream URLs and metadata.\r\n *\r\n * @param url Instagram reel/post URL\r\n * @returns Structured InstagramMedia object\r\n */\r\nexport async function instagram(url: string): Promise<InstagramMedia> {\r\n  if (!url) throw new Error('Missing URL');\r\n\r\n  const response = await axios.get(url, {\r\n    headers: {\r\n      'User-Agent': 'Mozilla/5.0 (Linux; Android 10)',\r\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*',\r\n      'cache-control': 'max-age=0',\r\n      'viewport-width': '980',\r\n      'sec-ch-ua': '\"Chromium\";v=\"136\", \"Not.A/Brand\";v=\"99\"',\r\n      'sec-ch-ua-mobile': '?1',\r\n      'sec-ch-ua-platform': '\"Android\"',\r\n      'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8',\r\n    },\r\n    timeout: 10000,\r\n  });\r\n\r\n  const $ = load(response.data);\r\n  let scriptJson: any = null;\r\n\r\n  $('script[type=\"application/json\"]').each((_, el) => {\r\n    const content = $(el).html();\r\n    if (content?.includes('xdt_api__v1__media__shortcode__web_info')) {\r\n      try {\r\n        scriptJson = JSON.parse(content);\r\n      } catch (e) {\r\n        throw new Error('Failed to parse embedded JSON script');\r\n      }\r\n    }\r\n  });\r\n\r\n  const item = scriptJson?.require?.[0]?.[3]?.[0]?.__bbox?.require?.[0]?.[3]?.[1]?.__bbox?.result?.data?.xdt_api__v1__media__shortcode__web_info?.items?.[0];\r\n  if (!item) throw new Error('Reel data not found. Is this a valid reel/post URL?');\r\n\r\n  const dashXml = item.video_dash_manifest;\r\n  if (!dashXml) throw new Error('No DASH manifest found');\r\n\r\n  const parser = new XMLParser({ ignoreAttributes: false });\r\n  const manifest = parser.parse(dashXml);\r\n  const period = manifest?.MPD?.Period;\r\n  const adaptationSets = Array.isArray(period.AdaptationSet) ? period.AdaptationSet : [period.AdaptationSet];\r\n\r\n  const videoTracks: MediaTrack[] = [];\r\n  const audioTracks: MediaTrack[] = [];\r\n\r\n  adaptationSets.forEach((set: any) => {\r\n    const isVideo = set['@_contentType'] === 'video';\r\n    const isAudio = set['@_contentType'] === 'audio';\r\n    const reps = Array.isArray(set.Representation) ? set.Representation : [set.Representation];\r\n\r\n    reps.forEach((rep: any) => {\r\n      const baseURL = rep.BaseURL;\r\n      const bandwidth = parseInt(rep['@_bandwidth']) || 0;\r\n      const track: MediaTrack = {\r\n        url: baseURL,\r\n        bandwidth,\r\n        codecs: rep['@_codecs'],\r\n        mimeType: rep['@_mimeType'],\r\n      };\r\n\r\n      if (isVideo) {\r\n        videoTracks.push({\r\n          ...track,\r\n          resolution: `${rep['@_width']}x${rep['@_height']}`,\r\n          qualityLabel: rep['@_FBQualityLabel'] || '',\r\n        });\r\n      } else if (isAudio) {\r\n        audioTracks.push(track);\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    code: item.code,\r\n    id: item.id,\r\n    title: item.caption?.text || '',\r\n    profile: {\r\n      username: item.user?.username || '',\r\n      full_name: item.user?.full_name || '',\r\n      profile_pic_url: item.user?.hd_profile_pic_url_info?.url || '',\r\n    },\r\n    thumbnails: (item.image_versions2?.candidates || []).map((img: any) => ({\r\n      url: img.url,\r\n      width: img.width,\r\n      height: img.height,\r\n    })),\r\n    videoTracks,\r\n    audioTracks,\r\n  };\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Structured reference object returned by AnimeFinder API.\r\n */\r\nexport interface AnimeReference {\r\n  site: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Structured result returned by AnimeFinder API.\r\n */\r\nexport interface AnimeFinderResult {\r\n  status: true;\r\n  image: string;\r\n  anime: string;\r\n  character: string;\r\n  genres: string;\r\n  premiere: string;\r\n  production: string;\r\n  description: string;\r\n  synopsis: string;\r\n  references: AnimeReference[];\r\n}\r\n\r\n/**\r\n * Fallback error result if identification fails.\r\n */\r\nexport interface AnimeFinderError {\r\n  status: false;\r\n  message: string;\r\n  error: any;\r\n}\r\n\r\nexport type AnimeFinderResponse = AnimeFinderResult | AnimeFinderError;\r\n\r\n/**\r\n * Identifies an anime by analyzing an image URL using AnimeFinder API.\r\n *\r\n * @param imageUrl - The public URL of the image (JPG/PNG)\r\n * @returns Structured anime info or error response\r\n */\r\nexport async function AnimeFinder(imageUrl: string): Promise<AnimeFinderResponse> {\r\n  if (!imageUrl) {\r\n    return {\r\n      status: false,\r\n      message: 'Image URL cannot be empty.',\r\n      error: 'Missing imageUrl',\r\n    };\r\n  }\r\n\r\n  try {\r\n    const imageBuffer = (\r\n      await axios.get(imageUrl, {\r\n        responseType: 'arraybuffer',\r\n      })\r\n    ).data;\r\n\r\n    const form = new FormData();\r\n    form.append('image', imageBuffer, {\r\n      filename: 'anime.jpg',\r\n      contentType: 'image/jpeg',\r\n    });\r\n    const response = await axios.post('https://www.animefinder.xyz/api/identify', form, {\r\n      headers: {\r\n        ...form.getHeaders(),\r\n        Origin: 'https://www.animefinder.xyz',\r\n        Referer:\r\n          'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Mobile/15E148 Safari/604.1',\r\n      },\r\n      maxBodyLength: Infinity,\r\n    });\r\n\r\n    const result = response.data;\r\n\r\n    return {\r\n      status: true,\r\n      image: imageUrl,\r\n      anime: result.animeTitle,\r\n      character: result.character,\r\n      genres: result.genres,\r\n      premiere: result.premiereDate,\r\n      production: result.productionHouse,\r\n      description: result.description,\r\n      synopsis: result.synopsis,\r\n      references: result.references || [],\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: 'Failed to identify anime from image',\r\n      error: err.response?.data || err.message,\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Enumeration of all supported poem structures/styles.\r\n * These reflect classic and modern poetic forms used globally.\r\n */\r\nexport const poemTypes = [\r\n  'Haiku', 'Sonnet', 'Free Verse', 'Blank Verse',\r\n  'Limerick', 'Romantic', 'Proposal', 'Love',\r\n  'Lyric', 'Acrostic', 'Ballad', 'Epic',\r\n  'Elegy', 'Ode', 'Pantoum', 'Narrative',\r\n  'Cinquain', 'Villanelle', 'Sestina', 'Couplet'\r\n] as const;\r\n\r\nexport type PoemType = (typeof poemTypes)[number];\r\n\r\n/**\r\n * Supported output languages for the poem.\r\n */\r\nexport const poemLanguages = ['English', 'Japanese', 'Indonesian'] as const;\r\nexport type PoemLanguage = (typeof poemLanguages)[number];\r\n\r\n/**\r\n * Available length configurations.\r\n */\r\nexport const poemLengths = ['short', 'medium', 'long'] as const;\r\nexport type PoemLength = (typeof poemLengths)[number];\r\n\r\n/**\r\n * Configuration object for poem generation.\r\n */\r\nexport interface GeneratePoemOptions {\r\n  topic?: string;        // The subject of the poem (e.g., \"winter\", \"loss\")\r\n  length?: PoemLength;   // How long the poem should be\r\n  type?: PoemType;       // The poetic structure to use\r\n  lang?: PoemLanguage;   // Output language\r\n}\r\n\r\n/**\r\n * Returned when the generation is successful.\r\n */\r\nexport interface PoemSuccess {\r\n  status: true;\r\n  result: string;\r\n}\r\n\r\n/**\r\n * Returned when poem generation fails.\r\n */\r\nexport interface PoemError {\r\n  status: false;\r\n  message: string;\r\n  error: any;\r\n}\r\n\r\n/**\r\n * General return type for generatePoem\r\n */\r\nexport type PoemResponse = PoemSuccess | PoemError;\r\n\r\n/**\r\n * Generates a structured, themed poem using https://aipoemgenerator.io\r\n *\r\n * Under the hood, it simulates a browser session to:\r\n *  1. Fetch the CSRF token and session cookie from the homepage\r\n *  2. Submit a POST form with your chosen poem parameters\r\n *\r\n * @param options - Configuration including topic, length, type, and language\r\n * @returns A PoemResponse, containing either the text or an error\r\n *\r\n * @example\r\n * const poem = await generatePoem({\r\n *   topic: \"starfall\",\r\n *   type: \"Haiku\",\r\n *   lang: \"English\",\r\n *   length: \"short\"\r\n * });\r\n */\r\nexport async function PoemGenerator({\r\n  topic = 'cinta',\r\n  length = 'long',\r\n  type = 'Sonnet',\r\n  lang = 'Indonesian'\r\n}: GeneratePoemOptions = {}): Promise<PoemResponse> {\r\n  try {\r\n    if (!poemLengths.includes(length)) {\r\n      throw `Invalid length. Choose one of: ${poemLengths.join(', ')}`;\r\n    }\r\n\r\n    const url = 'https://aipoemgenerator.io';\r\n\r\n    const initial = await axios.get(url, {\r\n      headers: { 'User-Agent': 'Mozilla/5.0' }\r\n    });\r\n\r\n    const tokenMatch = initial.data.match(/<meta name=\"_token\" content=\"(.*?)\"/);\r\n    if (!tokenMatch) throw 'CSRF token not found in HTML meta.';\r\n\r\n    const token = tokenMatch[1];\r\n    if(!initial.headers['set-cookie']) throw 'Cookie not found in response headers.';\r\n    const cookies = initial.headers['set-cookie']\r\n      .map(c => c.split(';')[0])\r\n      .join('; ');\r\n\r\n    const form = new URLSearchParams();\r\n    form.append('topic', topic);\r\n    form.append('length', length);\r\n    form.append('type', type);\r\n    form.append('lang', lang);\r\n    form.append('poemVersion', '1');\r\n    form.append('_token', token);\r\n\r\n    const post = await axios.post(`${url}/generate_poem`, form.toString(), {\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0',\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Cookie': cookies,\r\n        'Referer': url,\r\n        'Origin': url,\r\n        'X-Requested-With': 'XMLHttpRequest'\r\n      }\r\n    });\r\n\r\n    return {\r\n      status: true,\r\n      result: post.data?.trim()\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: 'Failed to generate poem',\r\n      error: err.message || err\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { JSDOM } from 'jsdom';\r\n\r\n/**\r\n * List of rotating user agents to avoid bot detection.\r\n */\r\nconst USER_AGENTS = [\r\n  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120.0.0.0 Safari/537.36',\r\n  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Edge/120.0.0.0',\r\n  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) Safari/605.1.15',\r\n  'Mozilla/5.0 (X11; Linux x86_64) Chrome/120.0.0.0 Safari/537.36'\r\n];\r\n\r\n/**\r\n * Basic in-memory cache with 5-minute TTL.\r\n */\r\nconst resultsCache = new Map<string, { results: string; timestamp: number }>();\r\nconst CACHE_DURATION = 5 * 60 * 1000;\r\n\r\n/**\r\n * Randomizes User-Agent for each outbound request.\r\n */\r\nfunction getRandomUserAgent(): string {\r\n  return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];\r\n}\r\n\r\nfunction getCacheKey(query: string): string {\r\n  return `felo-${query.toLowerCase().trim()}`;\r\n}\r\n\r\n/**\r\n * Cleans up expired cached entries.\r\n */\r\nfunction clearOldCache(): void {\r\n  const now = Date.now();\r\n  for (const [key, value] of resultsCache.entries()) {\r\n    if (now - value.timestamp > CACHE_DURATION) {\r\n      resultsCache.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * DuckDuckGo returns redirect-style URLs — this extracts the actual site.\r\n */\r\nfunction extractDirectUrl(rawUrl: string): string {\r\n  try {\r\n    if (rawUrl.startsWith('//')) rawUrl = 'https:' + rawUrl;\r\n    else if (rawUrl.startsWith('/')) rawUrl = 'https://duckduckgo.com' + rawUrl;\r\n\r\n    const url = new URL(rawUrl);\r\n    if (url.hostname === 'duckduckgo.com' && url.pathname === '/l/') {\r\n      const real = url.searchParams.get('uddg');\r\n      return real ? decodeURIComponent(real) : rawUrl;\r\n    }\r\n    return rawUrl;\r\n  } catch {\r\n    return rawUrl;\r\n  }\r\n}\r\n\r\n/**\r\n * Scrape relevant external links from DuckDuckGo to complement Felo's AI response.\r\n *\r\n * @param query - The same search prompt\r\n * @param maxResults - Limit the number of references\r\n */\r\nasync function getDuckDuckGoLinks(query: string, maxResults: number = 5): Promise<string[]> {\r\n  try {\r\n    const res = await axios.get(`https://duckduckgo.com/html/?q=${encodeURIComponent(query)}`, {\r\n      headers: { 'User-Agent': getRandomUserAgent() }\r\n    });\r\n\r\n    const dom = new JSDOM(res.data);\r\n    const items = dom.window.document.querySelectorAll('.result__title a');\r\n\r\n    const results: string[] = [];\r\n    for (const item of items) {\r\n      const title = item.textContent?.trim();\r\n      const rawHref = item.getAttribute('href');\r\n      const url = extractDirectUrl(rawHref || '');\r\n\r\n      if (title && url) {\r\n        results.push(`- ${title} → ${url}`);\r\n        if (results.length >= maxResults) break;\r\n      }\r\n    }\r\n    return results;\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Main Felo AI search method.\r\n * Streams response from felo.ai and combines it with DuckDuckGo references.\r\n *\r\n * @param prompt - The user's search query\r\n * @returns Formatted string combining AI result + references\r\n */\r\nexport async function FeloSearch(prompt: string): Promise<string> {\r\n  clearOldCache();\r\n  const cacheKey = getCacheKey(prompt);\r\n\r\n  // Return from cache if fresh\r\n  const cached = resultsCache.get(cacheKey);\r\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n    return cached.results;\r\n  }\r\n\r\n  const payload = {\r\n    query: prompt,\r\n    search_uuid: uuidv4(),\r\n    lang: '',\r\n    agent_lang: 'en',\r\n    search_options: { langcode: 'en-US' },\r\n    search_video: true,\r\n    contexts_from: 'google'\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post('https://api.felo.ai/search/threads', payload, {\r\n      headers: {\r\n        'accept': '*/*',\r\n        'accept-language': 'en-US,en;q=0.9',\r\n        'content-type': 'application/json',\r\n        'origin': 'https://felo.ai',\r\n        'referer': 'https://felo.ai/',\r\n        'user-agent': getRandomUserAgent()\r\n      },\r\n      timeout: 30000,\r\n      responseType: 'stream'\r\n    });\r\n\r\n    let finalText = '';\r\n    for await (const chunk of response.data) {\r\n      const lines = chunk.toString().split('\\n').filter((line: string) => line.startsWith('data:'));\r\n      for (const line of lines) {\r\n        try {\r\n          const json = JSON.parse(line.slice(5));\r\n          if (json.type === 'answer' && json.data?.text) {\r\n            finalText = json.data.text;\r\n          }\r\n        } catch {}\r\n      }\r\n    }\r\n\r\n    // Append references\r\n    const links = await getDuckDuckGoLinks(prompt);\r\n    let combined = finalText || '⚠️ No response from Felo.';\r\n    if (links.length) {\r\n      combined += `\\n\\n📚 References:\\n${links.join('\\n')}`;\r\n    }\r\n\r\n    // Cache result\r\n    resultsCache.set(cacheKey, { results: combined, timestamp: Date.now() });\r\n    return combined;\r\n  } catch (err: any) {\r\n    return `❌ Felo API error: ${err.message}`;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\nconst BASE_URL = 'https://getstickerpack.com';\r\n\r\n/**\r\n * Represents a sticker pack with title and URL.\r\n */\r\nexport interface StickerPack {\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Searches for sticker packs by query keyword.\r\n * @param query - Search keyword (e.g., \"gura\")\r\n * @returns List of sticker packs with title + URL\r\n */\r\nexport async function searchSticker(query: string): Promise<StickerPack[]> {\r\n  const res = await axios.get(`${BASE_URL}/stickers?query=${encodeURIComponent(query)}`);\r\n  const $ = load(res.data);\r\n  const packs: StickerPack[] = [];\r\n\r\n  $('.sticker-pack-cols a').each((_, el) => {\r\n    const title = $(el).find('.title').text().trim();\r\n    const href = $(el).attr('href')?.trim();\r\n\r\n    if (title && href) {\r\n      const fullUrl = href.startsWith('http') ? href : BASE_URL + href;\r\n      packs.push({ title, url: fullUrl });\r\n    }\r\n  });\r\n\r\n  return packs;\r\n}\r\n\r\n/**\r\n * Scrapes all sticker image links from a sticker pack page.\r\n * @param packUrl - Full URL of the sticker pack\r\n * @returns List of direct image URLs (PNG/WebP)\r\n */\r\nexport async function getStickersFromPack(packUrl: string): Promise<string[]> {\r\n  const res = await axios.get(packUrl);\r\n  const $ = load(res.data);\r\n  const links: string[] = [];\r\n\r\n  $('img.sticker-image').each((_, el) => {\r\n    const src = $(el).attr('data-src-large');\r\n    if (src) links.push(src);\r\n  });\r\n\r\n  return links;\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Represents a downloadable media format (video or audio).\r\n */\r\nexport interface MediaFormat {\r\n    url: string;\r\n    quality: string;\r\n    ext: string;\r\n    size: string;\r\n    hasAudio?: boolean; // Only for video\r\n}\r\n\r\n/**\r\n * Contains basic metadata about the video.\r\n */\r\nexport interface Metadata {\r\n    title: string;\r\n    duration: string;\r\n    thumbnail: string | null;\r\n}\r\n\r\n/**\r\n * Final structured output returned by the scraper.\r\n */\r\nexport interface ScrapeResult {\r\n    status: 'success';\r\n    metadata: Metadata;\r\n    downloads: {\r\n        video: MediaFormat[];\r\n        audio: MediaFormat[];\r\n    };\r\n}\r\n\r\n/**\r\n * Generates a 64-bit hash (pseudo MurmurHash3-like) of the input string.\r\n * Used by ssyoutube's request logic to validate hash requirements.\r\n *\r\n * @param str - Input string to hash (e.g., full YouTube video URL)\r\n * @returns 64-bit hex string\r\n */\r\nfunction murmurHash64(str: string): string {\r\n    let h1 = 0xdeadbeef;\r\n    let h2 = 0x41c6ce57;\r\n\r\n    for (let i = 0; i < str.length; i++) {\r\n        const k = str.charCodeAt(i);\r\n        h1 = Math.imul(h1 ^ k, 0x85ebca6b);\r\n        h2 = Math.imul(h2 ^ k, 0xc2b2ae35);\r\n    }\r\n\r\n    h1 = Math.imul(h1 ^ (h1 >>> 16), 0x85ebca6b) ^ Math.imul(h2 ^ (h2 >>> 13), 0xc2b2ae35);\r\n    h2 = Math.imul(h2 ^ (h2 >>> 16), 0x85ebca6b) ^ Math.imul(h1 ^ (h1 >>> 13), 0xc2b2ae35);\r\n\r\n    return (h1 >>> 0).toString(16).padStart(8, '0') + (h2 >>> 0).toString(16).padStart(8, '0');\r\n}\r\n\r\n/**\r\n * Extracts all downloadable media formats and metadata from a YouTube video using ssyoutube.rip backend.\r\n *\r\n * @param youtubeUrl - The full URL to the YouTube video.\r\n * @returns An object containing metadata and download links, or throws on failure.\r\n */\r\nexport async function ytdl(youtubeUrl: string): Promise<ScrapeResult> {\r\n    const mhash = murmurHash64(youtubeUrl);\r\n    const apiUrl = `https://ssyoutube.rip/mates/en/analyze/ajax?retry=undefined&platform=youtube&mhash=${mhash}`;\r\n    const siteKey = '0x4AAAAAAAzuNQE5IJEnuaAp';\r\n    const solverUrl = `https://api.yogik.id/tools/tcloudflare/?url=https://ssyoutube.rip/en-a1/&siteKey=${siteKey}`;\r\n\r\n    // 🔐 Step 1: Solve Cloudflare token\r\n    const cfToken = await axios.get(solverUrl)\r\n        .then(res => res.data?.data?.token)\r\n        .catch(err => {\r\n            throw new Error(`Failed to solve Cloudflare: ${err.message}`);\r\n        });\r\n\r\n    if (!cfToken) {\r\n        throw new Error('No valid Cloudflare token returned.');\r\n    }\r\n\r\n    // 🚀 Step 2: Perform main request with resolved token\r\n    const headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n        'User-Agent': 'Mozilla/5.0'\r\n    };\r\n\r\n    const requestBody = new URLSearchParams({\r\n        url: youtubeUrl,\r\n        ajax: '1',\r\n        lang: 'en',\r\n        cftoken: cfToken\r\n    });\r\n\r\n    const response = await axios.post(apiUrl, requestBody.toString(), { headers });\r\n\r\n    const html = response.data?.result;\r\n    if (typeof html !== 'string') {\r\n        throw new Error('Invalid response HTML content.');\r\n    }\r\n\r\n    // 📄 Step 3: Parse HTML response using Cheerio\r\n    const $ = load(html);\r\n\r\n    const title = $('#video_title').text().trim();\r\n    const duration = $('p.m-b-0.m-t').text().replace('Duration:', '').trim();\r\n    const thumbnail = $('img.img-thumbnail').attr('src') ?? null;\r\n\r\n    if (!title) throw new Error('Failed to extract title from HTML.');\r\n\r\n    const downloads = {\r\n        video: [] as MediaFormat[],\r\n        audio: [] as MediaFormat[]\r\n    };\r\n\r\n    let currentSection = '';\r\n\r\n    $('table tr').each((_, element) => {\r\n        const row = $(element);\r\n\r\n        if (row.find('strong').length > 0) {\r\n            currentSection = row.find('strong').text().trim().toLowerCase();\r\n            return;\r\n        }\r\n\r\n        const columns = row.find('td');\r\n        if (columns.length === 3) {\r\n            const btn = $(columns[2]).find('a, button');\r\n            const url = btn.attr('href') || btn.data('url') as string;\r\n            if (!url) return;\r\n\r\n            const format: MediaFormat = {\r\n                url,\r\n                quality: $(columns[0]).text().trim(),\r\n                ext: btn.data('ftype') as string,\r\n                size: $(columns[1]).text().trim()\r\n            };\r\n\r\n            if (currentSection === 'video') {\r\n                format.hasAudio = !row.hasClass('noaudio');\r\n                downloads.video.push(format);\r\n            } else if (currentSection === 'audio') {\r\n                downloads.audio.push(format);\r\n            }\r\n        }\r\n    });\r\n\r\n    return {\r\n        status: 'success',\r\n        metadata: { title, duration, thumbnail },\r\n        downloads\r\n    };\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Type for supported rewrite levels\r\n */\r\nexport type RewriteLevel = 'standard' | 'enhanced' | 'aggressive';\r\n\r\n/**\r\n * Fine-tuning flags for rewriting behavior\r\n */\r\nexport interface RewriteSettings {\r\n    removeUnicode?: boolean;\r\n    dashesToCommas?: boolean;\r\n    removeDashes?: boolean;\r\n    transformQuotes?: boolean;\r\n    removeWhitespace?: boolean;\r\n    removeEmDash?: boolean;\r\n    keyboardOnly?: boolean;\r\n}\r\n\r\n/**\r\n * Successful transformation response\r\n */\r\nexport interface HumanizeSuccess {\r\n    success: true;\r\n    code: 200;\r\n    level: RewriteLevel;\r\n    result: {\r\n        code: string;\r\n        originalLength: number;\r\n        transformedLength: number;\r\n        reductionPercentage: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Failed transformation response\r\n */\r\nexport interface HumanizeFailure {\r\n    success: false;\r\n    code: number;\r\n    result: {\r\n        error: string;\r\n        isLevel?: RewriteLevel[];\r\n    };\r\n}\r\n\r\n/**\r\n * Union type for all possible responses\r\n */\r\nexport type HumanizeResult = HumanizeSuccess | HumanizeFailure;\r\n\r\nconst BASE_URL = 'https://unaimytext.com';\r\nconst HUMANIZE_ENDPOINT = '/api/humanize';\r\n\r\nconst defaultHeaders = {\r\n    'authority': 'unaimytext.com',\r\n    'accept': '*/*',\r\n    'content-type': 'application/json',\r\n    'origin': BASE_URL,\r\n    'referer': BASE_URL + '/',\r\n    'user-agent': 'Postify/1.0.0'\r\n};\r\n\r\n/**\r\n * Rewrite AI-generated text to make it more human-sounding using UnaiMyText.\r\n * \r\n * @param text - Input text to be humanized (required)\r\n * @param level - Rewrite level: 'standard', 'enhanced', or 'aggressive'\r\n * @param settings - Optional custom settings to override default rewriting behavior\r\n * \r\n * @returns A structured object indicating success/failure and rewritten content\r\n */\r\nexport async function humanizeText(\r\n    text: string,\r\n    level: RewriteLevel = 'enhanced',\r\n    settings: RewriteSettings = {}\r\n): Promise<HumanizeResult> {\r\n    if (typeof text !== 'string' || !text.trim()) {\r\n        return {\r\n            success: false,\r\n            code: 400,\r\n            result: {\r\n                error: '❌ Input text is required.'\r\n            }\r\n        };\r\n    }\r\n\r\n    const validLevels: RewriteLevel[] = ['standard', 'enhanced', 'aggressive'];\r\n    if (!validLevels.includes(level)) {\r\n        return {\r\n            success: false,\r\n            code: 400,\r\n            result: {\r\n                error: `Invalid rewrite level: ${level}`,\r\n                isLevel: validLevels\r\n            }\r\n        };\r\n    }\r\n\r\n    const defaultSettings: RewriteSettings = {\r\n        removeUnicode: true,\r\n        dashesToCommas: true,\r\n        removeDashes: true,\r\n        transformQuotes: true,\r\n        removeWhitespace: true,\r\n        removeEmDash: true,\r\n        keyboardOnly: true\r\n    };\r\n\r\n    try {\r\n        const res = await axios.post(\r\n            BASE_URL + HUMANIZE_ENDPOINT,\r\n            {\r\n                text,\r\n                recaptchaToken: '',\r\n                level,\r\n                settings: {\r\n                    ...defaultSettings,\r\n                    ...settings\r\n                }\r\n            },\r\n            {\r\n                headers: defaultHeaders,\r\n                timeout: 10000\r\n            }\r\n        );\r\n\r\n        const resultText: string = res.data?.text;\r\n        if (!resultText) {\r\n            return {\r\n                success: false,\r\n                code: 500,\r\n                result: {\r\n                    error: 'Empty response received from API.'\r\n                }\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            code: 200,\r\n            level,\r\n            result: {\r\n                code: resultText,\r\n                originalLength: text.length,\r\n                transformedLength: resultText.length,\r\n                reductionPercentage:\r\n                    ((text.length - resultText.length) / text.length * 100).toFixed(2) + '%'\r\n            }\r\n        };\r\n    } catch (err: any) {\r\n        return {\r\n            success: false,\r\n            code: err.response?.status || 500,\r\n            result: {\r\n                error: 'Unhandled error while contacting UnaiMyText API.'\r\n            }\r\n        };\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n/** Predefined aspect ratios allowed by AI Freebox API */\r\nexport type SupportedAspectRatios = '1:1' | '2:3' | '9:16' | '16:9';\r\n\r\n/** Predefined slug values representing the generation model */\r\nexport type SupportedSlugs =\r\n  | 'ai-art-generator'\r\n  | 'ai-fantasy-map-creator'\r\n  | 'ai-youtube-thumbnail-generator'\r\n  | 'ai-old-cartoon-characters-generator';\r\n\r\n/** Params object for AIFreeboxImage function */\r\nexport interface AIFreeboxImageParams {\r\n  prompt: string;\r\n  aspectRatio?: SupportedAspectRatios;\r\n  slug?: SupportedSlugs;\r\n}\r\n\r\n/**\r\n * Generates an image using the AI Freebox API.\r\n *\r\n * @param {string} prompt - The prompt describing the image content.\r\n * @param {SupportedAspectRatios} aspectRatio - The desired aspect ratio of the image.\r\n * @param {SupportedSlugs} slug - The category or model used for generation.\r\n *\r\n * @returns {Promise<string>} The URL of the generated image.\r\n *\r\n * @throws Will throw an error if the aspectRatio or slug is invalid, or if the API fails.\r\n */\r\nexport async function AIFreeboxImage(\r\n  prompt: string,\r\n  aspectRatio: SupportedAspectRatios = '16:9',\r\n  slug: SupportedSlugs = 'ai-art-generator'\r\n): Promise<string> {\r\n  const validRatios: SupportedAspectRatios[] = ['1:1', '2:3', '9:16', '16:9'];\r\n  const validSlugs: SupportedSlugs[] = [\r\n    'ai-art-generator',\r\n    'ai-fantasy-map-creator',\r\n    'ai-youtube-thumbnail-generator',\r\n    'ai-old-cartoon-characters-generator',\r\n  ];\r\n\r\n  if (!validRatios.includes(aspectRatio)) {\r\n    throw new Error(\r\n      `Invalid aspect ratio! Choose one of: ${validRatios.join(', ')}`\r\n    );\r\n  }\r\n\r\n  if (!validSlugs.includes(slug)) {\r\n    throw new Error(`Invalid slug! Choose one of: ${validSlugs.join(', ')}`);\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://aifreebox.com/api/image-generator',\r\n      {\r\n        userPrompt: prompt,\r\n        aspectRatio,\r\n        slug,\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Origin: 'https://aifreebox.com',\r\n          Referer: `https://aifreebox.com/image-generator/${slug}`,\r\n          'User-Agent':\r\n            'Mozilla/5.0 (Linux; Android 13; Mobile) AppleWebKit/537.36 Safari/537.36',\r\n        },\r\n      }\r\n    );\r\n\r\n    const { data } = response;\r\n\r\n    if (data?.success && data.imageUrl) {\r\n      return data.imageUrl;\r\n    } else {\r\n      throw new Error('No response from AI Freebox');\r\n    }\r\n  } catch (err: any) {\r\n    console.error('Error:', err.message);\r\n    throw new Error('Failed to generate image');\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Object containing song title, artist, url and cleaned lyrics\r\n */\r\nexport interface LyricsResult {\r\n  title: string;\r\n  artist: string;\r\n  lyrics: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Fetch lyrics and metadata for a given song query from songtexte.com\r\n *\r\n * @param query The song name or artist and title to search\r\n * @returns Object containing song title, artist, url and cleaned lyrics\r\n * @throws If no result or network/scrape failure occurs\r\n */\r\nexport async function SearchLyrics(query: string): Promise<LyricsResult> {\r\n  if (!query.trim()) throw new Error('Query is empty');\r\n\r\n  const searchUrl = `https://www.songtexte.com/search?q=${encodeURIComponent(query)}&c=all`;\r\n\r\n  const { data: searchData } = await axios.get(searchUrl, {\r\n    headers: { 'Accept-Language': 'id-ID,id;q=0.9' },\r\n  });\r\n\r\n  const $ = load(searchData);\r\n  const link =\r\n    $('.topHit a.topHitLink').attr('href') ||\r\n    $('div.songResultTable .song a').first().attr('href');\r\n  if (!link) throw new Error('Lyrics not found');\r\n\r\n  const lyricUrl = `https://www.songtexte.com/${link.replace(/^\\/?/, '')}`;\r\n  const { data: lyricData } = await axios.get(lyricUrl, {\r\n    headers: { 'Accept-Language': 'id-ID,id;q=0.9' },\r\n  });\r\n\r\n  const $$ = load(lyricData);\r\n  const heading = $$('h1').text().trim();\r\n  const [, title = heading, artist = ''] =\r\n    heading.match(/^(.+?)\\s+Songtext\\s+von\\s+(.+)$/i) || [];\r\n\r\n  let rawLyrics = $$('#lyrics').html() || '';\r\n  const lyrics = rawLyrics\r\n    .replace(/<br\\s*\\/?>/gi, '\\n')\r\n    .replace(/<!--.*?-->/gs, '')\r\n    .replace(/<\\/?[^>]+>/g, '')\r\n    .replace(/]]>|\\/\\|\\\\/g, '')\r\n    .replace(/&nbsp;/g, ' ')\r\n    .replace(/\\r/g, '')\r\n    .split('\\n')\r\n    .map((line) => line.trim())\r\n    .filter(Boolean)\r\n    .join('\\n');\r\n\r\n  return { title, artist, lyrics, url: lyricUrl };\r\n}\r\n","import axios, { AxiosError } from 'axios';\r\n\r\n/**\r\n * Minecraft player name history entry\r\n */\r\nexport interface NameHistoryEntry {\r\n  name: string;\r\n  changedToAt?: string;\r\n}\r\n\r\n/**\r\n * Minecraft player profile\r\n */\r\nexport interface MinecraftProfile {\r\n  username: string;\r\n  id: string;\r\n  short_id: string;\r\n  raw_id: string;\r\n  avatar: string;\r\n  skin_texture: string;\r\n  name_history: NameHistoryEntry[];\r\n  head_preview: string;\r\n  full_body_preview_hd: string;\r\n  skin_download: string;\r\n  qr_uuid: string;\r\n  profile_valid: boolean;\r\n  skin_model: string;\r\n  namemc_url: string;\r\n}\r\n\r\n/**\r\n * Minecraft player profile result\r\n */\r\nexport interface MinecraftStalkResult {\r\n  status: number;\r\n  data?: MinecraftProfile;\r\n  error?: string;\r\n  reason?: string;\r\n}\r\n\r\n/**\r\n * Fetch Minecraft player profile from PlayerDB and Mojang APIs.\r\n * @param username Minecraft username (case-insensitive)\r\n * @returns Minecraft profile or descriptive error object\r\n */\r\nexport async function MinecraftStalk(\r\n  username: string\r\n): Promise<MinecraftStalkResult> {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://playerdb.co/api/player/minecraft/${username}`\r\n    );\r\n    const data = response.data;\r\n\r\n    if (!data.success || !data.data?.player) {\r\n      return {\r\n        status: 404,\r\n        error: 'Player not found in PlayerDB.',\r\n        reason: data.code || 'unknown',\r\n      };\r\n    }\r\n\r\n    const player = data.data.player;\r\n    let skinModel = 'Unknown';\r\n\r\n    try {\r\n      const sessionRes = await axios.get(\r\n        `https://sessionserver.mojang.com/session/minecraft/profile/${player.id}`\r\n      );\r\n      const textures = JSON.parse(\r\n        Buffer.from(sessionRes.data.properties[0].value, 'base64').toString()\r\n      );\r\n      skinModel =\r\n        textures.textures.SKIN.metadata?.model === 'slim'\r\n          ? 'Alex (slim)'\r\n          : 'Steve (default)';\r\n    } catch (sessionError: any) {\r\n      skinModel = '⚠️ Failed to fetch skin model';\r\n    }\r\n\r\n    const profile: MinecraftProfile = {\r\n      username: player.username,\r\n      id: player.id,\r\n      short_id: player.id.replace(/-/g, ''),\r\n      raw_id: player.raw_id,\r\n      avatar: player.avatar,\r\n      skin_texture: player.skin_texture,\r\n      name_history: player.name_history || [],\r\n      head_preview: `https://mc-heads.net/head/${username}`,\r\n      full_body_preview_hd: `https://crafatar.com/renders/body/${player.id}?scale=10&overlay`,\r\n      skin_download: `https://mc-heads.net/download/${username}`,\r\n      qr_uuid: `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${player.id}`,\r\n      profile_valid: data.code === 'player.found',\r\n      skin_model: skinModel,\r\n      namemc_url: `https://namemc.com/profile/${username}`,\r\n    };\r\n\r\n    return { status: 200, data: profile };\r\n  } catch (error: unknown) {\r\n    // Axios-specific error handling\r\n    if (axios.isAxiosError(error)) {\r\n      const axiosErr = error as AxiosError;\r\n      return {\r\n        status: axiosErr.response?.status || 500,\r\n        error: axiosErr.message,\r\n        reason: axiosErr.response?.statusText || 'Unexpected Axios error',\r\n      };\r\n    }\r\n\r\n    // Non-Axios or unknown error\r\n    return {\r\n      status: 500,\r\n      error: (error as Error).message || 'Unknown error',\r\n      reason: 'Unexpected failure during request',\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Represents an inline image for a Gemini prompt.\r\n */\r\nexport interface GeminiInlineImage {\r\n  mime_type: string;\r\n  data: string; // base64 image string\r\n}\r\n\r\n/**\r\n * Represents a part of a Gemini prompt.\r\n */\r\nexport interface GeminiPromptPart {\r\n  text?: string;\r\n  inline_data?: GeminiInlineImage;\r\n}\r\n\r\n/**\r\n * Represents a Gemini prompt.\r\n */\r\nexport interface GeminiRequest {\r\n  contents: {\r\n    parts: GeminiPromptPart[];\r\n  }[];\r\n}\r\n\r\n/**\r\n * Represents a response from the Gemini API.\r\n */\r\nexport interface GeminiResponseCandidate {\r\n  content?: {\r\n    parts?: {\r\n      text: string;\r\n    }[];\r\n  };\r\n}\r\n\r\n/**\r\n * Represents the response from the Gemini API.\r\n */\r\nexport interface GeminiResponse {\r\n  candidates?: GeminiResponseCandidate[];\r\n  promptFeedback?: {\r\n    blockReason?: string;\r\n    safetyRatings?: any;\r\n  };\r\n}\r\n\r\n/**\r\n * Generates content using Gemini AI.\r\n * @param apiKey - Your Gemini API Key\r\n * @param textPrompt - Prompt to send as text\r\n * @param imageDataBase64 - Optional base64-encoded image\r\n * @param mimeType - MIME type of the image (defaults to 'image/jpeg')\r\n * @returns AI-generated string content or error details\r\n */\r\nexport async function GeminiAi(\r\n  apiKey: string,\r\n  textPrompt?: string,\r\n  imageDataBase64?: string,\r\n  mimeType: string = 'image/jpeg'\r\n): Promise<string> {\r\n  if (!apiKey) throw new Error('API Key Gemini tidak boleh kosong.');\r\n\r\n  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;\r\n\r\n  const parts = [];\r\n  if (textPrompt) parts.push({ text: textPrompt });\r\n  if (imageDataBase64) {\r\n    parts.push({\r\n      inline_data: {\r\n        mime_type: mimeType,\r\n        data: imageDataBase64,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (parts.length === 0) {\r\n    throw new Error(\r\n      'Tidak ada input (teks atau gambar) yang diberikan untuk AI.'\r\n    );\r\n  }\r\n\r\n  const requestPayload: GeminiRequest = {\r\n    contents: [{ parts }],\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post<GeminiResponse>(url, requestPayload, {\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n\r\n    const result = response.data;\r\n\r\n    if (\r\n      result.candidates?.length &&\r\n      result.candidates[0].content?.parts?.length\r\n    ) {\r\n      return result.candidates[0].content.parts[0].text;\r\n    }\r\n\r\n    if (result.promptFeedback?.blockReason) {\r\n      return `🚫 Respons diblokir oleh Gemini. Alasan: ${result.promptFeedback.blockReason}\\n🛡️ Detail: ${JSON.stringify(result.promptFeedback.safetyRatings)}`;\r\n    }\r\n\r\n    return '⚠️ Tidak ada respons yang valid dari AI.';\r\n  } catch (error: any) {\r\n    const errMsg = error.response?.data || error.message;\r\n    throw new Error(\r\n      `❌ Gagal berinteraksi dengan AI: ${JSON.stringify(errMsg)}`\r\n    );\r\n  }\r\n}\r\n","/**\r\n * src/nakanime.ts\r\n * Provides methods to fetch anime data from Nakanime API\r\n */\r\n\r\nimport axios, { AxiosInstance } from 'axios';\r\n/**\r\n * Interface definitions for Nakanime scraper API responses.\r\n */\r\n\r\nexport interface AnimeData {\r\n  id: number;\r\n  title: string;\r\n  slug: string;\r\n  thumbnail: string;\r\n  type: string | null;\r\n  url: string;\r\n  status: string;\r\n}\r\n\r\n/**\r\n * Genre data interface\r\n */\r\nexport interface GenreData {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n}\r\n\r\n/**\r\n * Search result interface\r\n */\r\nexport interface SearchResult {\r\n  data: AnimeData[];\r\n}\r\n\r\n/**\r\n * Genre list interface\r\n */\r\nexport interface GenreList {\r\n  data: GenreData[];\r\n}\r\n\r\n/**\r\n * Class for accessing anime data from Nakanime unofficial API.\r\n */\r\nexport class Nakanime {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: 'https://anime.nakanime.my.id/api/anime',\r\n      headers: {\r\n        accept: 'application/json, text/plain, */*',\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2',\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get anime list sorted by order type.\r\n   * @param order Sorting method ('title', 'latest', 'popular', etc.)\r\n   * @param page Page number\r\n   */\r\n  async get(order: string = 'latest', page: number = 1): Promise<SearchResult> {\r\n    const validOrders = [\r\n      'title',\r\n      'latest',\r\n      'popular',\r\n      'rating',\r\n      'update',\r\n      'titlereverse',\r\n    ];\r\n    if (!validOrders.includes(order)) {\r\n      throw new Error(`Available orders: ${validOrders.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get('/all/', {\r\n      params: { order, page },\r\n    });\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get anime list by genre\r\n   * @param genre Genre slug (e.g., 'action', 'comedy')\r\n   * @param page Page number\r\n   */\r\n  async genre(genre: string, page: number = 1): Promise<any> {\r\n    const { data: genreData } = await this.client.get<GenreList>('/genre');\r\n    const validGenres = genreData.data.map((g) => g.slug);\r\n\r\n    if (!validGenres.includes(genre)) {\r\n      throw new Error(`Available genres: ${validGenres.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get('/bygenres/', {\r\n      params: { genre, page },\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Search anime by keyword\r\n   * @param query Search term\r\n   */\r\n  async search(query: string): Promise<SearchResult> {\r\n    if (!query) throw new Error('Query is required');\r\n    const { data } = await this.client.get('/search/', {\r\n      params: { keyword: query },\r\n    });\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get anime detail from URL\r\n   * @param url Anime detail page URL\r\n   */\r\n  async getDetail(url: string): Promise<any> {\r\n    const match = url.match(\r\n      /^https:\\/\\/api\\.nakanime\\.my\\.id\\/anime\\/([^\\/]+)\\/?$/\r\n    );\r\n    if (!match) throw new Error('Invalid detail URL format');\r\n\r\n    const { data } = await this.client.get('/', {\r\n      params: { name: match[1] },\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get episode data from URL\r\n   * @param url Episode URL\r\n   */\r\n  async getData(url: string): Promise<any> {\r\n    const match = url.match(\r\n      /^https:\\/\\/api\\.nakanime\\.my\\.id\\/([^\\/]+episode-[^\\/]+)\\/?$/\r\n    );\r\n    if (!match) throw new Error('Invalid episode URL format');\r\n\r\n    const { data } = await this.client.get('/data/', {\r\n      params: { slug: match[1] },\r\n    });\r\n\r\n    return data;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Uploads a given image buffer to Catbox for public access.\r\n *\r\n * @param buffer - The image file buffer.\r\n * @param filename - Name to assign to the file on Catbox.\r\n * @returns A public Catbox URL pointing to the uploaded image.\r\n */\r\nexport async function uploadToCatbox(\r\n  buffer: Buffer,\r\n  filename: string\r\n): Promise<string> {\r\n  const form = new FormData();\r\n  form.append('reqtype', 'fileupload');\r\n  form.append('fileToUpload', buffer, { filename });\r\n\r\n  try {\r\n    const res = await axios.post('https://catbox.moe/user/api.php', form, {\r\n      headers: form.getHeaders(),\r\n    });\r\n\r\n    if (typeof res.data === 'string' && res.data.startsWith('https://')) {\r\n      return res.data;\r\n    }\r\n\r\n    throw new Error('Catbox upload failed or returned an invalid response.');\r\n  } catch (err: any) {\r\n    throw new Error(`Catbox upload error: ${err.message}`);\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport { uploadToCatbox } from '../_other-scraper/uploader.js';\r\n\r\n/**\r\n * Available Studio Ghibli art styles.\r\n */\r\nexport type GhibliStyle =\r\n  | 'Spirited Away'\r\n  | \"Howl's Castle\"\r\n  | 'Princess Mononoke'\r\n  | 'Totoro';\r\n\r\n/**\r\n * Input options for generating a Ghibli-style image.\r\n */\r\nexport interface GhibliGenerationOptions {\r\n  prompt: string;\r\n  style: GhibliStyle;\r\n}\r\n\r\n/**\r\n * Generates an image using the Ghibli AI Image Generator and uploads it to Catbox.\r\n *\r\n * @param options - Contains the prompt and Ghibli style to use.\r\n * @returns A publicly accessible URL of the generated image.\r\n * @throws Error if the generation or upload process fails.\r\n */\r\nexport async function TextToGhibli(\r\n  options: GhibliGenerationOptions\r\n): Promise<string> {\r\n  const allowedStyles: GhibliStyle[] = [\r\n    'Spirited Away',\r\n    \"Howl's Castle\",\r\n    'Princess Mononoke',\r\n    'Totoro',\r\n  ];\r\n\r\n  if (!allowedStyles.includes(options.style)) {\r\n    throw new Error(`Invalid style. Choose from: ${allowedStyles.join(', ')}`);\r\n  }\r\n\r\n  const headers = {\r\n    'content-type': 'application/json',\r\n    origin: 'https://ghibliimagegenerator.net',\r\n    referer: 'https://ghibliimagegenerator.net/generator',\r\n    'user-agent':\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/117.0 Safari/537.36',\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://ghibliimagegenerator.net/api/generate-image',\r\n      {\r\n        prompt: options.prompt,\r\n        style: options.style,\r\n      },\r\n      { headers }\r\n    );\r\n    const imageData: string | undefined = response.data?.imageData;\r\n    if (!imageData || !imageData.startsWith('data:image')) {\r\n      throw new Error('Invalid image data returned from Ghibli generator.');\r\n    }\r\n    const base64 = imageData.split(',')[1];\r\n    const buffer = Buffer.from(base64, 'base64');\r\n    const filename = `ghibli_${Date.now()}.webp`;\r\n    const catboxUrl = await uploadToCatbox(buffer, filename);\r\n    return catboxUrl;\r\n  } catch (error: any) {\r\n    throw new Error(`Ghibli generation failed: ${error.message}`);\r\n  }\r\n}\r\n","import WebSocket from 'ws';\r\n\r\n/**\r\n * Interface untuk input transformasi gambar menggunakan DeepfakeMaker.io\r\n */\r\nexport interface DeepfakeInput {\r\n  buffer: Buffer;\r\n  prompt: string;\r\n}\r\n\r\n/**\r\n * Interface untuk pesan WebSocket\r\n */\r\nexport interface WebSocketMessage {\r\n  msg: string;\r\n  output?: {\r\n    result: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Melakukan transformasi gambar menggunakan DeepfakeMaker.io\r\n * @param buffer Buffer dari gambar yang akan diubah\r\n * @param prompt Prompt deskriptif untuk mengganti pakaian (termasuk NSFW)\r\n * @returns URL hasil deepfake yang dihasilkan\r\n */\r\nexport async function deepfakeTransform({\r\n  buffer,\r\n  prompt,\r\n}: DeepfakeInput): Promise<string> {\r\n  if (!prompt || !buffer || !Buffer.isBuffer(buffer)) {\r\n    throw new Error('Valid prompt and image buffer are required.');\r\n  }\r\n\r\n  const sessionHash = Math.random().toString(36).substring(2);\r\n  const socket = new WebSocket(\r\n    'wss://deepfakemaker.io/cloth-change/queue/join'\r\n  );\r\n\r\n  return new Promise<string>((resolve, reject) => {\r\n    socket.on('message', (raw) => {\r\n      const data: WebSocketMessage = JSON.parse(raw.toString('utf-8'));\r\n\r\n      switch (data.msg) {\r\n        case 'send_hash':\r\n          socket.send(JSON.stringify({ session_hash: sessionHash }));\r\n          break;\r\n\r\n        case 'send_data':\r\n          socket.send(\r\n            JSON.stringify({\r\n              data: {\r\n                prompt,\r\n                request_from: 4,\r\n                source_image: `data:image/jpeg;base64,${buffer.toString('base64')}`,\r\n                type: 1,\r\n              },\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'process_completed':\r\n          socket.close();\r\n          if (!data.output || !data.output.result?.[0]) {\r\n            return reject(new Error('No result returned'));\r\n          }\r\n          return resolve(\r\n            `https://res.deepfakemaker.io/${data.output.result[0]}`\r\n          );\r\n      }\r\n    });\r\n\r\n    socket.on('error', (err) => {\r\n      reject(new Error(`WebSocket error: ${err.message}`));\r\n    });\r\n\r\n    socket.on('close', () => {\r\n      // Optionally handle close\r\n      reject(new Error('WebSocket connection closed'));\r\n    });\r\n  });\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Options required to generate a prompt from an image.\r\n */\r\nexport interface ImageToPromptOptions {\r\n  imageUrl: string;\r\n  imageBuffer?: Buffer;\r\n}\r\n\r\n/**\r\n * Expected response from NeuralFrames API.\r\n */\r\nexport interface NeuralFramesResponse {\r\n  prompt: string;\r\n  [key: string]: any; // For any additional properties returned\r\n}\r\n\r\n/**\r\n * Uploads an image (either from a URL or a raw Buffer) to NeuralFrames'\r\n * CLIP Interrogate endpoint and returns an AI-generated textual prompt.\r\n *\r\n * @param options - The input options containing either a URL or Buffer.\r\n * @returns A promise resolving to the AI-generated prompt.\r\n * @throws Error if both input types are missing or the API fails.\r\n */\r\nexport async function imageToPrompt(\r\n  options: ImageToPromptOptions\r\n): Promise<NeuralFramesResponse> {\r\n  const { imageUrl, imageBuffer } = options;\r\n\r\n  // Validate input\r\n  if (!imageUrl && !imageBuffer) {\r\n    throw new Error('Either imageUrl or imageBuffer must be provided.');\r\n  }\r\n\r\n  let buffer: Buffer;\r\n\r\n  // If image URL is provided, download it\r\n  if (imageUrl) {\r\n    try {\r\n      const response = await axios.get(imageUrl, {\r\n        responseType: 'arraybuffer',\r\n      });\r\n      buffer = Buffer.from(response.data, 'binary');\r\n    } catch (err: any) {\r\n      throw new Error(`Failed to download image from URL: ${err.message}`);\r\n    }\r\n  } else {\r\n    // Use provided buffer directly\r\n    if (!Buffer.isBuffer(imageBuffer)) {\r\n      throw new Error('imageBuffer must be a valid Buffer instance.');\r\n    }\r\n    buffer = imageBuffer;\r\n  }\r\n\r\n  // Prepare multipart form\r\n  const form = new FormData();\r\n  form.append('file', buffer, {\r\n    filename: 'upload.jpg',\r\n    contentType: 'image/jpeg',\r\n  });\r\n\r\n  // Submit to NeuralFrames API\r\n  try {\r\n    const response = await axios.post<NeuralFramesResponse>(\r\n      'https://be.neuralframes.com/clip_interrogate/',\r\n      form,\r\n      {\r\n        headers: {\r\n          ...form.getHeaders(),\r\n          authorization:\r\n            'Bearer uvcKfXuj6Ygncs6tiSJ6VXLxoapJdjQ3EEsSIt45Zm+vsl8qcLAAOrnnGWYBccx4sbEaQtCr416jxvc/zJNAlcDjLYjfHfHzPpfJ00l05h0oy7twPKzZrO4xSB+YGrmCyb/zOduHh1l9ogFPg/3aeSsz+wZYL9nlXfXdvCqDIP9bLcQMHiUKB0UCGuew2oRt',\r\n          origin: 'https://www.neuralframes.com',\r\n          referer: 'https://www.neuralframes.com',\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  } catch (err: any) {\r\n    throw new Error(`NeuralFrames API error: ${err.message}`);\r\n  }\r\n}\r\n","// src/snack.module.ts\r\n\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Structure of successful video extraction result.\r\n */\r\nexport interface SnackVideoSuccess {\r\n  status: true;\r\n  video: string;\r\n}\r\n\r\n/**\r\n * Structure of a failed video extraction attempt.\r\n */\r\nexport interface SnackVideoFailure {\r\n  status: false;\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Unified type for the result.\r\n */\r\nexport type SnackVideoResult = SnackVideoSuccess | SnackVideoFailure;\r\n\r\n/**\r\n * Downloads video data from a SnackVideo URL using snackdownloader.com's public API.\r\n *\r\n * @param url - A valid SnackVideo video link.\r\n * @returns An object indicating success/failure and the video download URL or error message.\r\n */\r\nexport async function downloadSnackVideo(\r\n  url: string\r\n): Promise<SnackVideoResult> {\r\n  if (!/^https?:\\/\\/(www\\.)?snackvideo\\.com\\/.*/.test(url)) {\r\n    return {\r\n      status: false,\r\n      message: 'Invalid SnackVideo URL format.',\r\n    };\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://api.snackdownloader.com/get-data',\r\n      { url },\r\n      {\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          origin: 'https://snackdownloader.com',\r\n          referer: 'https://snackdownloader.com',\r\n          'user-agent':\r\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',\r\n        },\r\n      }\r\n    );\r\n\r\n    const { video } = response.data;\r\n\r\n    if (!video) {\r\n      return {\r\n        status: false,\r\n        message: 'Video URL not found in response. Please check the link.',\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: true,\r\n      video,\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: err.message || 'Unknown error occurred.',\r\n    };\r\n  }\r\n}\r\n","// src/guessFlag.module.ts\r\n\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Represents a single guess-the-flag question.\r\n */\r\nexport interface FlagQuestion {\r\n  imageUrl: string;\r\n  correctCountry: string;\r\n  options: string[];\r\n}\r\n\r\n/**\r\n * Fetches and constructs a \"Guess the Flag\" question using real-time country data\r\n * from the RESTCountries API.\r\n *\r\n * @returns A `FlagQuestion` object containing flag image URL, correct answer, and options.\r\n */\r\nexport async function GuessTheFlag(): Promise<FlagQuestion> {\r\n  const countries = await fetchCountriesFromAPI();\r\n\r\n  // Pick 4 random countries for options\r\n  const shuffled = shuffleArray(countries).slice(0, 4);\r\n  const correct = shuffled[Math.floor(Math.random() * shuffled.length)];\r\n\r\n  return {\r\n    imageUrl: correct.flagUrl,\r\n    correctCountry: correct.name,\r\n    options: shuffleArray(shuffled.map((c) => c.name)),\r\n  };\r\n}\r\n\r\n/**\r\n * Represents a simplified country entry used for game logic.\r\n */\r\ninterface CountryAPIEntry {\r\n  name: string;\r\n  code: string;\r\n  flagUrl: string;\r\n}\r\n\r\n/**\r\n * Fetches country data from the RESTCountries API with specific fields required.\r\n */\r\nasync function fetchCountriesFromAPI(): Promise<CountryAPIEntry[]> {\r\n  const fields = ['name', 'flags', 'cca2'].join(',');\r\n\r\n  try {\r\n    const response = await axios.get(\r\n      `https://restcountries.com/v3.1/all?fields=${fields}`\r\n    );\r\n\r\n    return response.data\r\n      .filter(\r\n        (country: any) =>\r\n          country.cca2 && country.flags?.png && country.name?.common\r\n      )\r\n      .map((country: any) => ({\r\n        name: country.name.common,\r\n        code: country.cca2,\r\n        flagUrl: country.flags.png,\r\n      }));\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch countries from RESTCountries API.');\r\n  }\r\n}\r\n\r\n/**\r\n * Shuffles an array using the Fisher-Yates algorithm.\r\n */\r\nfunction shuffleArray<T>(array: T[]): T[] {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n}\r\n"],"mappings":"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","names":["axios","parseStringPromise","z","TextCraftTextSchema","TextCraftOptionsSchema","TextCraftInputSchema","InvalidTextCraftResponseError","message","TextCraftClient","options","input","_a","_b","_c","_d","validated","text","text2","text3","fontStyle","fontStyle2","fontStyle3","fontSize","fontSize2","fontSize3","fontColour","fontColour2","fontColour3","borderColour","borderColour2","borderColour3","dropShadow","glossy","lighting","glitterBorder","params","fullUrl","response","parsed","filename","datadir","err","e","axios","getTokenAndCookie","_a","res","cookie","c","tokenMatch","token","downloadTikTok","tiktokUrl","retryOptions","_b","maxRetries","delayMs","attempt","params","html","titleMatch","title","matches","seen","links","_","href","label","mp4Links","v","mp3Link","imageMatches","imageLinks","m","err","isLastAttempt","error","axios","EventSource","generateSessionHash","DeepseekR1","question","useWebSearch","sessionHash","generateSessionHash","payload","axios","resolve","reject","es","EventSource","event","data","error","axios","EventSource","requestLogo","options","session_hash","payload","headers","waitForLogo","sessionHash","resolve","reject","stream","event","data","generateLogo","err","axios","FormData","fs","path","enhanceImage","options","image","saveToFile","outputDir","imageBuffer","form","response","outputBuffer","timestamp","filePath","axios","load","categoryMap","McpedlSearch","category","page","url","response","$","entries","_","element","title","link","err","axios","Animob","data","genre","page","allowedGenres","query","id","ep","episodeId","server","sv","servers","s","selected","animob","axios","JSDOM","SOURCE_IDS","extractText","html","_a","extractThumbnail","img","fetchNews","sourceId","_b","record","d","body","image","err","MobileLegendsNewsInfo","merged","axios","TempMail","error","token","axios","FormData","fs","path","uuidv4","generateClientId","length","chars","MagicStudioArt","prompt","anonymousUserId","requestTimestamp","clientId","tempPath","formData","response","uploadForm","uploadResponse","error","axios","load","XMLParser","instagram","url","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","response","$","scriptJson","_","el","content","item","dashXml","manifest","period","adaptationSets","videoTracks","audioTracks","set","isVideo","isAudio","rep","baseURL","bandwidth","track","img","axios","FormData","AnimeFinder","imageUrl","_a","imageBuffer","form","result","err","axios","poemTypes","poemLanguages","poemLengths","PoemGenerator","topic","length","type","lang","_a","url","initial","tokenMatch","token","cookies","c","form","err","axios","uuidv4","JSDOM","USER_AGENTS","resultsCache","CACHE_DURATION","getRandomUserAgent","getCacheKey","query","clearOldCache","now","key","value","extractDirectUrl","rawUrl","url","real","getDuckDuckGoLinks","maxResults","_a","res","items","results","item","title","rawHref","FeloSearch","prompt","cacheKey","cached","payload","response","finalText","chunk","lines","line","json","links","combined","err","axios","load","BASE_URL","searchSticker","query","res","$","packs","_","el","_a","title","href","fullUrl","getStickersFromPack","packUrl","links","src","axios","load","murmurHash64","str","h1","h2","i","k","ytdl","youtubeUrl","_a","apiUrl","cfToken","res","_b","err","headers","requestBody","html","$","title","duration","thumbnail","downloads","currentSection","_","element","row","columns","btn","url","format","axios","BASE_URL","HUMANIZE_ENDPOINT","defaultHeaders","humanizeText","text","level","settings","_a","_b","validLevels","defaultSettings","resultText","err","axios","AIFreeboxImage","prompt","aspectRatio","slug","validRatios","validSlugs","response","data","err","axios","load","SearchLyrics","query","searchUrl","searchData","$","link","lyricUrl","lyricData","$$","heading","title","artist","lyrics","line","axios","MinecraftStalk","username","_a","_b","_c","_d","data","player","skinModel","sessionRes","error","axiosErr","axios","GeminiAi","apiKey","textPrompt","imageDataBase64","mimeType","_a","_b","_c","_d","_e","url","parts","requestPayload","result","error","errMsg","axios","Nakanime","order","page","validOrders","data","genre","genreData","validGenres","g","query","url","match","axios","FormData","uploadToCatbox","buffer","filename","form","res","err","axios","TextToGhibli","options","_a","allowedStyles","headers","imageData","axios","base64","buffer","filename","uploadToCatbox","error","WebSocket","deepfakeTransform","buffer","prompt","sessionHash","socket","resolve","reject","raw","_a","data","err","axios","FormData","imageToPrompt","options","imageUrl","imageBuffer","buffer","response","err","form","axios","downloadSnackVideo","url","response","video","err","axios","GuessTheFlag","countries","fetchCountriesFromAPI","shuffled","shuffleArray","correct","c","fields","country","_a","_b","array","arr","i","j"]}
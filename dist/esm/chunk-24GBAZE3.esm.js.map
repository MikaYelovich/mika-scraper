{"version":3,"sources":["../src/textcraft/TextCraftClient.ts","../src/downloader/tiktok.ts","../src/deepseek-r1/deepseek.ts","../src/deepseek-r1/session.ts","../src/logo-generator/fantaxy.ts","../src/enchant-image/ihance.ts","../src/mcpedl-search/mcpedl.ts","../src/animob/animob.ts","../src/games/mobile-legends/ml-news.ts","../src/temp-mail/tempmail.ts","../src/magic-studio/magic-studio.ts","../src/instagram/instagram.ts","../src/anime-finder/anime-finder.ts","../src/poem/poem-generator.ts","../src/felo/felo.ts","../src/sticker/sticker-pack.ts","../src/youtube/ytdl.ts","../src/humanizer/humanizer.ts","../src/aifreebox/aifreebox.ts","../src/song-lyrics/song.ts","../src/minecraft/minecraft.ts","../src/gemini/gemini.ts","../src/nakanimendo/nakanime.ts","../src/_other-scraper/uploader.ts","../src/ghibli/ghibli.ts","../src/deepfake/deepfake.ts","../src/_other-scraper/imagetoprompt.ts","../src/_other-scraper/snackVideoDL.ts","../src/games/guess-flag.ts","../src/gemini/gemini-ask.ts","../src/_other-scraper/tokopedia_search.ts","../src/_other-scraper/gpt.ts","../src/_other-scraper/text2nsfw.ts","../src/_other-scraper/face-filtet.ts","../src/_other-scraper/mika-ai.ts","../src/_other-scraper/blackbox.ts","../src/_other-scraper/ssweb.ts","../src/_other-scraper/youtube-tract.ts","../src/_other-scraper/tiktok-earnings.ts","../src/youtube/ytdl2.ts","../src/_other-scraper/translate-image.ts","../src/_other-scraper/chatup-ai.ts","../src/_other-scraper/galaxyai.ts","../src/_other-scraper/snappin.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { parseStringPromise } from 'xml2js';\r\nimport { z } from 'zod';\r\n\r\n/**\r\n * Schema for input text fields (1 to 3 lines).\r\n */\r\nexport const TextCraftTextSchema = z.object({\r\n  text: z.string().min(1, 'Main text is required'),\r\n  text2: z.string().optional(),\r\n  text3: z.string().optional(),\r\n});\r\n\r\n/**\r\n * Advanced config schema (style overrides).\r\n */\r\nexport const TextCraftOptionsSchema = z.object({\r\n  fontStyle: z.string().optional(),\r\n  fontStyle2: z.string().optional(),\r\n  fontStyle3: z.string().optional(),\r\n  fontSize: z.string().optional(),\r\n  fontSize2: z.string().optional(),\r\n  fontSize3: z.string().optional(),\r\n  fontColour: z.string().optional(),\r\n  fontColour2: z.string().optional(),\r\n  fontColour3: z.string().optional(),\r\n  borderColour: z.string().optional(),\r\n  borderColour2: z.string().optional(),\r\n  borderColour3: z.string().optional(),\r\n  dropShadow: z.boolean().optional(),\r\n  glossy: z.boolean().optional(),\r\n  lighting: z.boolean().optional(),\r\n  glitterBorder: z.boolean().optional(),\r\n});\r\n\r\n/**\r\n * Combined full input shape.\r\n */\r\nexport const TextCraftInputSchema = TextCraftTextSchema.merge(\r\n  TextCraftOptionsSchema\r\n);\r\nexport type TextCraftInput = z.infer<typeof TextCraftInputSchema>;\r\n\r\n/**\r\n * Error thrown when the API returns invalid structure.\r\n */\r\nexport class InvalidTextCraftResponseError extends Error {\r\n  constructor(message = 'TextCraft API returned invalid structure') {\r\n    super(message);\r\n    this.name = 'InvalidTextCraftResponseError';\r\n  }\r\n}\r\n\r\n/**\r\n * Optional config passed when constructing the TextCraftClient\r\n */\r\nexport interface TextCraftClientOptions {\r\n  baseURL?: string;\r\n  defaultStyle?: Partial<z.infer<typeof TextCraftOptionsSchema>>;\r\n}\r\n\r\n/**\r\n * TextCraft image generation client (configurable and reusable).\r\n */\r\nexport class TextCraftClient {\r\n  private readonly endpoint: string;\r\n  private readonly defaultStyle: Partial<TextCraftInput>;\r\n\r\n  constructor(options?: TextCraftClientOptions) {\r\n    this.endpoint = options?.baseURL ?? 'https://textcraft.net/gentext3.php';\r\n    this.defaultStyle = options?.defaultStyle ?? {\r\n      fontStyle: 'font1',\r\n      fontStyle2: 'font6',\r\n      fontStyle3: 'font6',\r\n      fontSize: 'x',\r\n      fontSize2: 't',\r\n      fontSize3: 't',\r\n      fontColour: '0',\r\n      fontColour2: '68',\r\n      fontColour3: '66',\r\n      borderColour: '#2C262E',\r\n      borderColour2: '#211E4E',\r\n      borderColour3: '#EBD406',\r\n      glitterBorder: true,\r\n      dropShadow: true,\r\n      glossy: false,\r\n      lighting: false,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate a Minecraft-style image using text and optional styles.\r\n   * @param input - Required text and optional style overrides.\r\n   * @returns Promise<string> - Direct URL to the generated image.\r\n   */\r\n  async generateImage(input: TextCraftInput): Promise<string> {\r\n    const validated = TextCraftInputSchema.parse({\r\n      ...this.defaultStyle,\r\n      ...input,\r\n    });\r\n\r\n    const {\r\n      text,\r\n      text2 = '',\r\n      text3 = '',\r\n      fontStyle,\r\n      fontStyle2,\r\n      fontStyle3,\r\n      fontSize,\r\n      fontSize2,\r\n      fontSize3,\r\n      fontColour,\r\n      fontColour2,\r\n      fontColour3,\r\n      borderColour,\r\n      borderColour2,\r\n      borderColour3,\r\n      dropShadow,\r\n      glossy,\r\n      lighting,\r\n      glitterBorder,\r\n    } = validated;\r\n\r\n    const params = new URLSearchParams({\r\n      text,\r\n      text2,\r\n      text3,\r\n      font_style: fontStyle || 'font1',\r\n      font_style2: fontStyle2 || 'font6',\r\n      font_style3: fontStyle3 || 'font6',\r\n      font_size: fontSize || 'x',\r\n      font_size2: fontSize2 || 't',\r\n      font_size3: fontSize3 || 't',\r\n      font_colour: fontColour || '0',\r\n      font_colour2: fontColour2 || '68',\r\n      font_colour3: fontColour3 || '66',\r\n      border_colour: borderColour || '#2C262E',\r\n      border_colour2: borderColour2 || '#211E4E',\r\n      border_colour3: borderColour3 || '#EBD406',\r\n      text_border: '1',\r\n      text_border2: '1',\r\n      text_border3: '1',\r\n      glow_halo: '0',\r\n      non_trans: 'false',\r\n      fit_lines: '0',\r\n      truecolour_images: '0',\r\n      anim_type: 'none',\r\n      multiline: '3',\r\n      submit_type: 'text',\r\n      savedb: '0',\r\n      bgcolour: '#2C262E',\r\n      drop_shadow: dropShadow ? '1' : '0',\r\n      glossy: glossy ? '1' : '0',\r\n      lighting: lighting ? '1' : '0',\r\n      glitter_border: glitterBorder ? 'true' : 'false',\r\n      perspective_effect: '1',\r\n    });\r\n\r\n    const fullUrl = `${this.endpoint}?${params.toString()}`;\r\n\r\n    try {\r\n      const response: AxiosResponse<string> = await axios.get(fullUrl, {\r\n        headers: {\r\n          'User-Agent': 'Mozilla/5.0',\r\n          Accept: 'application/xml,text/html;q=0.9,*/*;q=0.8',\r\n          Referer: 'https://textcraft.net/',\r\n          'Cache-Control': 'no-cache',\r\n        },\r\n        timeout: 10000,\r\n      });\r\n\r\n      const parsed = await parseStringPromise(response.data);\r\n      const filename = parsed?.image?.fullfilename?.[0];\r\n      const datadir = parsed?.image?.datadir?.[0];\r\n\r\n      if (!filename || !datadir) throw new InvalidTextCraftResponseError();\r\n\r\n      return `https://static1.textcraft.net/${datadir}/${filename}`;\r\n    } catch (err) {\r\n      if (axios.isAxiosError(err)) {\r\n        throw new Error(`Network error: ${err.message}`);\r\n      }\r\n      if (err instanceof z.ZodError) {\r\n        throw new Error(\r\n          `Validation error: ${err.issues.map((e) => e.message).join(', ')}`\r\n        );\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @module TMateClient\r\n * @description\r\n * A scraper-based client for interacting with the https://tmate.cc TikTok download service.\r\n * It simulates browser-like behavior to extract direct download links for MP4 (no watermark),\r\n * MP3 audio, or image slideshows using HTTP cookies, CSRF token handling, and HTML parsing.\r\n */\r\n\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Structure of the token and cookie required for posting TikTok URLs.\r\n */\r\ninterface TokenCookie {\r\n  token: string;\r\n  cookie: string;\r\n}\r\n\r\n/**\r\n * Common download link shape returned from parsed HTML anchors.\r\n */\r\nexport interface DownloadLink {\r\n  href: string;\r\n  label: string;\r\n}\r\n\r\n/**\r\n * Result structure if a video is found.\r\n */\r\nexport interface VideoResult {\r\n  type: 'video';\r\n  title: string;\r\n  mp4Links: DownloadLink[];\r\n  mp3Link?: DownloadLink;\r\n}\r\n\r\n/**\r\n * Result structure if images are found (image slides / carousel).\r\n */\r\nexport interface ImageResult {\r\n  type: 'image';\r\n  title: string;\r\n  images: string[];\r\n  mp3Link?: DownloadLink;\r\n}\r\n\r\nexport type TikTokResult = VideoResult | ImageResult;\r\n\r\n/**\r\n * Retry options for failed requests.\r\n*/\r\nexport interface RetryOptions {\r\n  retries?: number;\r\n  delayMs?: number;\r\n}\r\n\r\n/**\r\n * Internal utility to fetch CSRF token and session cookies from tmate.cc.\r\n * Simulates a browser request to `/id`.\r\n */\r\nasync function getTokenAndCookie(): Promise<TokenCookie> {\r\n  const res: AxiosResponse<string> = await axios.get('https://tmate.cc/id', {\r\n    headers: {\r\n      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'\r\n    }\r\n  });\r\n\r\n  const cookie = res.headers['set-cookie']\r\n    ?.map((c) => c.split(';')[0])\r\n    .join('; ') || '';\r\n\r\n  const tokenMatch = res.data.match(/<input[^>]+name=\"token\"[^>]+value=\"([^\"]+)\"/i);\r\n  const token = tokenMatch?.[1];\r\n\r\n  if (!token) throw new Error('Token tidak ditemukan (token ga ada)');\r\n\r\n  return { token, cookie };\r\n}\r\n\r\n/**\r\n * Downloads TikTok content via tmate.cc by submitting a URL and scraping response data.\r\n *\r\n * @param tiktokUrl - Full TikTok video or image post URL.\r\n * @param retryOptions - Retry options for failed requests (default: { retries: 3, delayMs: 1000 }).\r\n * @returns TikTokResult object containing video, image, or audio links.\r\n * @throws Error if token, HTML content, or links are missing or invalid.\r\n */\r\nexport async function downloadTikTok(\r\n  tiktokUrl: string,\r\n  retryOptions: RetryOptions = {}\r\n): Promise<TikTokResult> {\r\n  const maxRetries = retryOptions.retries ?? 3;\r\n  const delayMs = retryOptions.delayMs ?? 1000;\r\n\r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      const { token, cookie } = await getTokenAndCookie();\r\n\r\n      const params = new URLSearchParams();\r\n      params.append('url', tiktokUrl);\r\n      params.append('token', token);\r\n\r\n      const res = await axios.post('https://tmate.cc/action', params.toString(), {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'User-Agent': 'Mozilla/5.0',\r\n          'Referer': 'https://tmate.cc/id',\r\n          'Origin': 'https://tmate.cc',\r\n          'Cookie': cookie\r\n        }\r\n      });\r\n\r\n      const html = res.data?.data;\r\n      if (!html) throw new Error('HTML kosong dari tmate');\r\n\r\n      const titleMatch = html.match(/<h1[^>]*>(.*?)<\\/h1>/i);\r\n      const title = titleMatch?.[1]?.replace(/<[^>]+>/g, '').trim() || 'Tanpa Judul';\r\n\r\n      const matches = [\r\n        ...html.matchAll(\r\n          /<a[^>]+href=\"(https:\\/\\/[^\"]+)\"[^>]*>\\s*<span>\\s*<span>([^<]*)<\\/span><\\/span><\\/a>/gi\r\n        )\r\n      ];\r\n\r\n      const seen = new Set<string>();\r\n      const links: DownloadLink[] = matches\r\n        .map(([_, href, label]) => ({ href, label: label.trim() }))\r\n        .filter(({ href }) => !href.includes('play.google.com') && !seen.has(href) && seen.add(href));\r\n\r\n      const mp4Links = links.filter((v) => /download without watermark/i.test(v.label));\r\n      const mp3Link = links.find((v) => /download mp3 audio/i.test(v.label));\r\n\r\n      if (mp4Links.length > 0) {\r\n        return {\r\n          type: 'video',\r\n          title,\r\n          mp4Links,\r\n          mp3Link\r\n        };\r\n      }\r\n\r\n      const imageMatches = [\r\n        ...html.matchAll(/<img[^>]+src=\"(https:\\/\\/tikcdn\\.app\\/a\\/images\\/[^\"]+)\"/gi)\r\n      ];\r\n      const imageLinks = [...new Set(imageMatches.map((m) => m[1]))];\r\n\r\n      if (imageLinks.length > 0) {\r\n        return {\r\n          type: 'image',\r\n          title,\r\n          images: imageLinks,\r\n          mp3Link\r\n        };\r\n      }\r\n\r\n      throw new Error('tidak ada konten yang valid di halaman');\r\n\r\n    } catch (err) {\r\n      const isLastAttempt = attempt === maxRetries;\r\n      const error = err as AxiosError;\r\n      if (isLastAttempt) {\r\n        throw new Error(\r\n          `Gagal download setelah ${maxRetries} percobaan: ${error.message}`\r\n        );\r\n      }\r\n      console.warn(`Percobaan ${attempt} gagal: ${error.message} — retrying...`);\r\n      await new Promise((res) => setTimeout(res, delayMs * attempt)); // simple backoff\r\n    }\r\n  }\r\n\r\n  throw new Error('Unreachable: semua percobaan gagal');\r\n}\r\n","import axios from 'axios';\r\nimport { EventSource } from 'eventsource';\r\nimport { generateSessionHash } from './session.js';\r\n\r\n/**\r\n * Interface representing the expected structure of the payload\r\n * sent to the Gradio queue endpoint.\r\n */\r\nexport interface ChatPayload {\r\n  data: [string, unknown[], boolean]; // [question, chat history, web search flag]\r\n  event_data: null;\r\n  fn_index: number;\r\n  session_hash: string;\r\n}\r\n\r\n/**\r\n * Represents the shape of a streamed message returned by Gradio’s EventSource.\r\n * Specifically for the DeepSeek chatbot's `process_completed` response format.\r\n */\r\nexport interface GradioStreamMessage {\r\n  msg: 'process_completed' | string;\r\n  output?: GradioChatOutput;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Represents the detailed structure of the `output` object returned by DeepSeek.\r\n */\r\nexport interface GradioChatOutput {\r\n  /**\r\n   * The actual chat result, typically an array containing:\r\n   *   [ [ [inputText, responseText] ], \"\" ]\r\n   */\r\n  data: [[[input: string, response: string]], string];\r\n  is_generating: boolean;\r\n  duration: number;\r\n  average_duration: number;\r\n  render_config: any;\r\n  changed_state_ids: string[];\r\n}\r\n\r\n/**\r\n * Sends a user question to a remote AI model hosted via Gradio on Hugging Face,\r\n * and listens for the final generated response using Server-Sent Events (SSE).\r\n *\r\n * This function handles:\r\n * - Constructing the correct Gradio payload\r\n * - Managing session identification\r\n * - Establishing a streaming connection for the response\r\n * - Resolving or rejecting based on the backend state\r\n *\r\n * @param question - The user's prompt or message to send to the AI.\r\n * @param useWebSearch - Optional flag (default `false`) to enable enhanced web search in the AI model.\r\n * @returns A promise that resolves with the AI-generated response once processing completes.\r\n * @throws An error if the HTTP request fails or if the event stream encounters an issue.\r\n */\r\nexport async function DeepseekR1(\r\n  question: string,\r\n  useWebSearch: boolean = false\r\n): Promise<GradioChatOutput> {\r\n  // Generate a unique session identifier for this request lifecycle\r\n  const sessionHash = generateSessionHash();\r\n\r\n  // Construct the request payload to be sent to the Gradio server\r\n  const payload: ChatPayload = {\r\n    data: [question, [], useWebSearch],\r\n    event_data: null,\r\n    fn_index: 2, // Based on Gradio function indexing\r\n    session_hash: sessionHash,\r\n  };\r\n\r\n  try {\r\n    // Initiate the queue by registering the session\r\n    await axios.post(\r\n      'https://ginigen-deepseek-r1-0528-api.hf.space/gradio_api/queue/join',\r\n      payload,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n\r\n    // Wait for Gradio to respond via real-time event streaming\r\n    return new Promise((resolve, reject) => {\r\n      const es = new EventSource(\r\n        `https://ginigen-deepseek-r1-0528-api.hf.space/gradio_api/queue/data?session_hash=${sessionHash}`\r\n      );\r\n\r\n      es.onmessage = (event: MessageEvent) => {\r\n        try {\r\n          const data: GradioStreamMessage = JSON.parse(event.data);\r\n\r\n          // When processing completes, return the final output\r\n          if (data.msg === 'process_completed') {\r\n            es.close();\r\n            resolve(data.output as GradioChatOutput);\r\n          }\r\n        } catch (error: any) {\r\n          es.close();\r\n          reject(\r\n            new Error(`Failed to parse server response: ${error.message}`)\r\n          );\r\n        }\r\n      };\r\n\r\n      es.onerror = () => {\r\n        es.close();\r\n        reject(new Error('Connection to event stream failed.'));\r\n      };\r\n    });\r\n  } catch (error: any) {\r\n    throw new Error(`Request failed: ${error.message}`);\r\n  }\r\n}\r\n","/**\r\n * Generates a pseudo-random session identifier using\r\n * a base-36 encoded string for uniqueness across user sessions.\r\n *\r\n * This session hash is used to tie requests and event streams together.\r\n *\r\n * @returns A unique alphanumeric session ID string.\r\n */\r\nexport function generateSessionHash(): string {\r\n  return Math.random().toString(36).substring(2);\r\n}\r\n","import axios from 'axios';\r\nimport { EventSource } from 'eventsource';\r\n\r\n/**\r\n * Options used to describe the logo prompt.\r\n */\r\nexport interface LogoRequestOptions {\r\n  style: string;\r\n  color: string;\r\n  concept: string;\r\n  text: string;\r\n  background: string;\r\n}\r\n\r\n/**\r\n * Represents the full response returned when logo generation completes successfully.\r\n */\r\nexport interface FantaxyCompletedResponse {\r\n  msg: 'process_completed';\r\n  event_id: string;\r\n  output: FantaxyOutput;\r\n  success: boolean;\r\n  title: string | null;\r\n}\r\n\r\n/**\r\n * The `output` field containing the generated logo data and metadata.\r\n */\r\nexport interface FantaxyOutput {\r\n  data: [LogoFileData, number];\r\n  is_generating: boolean;\r\n  duration: number;\r\n  average_duration: number;\r\n  render_config: any;\r\n  changed_state_ids: string[];\r\n}\r\n\r\n/**\r\n * The logo file metadata returned by Gradio.\r\n */\r\nexport interface LogoFileData {\r\n  path: string;\r\n  url: string;\r\n  size: number | null;\r\n  orig_name: string;\r\n  mime_type: string | null;\r\n  is_stream: boolean;\r\n  meta: {\r\n    _type: 'gradio.FileData';\r\n  };\r\n}\r\n\r\n/**\r\n * Initiates a logo generation request by formatting the textual prompt\r\n * and registering the job with the Fantaxy Gradio queue.\r\n *\r\n * @param options - Description fields used to customize the logo\r\n * @returns An object containing the session hash for tracking\r\n */\r\nexport async function requestLogo(options: LogoRequestOptions): Promise<{ session_hash: string; }> {\r\n  const session_hash = Math.random().toString(36).slice(2);\r\n\r\n  const prompt = `[Style: ${options.style}] [Color: ${options.color}] [Concept: ${options.concept}] [Text: '${options.text}'] [Background: ${options.background}]`;\r\n\r\n  const payload = {\r\n    data: [prompt, 0, true, 512, 512, 4],\r\n    event_data: null,\r\n    fn_index: 2,\r\n    trigger_id: 7,\r\n    session_hash\r\n  };\r\n\r\n  const headers = {\r\n    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Mobile Safari/537.36',\r\n    'Content-Type': 'application/json',\r\n    'sec-ch-ua-platform': '\"Android\"',\r\n    'sec-ch-ua': '\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"',\r\n    'dnt': '1',\r\n    'sec-ch-ua-mobile': '?1',\r\n    'origin': 'https://fantaxy-ofai-flx-logo.hf.space',\r\n    'sec-fetch-site': 'same-origin',\r\n    'sec-fetch-mode': 'cors',\r\n    'sec-fetch-dest': 'empty',\r\n    'referer': 'https://fantaxy-ofai-flx-logo.hf.space/',\r\n    'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n    'priority': 'u=1, i'\r\n  };\r\n\r\n  await axios.post(\r\n    'https://fantaxy-ofai-flx-logo.hf.space/gradio_api/queue/join?__theme=system',\r\n    payload,\r\n    { headers }\r\n  );\r\n\r\n  return { session_hash };\r\n}\r\n\r\n/**\r\n * Subscribes to the Gradio event stream and waits for the process to complete.\r\n *\r\n * @param sessionHash - The session hash from the original request\r\n * @returns Full event response including output URL\r\n */\r\nexport async function waitForLogo(sessionHash: string): Promise<any> {\r\n  return new Promise((resolve, reject) => {\r\n    const stream = new EventSource(`https://fantaxy-ofai-flx-logo.hf.space/gradio_api/queue/data?session_hash=${sessionHash}`);\r\n\r\n    stream.onmessage = (event) => {\r\n      try {\r\n        const data = JSON.parse(event.data);\r\n\r\n        if (data.msg === 'process_completed') {\r\n          stream.close();\r\n          resolve(data);\r\n        } else if (data.msg === 'error') {\r\n          stream.close();\r\n          reject(new Error('Fantaxy returned an error response.'));\r\n        } else {\r\n          console.log('Intermediate event:', data.msg);\r\n        }\r\n      } catch (e) {\r\n        stream.close();\r\n        reject(new Error('Failed to parse event stream data.'));\r\n      }\r\n    };\r\n\r\n    stream.onerror = () => {\r\n      stream.close();\r\n      reject(new Error('EventSource connection failed.'));\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Main entry point to generate a logo in a single call.\r\n * Combines the prompt generation and streaming response into one flow.\r\n *\r\n * @param options - Logo prompt description\r\n * @returns Final response payload containing the generated asset URL\r\n */\r\nexport async function generateLogo(options: LogoRequestOptions): Promise<FantaxyCompletedResponse> {\r\n  try {\r\n    const { session_hash } = await requestLogo(options);\r\n    const result = await waitForLogo(session_hash);\r\n    return result;\r\n  } catch (err) {\r\n    throw new Error(`Fantaxy logo generation failed: ${(err as Error).message}`);\r\n  }\r\n}\r\n","// src/services/ihancer.ts\r\n\r\nimport axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n/**\r\n * Options for image enhancement.\r\n */\r\nexport interface EnhanceImageOptions {\r\n  /**\r\n   * Image input buffer or file path.\r\n   */\r\n  image: Buffer | string;\r\n\r\n  /**\r\n   * Optional flag to save the enhanced image locally.\r\n   */\r\n  saveToFile?: boolean;\r\n\r\n  /**\r\n   * Optional output directory if saving to file.\r\n   */\r\n  outputDir?: string;\r\n}\r\n\r\n/**\r\n * Sends an image to ihancer.com for enhancement and returns the enhanced image as a Buffer.\r\n *\r\n * @param options - EnhanceImageOptions with image buffer or path, and save flags\r\n * @returns Buffer of the enhanced image\r\n */\r\nexport async function enhanceImage(options: EnhanceImageOptions): Promise<Buffer> {\r\n  const { image, saveToFile = false, outputDir = './tmp' } = options;\r\n\r\n  let imageBuffer: Buffer;\r\n\r\n  if (Buffer.isBuffer(image)) {\r\n    imageBuffer = image;\r\n  } else if (typeof image === 'string' && fs.existsSync(image)) {\r\n    imageBuffer = fs.readFileSync(image);\r\n  } else {\r\n    throw new Error('❌ Invalid image input: must be a Buffer or valid file path.');\r\n  }\r\n\r\n  const form = new FormData();\r\n  form.append('method', '1');\r\n  form.append('is_pro_version', 'false');\r\n  form.append('is_enhancing_more', 'false');\r\n  form.append('max_image_size', 'low');\r\n  form.append('file', imageBuffer, {\r\n    filename: 'input.jpg',\r\n    contentType: 'image/jpeg',\r\n  });\r\n\r\n  const response = await axios.post('https://ihancer.com/api/enhance', form, {\r\n    headers: {\r\n      ...form.getHeaders(),\r\n      'accept': '*/*',\r\n      'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n      'sec-ch-ua': '\"Not-A.Brand\";v=\"99\", \"Chromium\";v=\"124\"',\r\n      'sec-ch-ua-mobile': '?1',\r\n      'sec-ch-ua-platform': '\"Android\"',\r\n      'sec-fetch-dest': 'empty',\r\n      'sec-fetch-mode': 'cors',\r\n      'sec-fetch-site': 'same-origin',\r\n      'referer': 'https://ihancer.com/app/',\r\n    },\r\n    responseType: 'arraybuffer',\r\n  });\r\n\r\n  const outputBuffer = Buffer.from(response.data);\r\n\r\n  if (saveToFile) {\r\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n    const filePath = path.join(outputDir, `ihanced-${timestamp}.jpg`);\r\n    fs.writeFileSync(filePath, outputBuffer);\r\n    console.log(`✅ Saved enhanced image to: ${filePath}`);\r\n  }\r\n\r\n  return outputBuffer;\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Supported content categories on MCPEDL.\r\n */\r\nexport type McpedlCategory = 'downloading' | 'mods' | 'maps' | 'textures' | 'shaders';\r\n\r\n/**\r\n * Represents a single post (mod, map, etc.) scraped from MCPEDL.\r\n */\r\nexport interface McpedlEntry {\r\n  title: string;\r\n  link: string;\r\n}\r\n\r\n\r\n/**\r\n * Map user-friendly category keys to actual URL slugs on mcpedl.org.\r\n */\r\nexport const categoryMap: Record<McpedlCategory, string> = {\r\n  downloading: 'downloading',\r\n  mods: 'mods-minecraft-pe',\r\n  maps: 'maps-minecraft-pe',\r\n  textures: 'textures-minecraft-pe',\r\n  shaders: 'textures-minecraft-pe/shaders'\r\n};\r\n\r\n/**\r\n * Search a list of article titles and links from MCPEDL.org for a given category and page.\r\n *\r\n * @param category - The content category (mods, maps, textures, etc.)\r\n * @param page - The page number to scrape (starting from 1)\r\n * @returns A list of articles with titles and URLs\r\n */\r\nexport async function McpedlSearch(category: McpedlCategory, page: number = 1): Promise<McpedlEntry[]> {\r\n  const categorySlug = categoryMap[category];\r\n  const url = `https://mcpedl.org/${categorySlug}/page/${page}/`;\r\n\r\n  try {\r\n    const response = await axios.get(url);\r\n    const $ = load(response.data);\r\n    const entries: McpedlEntry[] = [];\r\n\r\n    $('article.post').each((_, element) => {\r\n      const title = $(element).find('h2.entry-title a').text().trim();\r\n      const link = $(element).find('h2.entry-title a').attr('href') ?? '';\r\n\r\n      if (title && link) {\r\n        entries.push({ title, link });\r\n      }\r\n    });\r\n\r\n    return entries;\r\n  } catch (err: any) {\r\n    console.error(`❌ Error scraping MCPEDL: ${err.message}`);\r\n    return [];\r\n  }\r\n}\r\n","import axios, { AxiosInstance } from 'axios';\r\n\r\n/**\r\n * Basic anime metadata returned by most endpoints.\r\n */\r\nexport interface Anime {\r\n  id: string;\r\n  title: string;\r\n  image: string;\r\n  type: string;\r\n  status: string;\r\n  description?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Episode object associated with a specific anime.\r\n */\r\nexport interface Episode {\r\n  id: string;\r\n  number: number;\r\n  title?: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Server descriptor for streaming.\r\n */\r\nexport interface StreamServer {\r\n  serverName: string;\r\n  type: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Video stream metadata (sources, headers, etc.)\r\n */\r\nexport interface StreamResponse {\r\n  sources: {\r\n    url: string;\r\n    quality: string;\r\n    isM3U8: boolean;\r\n  }[];\r\n  headers?: Record<string, string>;\r\n  intro?: {\r\n    start: number;\r\n    end: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Animob API Client\r\n *\r\n * A class-based wrapper around unofficial HiAnime/AniWatch APIs, giving you access to:\r\n * - Homepage featured anime\r\n * - Search and filter by genre\r\n * - Retrieve full anime info and episodes\r\n * - Extract streaming links from server ID\r\n *\r\n * Example usage:\r\n * ```ts\r\n * const client = new Animob();\r\n * const popular = await client.home();\r\n * const naruto = await client.search('naruto');\r\n * const detail = await client.detail('naruto');\r\n * const stream = await client.episode('naruto-ep-1?ep=1', 'HD-1');\r\n * ```\r\n */\r\nexport class Animob {\r\n  private client: AxiosInstance;\r\n  private _client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: 'https://aniwatch-api-2-animob.vercel.app/api/v2',\r\n      headers: {\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2'\r\n      }\r\n    });\r\n\r\n    this._client = axios.create({\r\n      baseURL: 'https://animob-api-v4.vercel.app/api',\r\n      headers: {\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2'\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetches curated content from the homepage: trending, latest, popular, etc.\r\n   * @returns List of homepage anime blocks\r\n   */\r\n  async home(): Promise<Anime[]> {\r\n    const { data } = await this.client.get('/hianime/home');\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a paginated list of anime for a specific genre.\r\n   * @param genre - Genre slug (e.g. 'action', 'drama', 'fantasy')\r\n   * @param page - Page number for pagination\r\n   * @returns List of anime under the selected genre\r\n   * @throws Error if the genre is not supported\r\n   */\r\n  async genre(genre: string = 'action', page: number = 1): Promise<Anime[]> {\r\n    const allowedGenres = [\r\n      'action', 'adventure', 'cars', 'comedy', 'dementia', 'demons', 'drama', 'ecchi',\r\n      'fantasy', 'game', 'harem', 'historical', 'horror', 'isekai', 'josei', 'kids',\r\n      'magic', 'martial-arts', 'mecha', 'military', 'music', 'mystery', 'parody', 'police',\r\n      'psychological', 'romance', 'samurai', 'school', 'sci-fi', 'seinen', 'shoujo',\r\n      'shoujo-ai', 'shounen', 'shounen-ai', 'slice-of-life', 'space', 'sports',\r\n      'super-power', 'supernatural', 'thriller', 'vampire'\r\n    ];\r\n\r\n    if (!allowedGenres.includes(genre)) {\r\n      throw new Error(`Invalid genre. Allowed genres: ${allowedGenres.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get(`/hianime/genre/${genre}`, {\r\n      params: { page }\r\n    });\r\n\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Searches anime using a keyword.\r\n   * @param query - The title or keyword to search for\r\n   * @param page - Page number for pagination\r\n   * @returns List of matching anime\r\n   * @throws Error if no query is provided\r\n   */\r\n  async search(query: string, page: number = 1): Promise<Anime[]> {\r\n    if (!query) throw new Error('Query is required');\r\n\r\n    const { data } = await this.client.get('/hianime/search', {\r\n      params: { q: query, page }\r\n    });\r\n\r\n    return data.data;\r\n  }\r\n\r\n  /**\r\n   * Fetches full metadata for a specific anime, including all episodes.\r\n   * @param id - Anime slug ID (e.g. 'naruto')\r\n   * @returns Anime metadata object with attached episodes\r\n   * @throws Error if ID is not provided\r\n   */\r\n  async detail(id: string): Promise<Anime & { episodes: Episode[] }> {\r\n    if (!id) throw new Error('ID is required');\r\n\r\n    const { data } = await this.client.get(`/hianime/anime/${id}`);\r\n    const { data: ep } = await this.client.get(`/hianime/anime/${id}/episodes`);\r\n\r\n    return {\r\n      ...data.data.anime,\r\n      episodes: ep.data\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fetches streaming sources for a given episode ID and server name.\r\n   * @param episodeId - Full episode ID string (e.g. 'bleach-ep-1?ep=1')\r\n   * @param server - Server name (e.g. 'HD-1', 'HD-2', 'Auto')\r\n   * @returns StreamResponse with sources and headers\r\n   * @throws If episode ID is invalid or server does not exist\r\n   */\r\n  async episode(episodeId: string, server: string = 'HD-1'): Promise<StreamResponse> {\r\n    if (!episodeId || !episodeId.includes('?ep=')) {\r\n      throw new Error('Invalid episode ID. It must contain ?ep= query parameter.');\r\n    }\r\n\r\n    const { data: sv } = await this._client.get<{ results: StreamServer[] }>(\r\n      `/servers/${episodeId}`\r\n    );\r\n\r\n    const servers = sv.results.map(s => s.serverName);\r\n    if (!servers.includes(server)) {\r\n      throw new Error(`Server not available. Available servers: ${servers.join(', ')}`);\r\n    }\r\n\r\n    const selected = sv.results.find(s => s.serverName === server);\r\n    if (!selected) throw new Error('Server type resolution failed.');\r\n\r\n    const { data } = await this._client.get<{ results: StreamResponse }>('/stream', {\r\n      params: {\r\n        id: episodeId,\r\n        server,\r\n        type: selected.type\r\n      }\r\n    });\r\n\r\n    return data.results;\r\n  }\r\n}\r\n\r\n/**\r\n * Singleton instance for quick use without manual instantiation.\r\n */\r\nexport const animob = new Animob();\r\n","import axios from 'axios';\r\nimport { JSDOM } from 'jsdom';\r\n\r\n/**\r\n * Source IDs used to fetch Mobile Legends news content.\r\n * These appear to represent different news feeds or categories.\r\n */\r\nconst SOURCE_IDS: number[] = [2672947, 2756566, 2756564];\r\n\r\n/**\r\n * Extracts plain text content from a given HTML string.\r\n *\r\n * @param html - Raw HTML content\r\n * @returns Cleaned text content\r\n */\r\nfunction extractText(html: string = ''): string {\r\n  const dom = new JSDOM(`<body>${html}</body>`);\r\n  return dom.window.document.body.textContent?.trim() || '';\r\n}\r\n\r\n/**\r\n * Attempts to extract the first image URL from the HTML body.\r\n *\r\n * @param html - HTML body string\r\n * @returns Image URL string or null\r\n */\r\nfunction extractThumbnail(html: string = ''): string | null {\r\n  const dom = new JSDOM(`<body>${html}</body>`);\r\n  const img = dom.window.document.querySelector('img');\r\n  return img?.getAttribute('src') || null;\r\n}\r\n\r\n/**\r\n * Represents a news article item extracted from the API.\r\n */\r\nexport interface MobileLegendsNewsItem {\r\n  title: string;\r\n  author: string | null;\r\n  avatar: string | null;\r\n  thumbnail: string | null;\r\n  date: string;\r\n  caption: string;\r\n  link: string;\r\n}\r\n\r\n/**\r\n * Fetches and parses news articles from a specific Moonton source ID.\r\n *\r\n * @param sourceId - Source feed identifier from Moonton\r\n * @returns List of parsed and structured news items\r\n */\r\nexport async function fetchNews(sourceId: number): Promise<MobileLegendsNewsItem[]> {\r\n  try {\r\n    const response = await axios.post(\r\n      `https://api.gms.moontontech.com/api/gms/source/2669606/${sourceId}`,\r\n      {\r\n        pageIndex: 1,\r\n        pageSize: 50,\r\n        filters: [],\r\n        sorts: [],\r\n        object: [2667533],\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'x-appid': '2669606',\r\n          'x-actid': '2669607',\r\n          'x-lang': 'id',\r\n          'origin': 'https://www.mobilelegends.com',\r\n          'referer': 'https://www.mobilelegends.com/',\r\n        },\r\n      }\r\n    );\r\n\r\n    const records = response.data?.data?.records ?? [];\r\n\r\n    return records.map((record: any): MobileLegendsNewsItem => {\r\n      const d = record.data;\r\n      const body = d.body || '';\r\n      const image = extractThumbnail(body) || d.cover || d.image || null;\r\n\r\n      return {\r\n        title: extractText(d.title || 'No Title'),\r\n        author: d.author?.name || null,\r\n        avatar: d.author?.avatar || null,\r\n        thumbnail: image,\r\n        date: new Date(d.start_time).toISOString(),\r\n        caption: extractText(body),\r\n        link: `https://www.mobilelegends.com/news/articleldetail?newsid=${record.id}`,\r\n      };\r\n    });\r\n  } catch (err: any) {\r\n    console.error(`❌ Failed to fetch from source ${sourceId}:`, err.message);\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Fetches and combines news from all known Mobile Legends news sources.\r\n *\r\n * @returns News response object with metadata and article list\r\n */\r\nexport async function MobileLegendsNewsInfo(): Promise<{\r\n  status: boolean;\r\n  total: number;\r\n  result: MobileLegendsNewsItem[];\r\n}> {\r\n  const results = await Promise.all(SOURCE_IDS.map(fetchNews));\r\n  const merged = results.flat();\r\n\r\n  return {\r\n    status: true,\r\n    total: merged.length,\r\n    result: merged,\r\n  };\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * The actual email record returned after creation.\r\n */\r\nexport interface TempMailCreateData {\r\n  email: string;\r\n  email_token: string;\r\n  deleted_in: string;\r\n}\r\n\r\n/**\r\n * The `result` structure in create() response.\r\n */\r\nexport interface TempMailCreateResult {\r\n  status: 'success' | 'error';\r\n  data: TempMailCreateData;\r\n}\r\n\r\n\r\n/**\r\n * Response type returned from the Tempail API for both endpoints.\r\n */\r\nexport interface TempMailResponse<T> {\r\n  success: boolean;\r\n  code: number;\r\n  result: T;\r\n}\r\n/**\r\n * Raw email message shape returned by the inbox endpoint.\r\n */\r\nexport interface TempMailMessage {\r\n  from: string;\r\n  subject: string;\r\n  body: string;\r\n  date: string;\r\n  id: string;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Tempail Temporary Email SDK\r\n * Provides access to temp email creation and inbox message reading\r\n * via the unofficial API: https://tempail.top\r\n */\r\nexport class TempMail {\r\n  private static baseHeaders = {\r\n    'User-Agent': 'Dalvik/2.1.0 (Linux; Android 15)',\r\n    'Connection': 'Keep-Alive',\r\n    'Accept-Encoding': 'gzip',\r\n  };\r\n\r\n  /**\r\n   * Generates a new temporary email address.\r\n   *\r\n   * @returns {Promise<TempMailResponse>} An object with a generated email address and token.\r\n   * @throws On HTTP or parsing errors.\r\n   */\r\n  public static async create():  Promise<TempMailResponse<TempMailCreateResult>> {\r\n    try {\r\n      const response = await axios.post(\r\n        'https://tempail.top/api/email/create/ApiTempail',\r\n        null,\r\n        {\r\n          headers: {\r\n            ...this.baseHeaders,\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n            'Content-Length': '0',\r\n          },\r\n        }\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: response.data,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('❌ Error creating tempmail:', error.message);\r\n      throw new Error('Failed to create temporary email address.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetches inbox messages for a specific temp email token.\r\n   *\r\n   * @param token - Unique token tied to the generated email address\r\n   * @returns {Promise<TempMailResponse<TempMailMessage[]>>} List of inbox messages\r\n   * @throws If token is invalid or request fails\r\n   */\r\n  public static async checkInbox(token: string): Promise<TempMailResponse<TempMailMessage[]>> {\r\n    if (!token || typeof token !== 'string') {\r\n      throw new Error('Invalid or missing token for inbox check.');\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `https://tempail.top/api/messages/${token}/ApiTempail`,\r\n        { headers: this.baseHeaders }\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: response.data,\r\n      };\r\n    } catch (error: any) {\r\n      console.error('❌ Error checking inbox:', error.message);\r\n      throw new Error('Failed to fetch inbox messages. Verify your token.');\r\n    }\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * Generates a random alphanumeric client ID for the request header.\r\n * Mimics client fingerprinting from browser.\r\n */\r\nfunction generateClientId(length: number = 40): string {\r\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n  return Array.from({ length }, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');\r\n}\r\n\r\n/**\r\n * Sends a prompt to MagicStudio's AI art generator and uploads the result to Catbox.\r\n * \r\n * @param prompt - Description of the image you want MagicStudio to generate\r\n * @returns A URL pointing to the uploaded image on catbox.moe\r\n */\r\nexport async function MagicStudioArt(prompt: string): Promise<string> {\r\n  const anonymousUserId = uuidv4();\r\n  const requestTimestamp = (Date.now() / 1000).toFixed(3);\r\n  const clientId = generateClientId();\r\n  const tempPath = path.join(__dirname, `magic_${Date.now()}.jpg`);\r\n\r\n  const formData = new FormData();\r\n  formData.append('prompt', prompt);\r\n  formData.append('output_format', 'bytes');\r\n  formData.append('user_profile_id', 'null');\r\n  formData.append('anonymous_user_id', anonymousUserId);\r\n  formData.append('request_timestamp', requestTimestamp);\r\n  formData.append('user_is_subscribed', 'false');\r\n  formData.append('client_id', clientId);\r\n\r\n  try {\r\n    // Generate AI image\r\n    const response = await axios.post('https://ai-api.magicstudio.com/api/ai-art-generator', formData, {\r\n      headers: {\r\n        ...formData.getHeaders(),\r\n        'User-Agent': 'Mozilla/5.0 (Linux; Android 10)',\r\n        'Accept': 'application/json, text/plain, */*',\r\n        'origin': 'https://magicstudio.com',\r\n        'referer': 'https://magicstudio.com/ai-art-generator/',\r\n        'sec-ch-ua': '\"Chromium\";v=\"118\", \"Google Chrome\";v=\"118\", \"Not=A?Brand\";v=\"99\"',\r\n        'sec-ch-ua-mobile': '?1',\r\n        'sec-ch-ua-platform': '\"Android\"',\r\n        'sec-fetch-site': 'same-site',\r\n        'sec-fetch-mode': 'cors',\r\n        'sec-fetch-dest': 'empty',\r\n        'accept-language': 'en-US,en;q=0.9',\r\n      },\r\n      responseType: 'arraybuffer',\r\n    });\r\n\r\n    // Save temporary image\r\n    fs.writeFileSync(tempPath, response.data);\r\n\r\n    // Upload to Catbox\r\n    const uploadForm = new FormData();\r\n    uploadForm.append('reqtype', 'fileupload');\r\n    uploadForm.append('fileToUpload', fs.createReadStream(tempPath));\r\n\r\n    const uploadResponse = await axios.post('https://catbox.moe/user/api.php', uploadForm, {\r\n      headers: uploadForm.getHeaders(),\r\n    });\r\n\r\n    fs.unlinkSync(tempPath);\r\n    return uploadResponse.data; // URL string\r\n  } catch (error: any) {\r\n    console.error('❌ Failed to generate or upload image:', error.message);\r\n    return 'Failed to generate or upload image.';\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\n/**\r\n * Video/audio representation extracted from DASH manifest.\r\n */\r\nexport interface MediaTrack {\r\n  url: string;\r\n  bandwidth: number;\r\n  codecs: string;\r\n  mimeType: string;\r\n  resolution?: string;\r\n  qualityLabel?: string;\r\n}\r\n\r\n/**\r\n * Instagram video metadata object.\r\n */\r\nexport interface InstagramMedia {\r\n  code: string;\r\n  id: string;\r\n  title: string;\r\n  profile: {\r\n    username: string;\r\n    full_name: string;\r\n    profile_pic_url: string;\r\n  };\r\n  thumbnails: {\r\n    url: string;\r\n    width: number;\r\n    height: number;\r\n  }[];\r\n  videoTracks: MediaTrack[];\r\n  audioTracks: MediaTrack[];\r\n}\r\n\r\n/**\r\n * Extracts Instagram reel video + audio stream URLs and metadata.\r\n *\r\n * @param url Instagram reel/post URL\r\n * @returns Structured InstagramMedia object\r\n */\r\nexport async function instagram(url: string): Promise<InstagramMedia> {\r\n  if (!url) throw new Error('Missing URL');\r\n\r\n  const response = await axios.get(url, {\r\n    headers: {\r\n      'User-Agent': 'Mozilla/5.0 (Linux; Android 10)',\r\n      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*',\r\n      'cache-control': 'max-age=0',\r\n      'viewport-width': '980',\r\n      'sec-ch-ua': '\"Chromium\";v=\"136\", \"Not.A/Brand\";v=\"99\"',\r\n      'sec-ch-ua-mobile': '?1',\r\n      'sec-ch-ua-platform': '\"Android\"',\r\n      'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8',\r\n    },\r\n    timeout: 10000,\r\n  });\r\n\r\n  const $ = load(response.data);\r\n  let scriptJson: any = null;\r\n\r\n  $('script[type=\"application/json\"]').each((_, el) => {\r\n    const content = $(el).html();\r\n    if (content?.includes('xdt_api__v1__media__shortcode__web_info')) {\r\n      try {\r\n        scriptJson = JSON.parse(content);\r\n      } catch (e) {\r\n        throw new Error('Failed to parse embedded JSON script');\r\n      }\r\n    }\r\n  });\r\n\r\n  const item = scriptJson?.require?.[0]?.[3]?.[0]?.__bbox?.require?.[0]?.[3]?.[1]?.__bbox?.result?.data?.xdt_api__v1__media__shortcode__web_info?.items?.[0];\r\n  if (!item) throw new Error('Reel data not found. Is this a valid reel/post URL?');\r\n\r\n  const dashXml = item.video_dash_manifest;\r\n  if (!dashXml) throw new Error('No DASH manifest found');\r\n\r\n  const parser = new XMLParser({ ignoreAttributes: false });\r\n  const manifest = parser.parse(dashXml);\r\n  const period = manifest?.MPD?.Period;\r\n  const adaptationSets = Array.isArray(period.AdaptationSet) ? period.AdaptationSet : [period.AdaptationSet];\r\n\r\n  const videoTracks: MediaTrack[] = [];\r\n  const audioTracks: MediaTrack[] = [];\r\n\r\n  adaptationSets.forEach((set: any) => {\r\n    const isVideo = set['@_contentType'] === 'video';\r\n    const isAudio = set['@_contentType'] === 'audio';\r\n    const reps = Array.isArray(set.Representation) ? set.Representation : [set.Representation];\r\n\r\n    reps.forEach((rep: any) => {\r\n      const baseURL = rep.BaseURL;\r\n      const bandwidth = parseInt(rep['@_bandwidth']) || 0;\r\n      const track: MediaTrack = {\r\n        url: baseURL,\r\n        bandwidth,\r\n        codecs: rep['@_codecs'],\r\n        mimeType: rep['@_mimeType'],\r\n      };\r\n\r\n      if (isVideo) {\r\n        videoTracks.push({\r\n          ...track,\r\n          resolution: `${rep['@_width']}x${rep['@_height']}`,\r\n          qualityLabel: rep['@_FBQualityLabel'] || '',\r\n        });\r\n      } else if (isAudio) {\r\n        audioTracks.push(track);\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    code: item.code,\r\n    id: item.id,\r\n    title: item.caption?.text || '',\r\n    profile: {\r\n      username: item.user?.username || '',\r\n      full_name: item.user?.full_name || '',\r\n      profile_pic_url: item.user?.hd_profile_pic_url_info?.url || '',\r\n    },\r\n    thumbnails: (item.image_versions2?.candidates || []).map((img: any) => ({\r\n      url: img.url,\r\n      width: img.width,\r\n      height: img.height,\r\n    })),\r\n    videoTracks,\r\n    audioTracks,\r\n  };\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Structured reference object returned by AnimeFinder API.\r\n */\r\nexport interface AnimeReference {\r\n  site: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Structured result returned by AnimeFinder API.\r\n */\r\nexport interface AnimeFinderResult {\r\n  status: true;\r\n  image: string;\r\n  anime: string;\r\n  character: string;\r\n  genres: string;\r\n  premiere: string;\r\n  production: string;\r\n  description: string;\r\n  synopsis: string;\r\n  references: AnimeReference[];\r\n}\r\n\r\n/**\r\n * Fallback error result if identification fails.\r\n */\r\nexport interface AnimeFinderError {\r\n  status: false;\r\n  message: string;\r\n  error: any;\r\n}\r\n\r\n/**\r\n * Structured result returned by AnimeFinder API.\r\n */\r\nexport type AnimeFinderResponse = AnimeFinderResult | AnimeFinderError;\r\n\r\n/**\r\n * Identifies an anime by analyzing an image URL using AnimeFinder API.\r\n *\r\n * @param imageUrl - The public URL of the image (JPG/PNG)\r\n * @returns Structured anime info or error response\r\n */\r\nexport async function AnimeFinder(\r\n  imageUrl: string\r\n): Promise<AnimeFinderResponse> {\r\n  if (!imageUrl) {\r\n    return {\r\n      status: false,\r\n      message: 'Image URL cannot be empty.',\r\n      error: 'Missing imageUrl',\r\n    };\r\n  }\r\n\r\n  try {\r\n    const imageBuffer = (\r\n      await axios.get(imageUrl, {\r\n        responseType: 'arraybuffer',\r\n      })\r\n    ).data;\r\n\r\n    const form = new FormData();\r\n    form.append('image', imageBuffer, {\r\n      filename: 'anime.jpg',\r\n      contentType: 'image/jpeg',\r\n    });\r\n    const response = await axios.post(\r\n      'https://www.animefinder.xyz/api/identify',\r\n      form,\r\n      {\r\n        headers: {\r\n          ...form.getHeaders(),\r\n          Origin: 'https://www.animefinder.xyz',\r\n          Referer:\r\n            'Mozilla/5.0 (iPhone; CPU iPhone OS 17_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.3 Mobile/15E148 Safari/604.1',\r\n        },\r\n        maxBodyLength: Infinity,\r\n      }\r\n    );\r\n\r\n    const result = response.data;\r\n\r\n    return {\r\n      status: true,\r\n      image: imageUrl,\r\n      anime: result.animeTitle,\r\n      character: result.character,\r\n      genres: result.genres,\r\n      premiere: result.premiereDate,\r\n      production: result.productionHouse,\r\n      description: result.description,\r\n      synopsis: result.synopsis,\r\n      references: result.references || [],\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: 'Failed to identify anime from image',\r\n      error: err.response?.data || err.message,\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Enumeration of all supported poem structures/styles.\r\n * These reflect classic and modern poetic forms used globally.\r\n */\r\nexport const poemTypes = [\r\n  'Haiku', 'Sonnet', 'Free Verse', 'Blank Verse',\r\n  'Limerick', 'Romantic', 'Proposal', 'Love',\r\n  'Lyric', 'Acrostic', 'Ballad', 'Epic',\r\n  'Elegy', 'Ode', 'Pantoum', 'Narrative',\r\n  'Cinquain', 'Villanelle', 'Sestina', 'Couplet'\r\n] as const;\r\n\r\nexport type PoemType = (typeof poemTypes)[number];\r\n\r\n/**\r\n * Supported output languages for the poem.\r\n */\r\nexport const poemLanguages = ['English', 'Japanese', 'Indonesian'] as const;\r\nexport type PoemLanguage = (typeof poemLanguages)[number];\r\n\r\n/**\r\n * Available length configurations.\r\n */\r\nexport const poemLengths = ['short', 'medium', 'long'] as const;\r\nexport type PoemLength = (typeof poemLengths)[number];\r\n\r\n/**\r\n * Configuration object for poem generation.\r\n */\r\nexport interface GeneratePoemOptions {\r\n  topic?: string;        // The subject of the poem (e.g., \"winter\", \"loss\")\r\n  length?: PoemLength;   // How long the poem should be\r\n  type?: PoemType;       // The poetic structure to use\r\n  lang?: PoemLanguage;   // Output language\r\n}\r\n\r\n/**\r\n * Returned when the generation is successful.\r\n */\r\nexport interface PoemSuccess {\r\n  status: true;\r\n  result: string;\r\n}\r\n\r\n/**\r\n * Returned when poem generation fails.\r\n */\r\nexport interface PoemError {\r\n  status: false;\r\n  message: string;\r\n  error: any;\r\n}\r\n\r\n/**\r\n * General return type for generatePoem\r\n */\r\nexport type PoemResponse = PoemSuccess | PoemError;\r\n\r\n/**\r\n * Generates a structured, themed poem using https://aipoemgenerator.io\r\n *\r\n * Under the hood, it simulates a browser session to:\r\n *  1. Fetch the CSRF token and session cookie from the homepage\r\n *  2. Submit a POST form with your chosen poem parameters\r\n *\r\n * @param options - Configuration including topic, length, type, and language\r\n * @returns A PoemResponse, containing either the text or an error\r\n *\r\n * @example\r\n * const poem = await generatePoem({\r\n *   topic: \"starfall\",\r\n *   type: \"Haiku\",\r\n *   lang: \"English\",\r\n *   length: \"short\"\r\n * });\r\n */\r\nexport async function PoemGenerator({\r\n  topic = 'cinta',\r\n  length = 'long',\r\n  type = 'Sonnet',\r\n  lang = 'Indonesian'\r\n}: GeneratePoemOptions = {}): Promise<PoemResponse> {\r\n  try {\r\n    if (!poemLengths.includes(length)) {\r\n      throw `Invalid length. Choose one of: ${poemLengths.join(', ')}`;\r\n    }\r\n\r\n    const url = 'https://aipoemgenerator.io';\r\n\r\n    const initial = await axios.get(url, {\r\n      headers: { 'User-Agent': 'Mozilla/5.0' }\r\n    });\r\n\r\n    const tokenMatch = initial.data.match(/<meta name=\"_token\" content=\"(.*?)\"/);\r\n    if (!tokenMatch) throw 'CSRF token not found in HTML meta.';\r\n\r\n    const token = tokenMatch[1];\r\n    if(!initial.headers['set-cookie']) throw 'Cookie not found in response headers.';\r\n    const cookies = initial.headers['set-cookie']\r\n      .map(c => c.split(';')[0])\r\n      .join('; ');\r\n\r\n    const form = new URLSearchParams();\r\n    form.append('topic', topic);\r\n    form.append('length', length);\r\n    form.append('type', type);\r\n    form.append('lang', lang);\r\n    form.append('poemVersion', '1');\r\n    form.append('_token', token);\r\n\r\n    const post = await axios.post(`${url}/generate_poem`, form.toString(), {\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0',\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Cookie': cookies,\r\n        'Referer': url,\r\n        'Origin': url,\r\n        'X-Requested-With': 'XMLHttpRequest'\r\n      }\r\n    });\r\n\r\n    return {\r\n      status: true,\r\n      result: post.data?.trim()\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: 'Failed to generate poem',\r\n      error: err.message || err\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { JSDOM } from 'jsdom';\r\n\r\n/**\r\n * List of rotating user agents to avoid bot detection.\r\n */\r\nconst USER_AGENTS = [\r\n  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/120.0.0.0 Safari/537.36',\r\n  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) Edge/120.0.0.0',\r\n  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) Safari/605.1.15',\r\n  'Mozilla/5.0 (X11; Linux x86_64) Chrome/120.0.0.0 Safari/537.36'\r\n];\r\n\r\n/**\r\n * Basic in-memory cache with 5-minute TTL.\r\n */\r\nconst resultsCache = new Map<string, { results: string; timestamp: number }>();\r\nconst CACHE_DURATION = 5 * 60 * 1000;\r\n\r\n/**\r\n * Randomizes User-Agent for each outbound request.\r\n */\r\nfunction getRandomUserAgent(): string {\r\n  return USER_AGENTS[Math.floor(Math.random() * USER_AGENTS.length)];\r\n}\r\n\r\nfunction getCacheKey(query: string): string {\r\n  return `felo-${query.toLowerCase().trim()}`;\r\n}\r\n\r\n/**\r\n * Cleans up expired cached entries.\r\n */\r\nfunction clearOldCache(): void {\r\n  const now = Date.now();\r\n  for (const [key, value] of resultsCache.entries()) {\r\n    if (now - value.timestamp > CACHE_DURATION) {\r\n      resultsCache.delete(key);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * DuckDuckGo returns redirect-style URLs — this extracts the actual site.\r\n */\r\nfunction extractDirectUrl(rawUrl: string): string {\r\n  try {\r\n    if (rawUrl.startsWith('//')) rawUrl = 'https:' + rawUrl;\r\n    else if (rawUrl.startsWith('/')) rawUrl = 'https://duckduckgo.com' + rawUrl;\r\n\r\n    const url = new URL(rawUrl);\r\n    if (url.hostname === 'duckduckgo.com' && url.pathname === '/l/') {\r\n      const real = url.searchParams.get('uddg');\r\n      return real ? decodeURIComponent(real) : rawUrl;\r\n    }\r\n    return rawUrl;\r\n  } catch {\r\n    return rawUrl;\r\n  }\r\n}\r\n\r\n/**\r\n * Scrape relevant external links from DuckDuckGo to complement Felo's AI response.\r\n *\r\n * @param query - The same search prompt\r\n * @param maxResults - Limit the number of references\r\n */\r\nasync function getDuckDuckGoLinks(query: string, maxResults: number = 5): Promise<string[]> {\r\n  try {\r\n    const res = await axios.get(`https://duckduckgo.com/html/?q=${encodeURIComponent(query)}`, {\r\n      headers: { 'User-Agent': getRandomUserAgent() }\r\n    });\r\n\r\n    const dom = new JSDOM(res.data);\r\n    const items = dom.window.document.querySelectorAll('.result__title a');\r\n\r\n    const results: string[] = [];\r\n    for (const item of items) {\r\n      const title = item.textContent?.trim();\r\n      const rawHref = item.getAttribute('href');\r\n      const url = extractDirectUrl(rawHref || '');\r\n\r\n      if (title && url) {\r\n        results.push(`- ${title} → ${url}`);\r\n        if (results.length >= maxResults) break;\r\n      }\r\n    }\r\n    return results;\r\n  } catch {\r\n    return [];\r\n  }\r\n}\r\n\r\n/**\r\n * Main Felo AI search method.\r\n * Streams response from felo.ai and combines it with DuckDuckGo references.\r\n *\r\n * @param prompt - The user's search query\r\n * @returns Formatted string combining AI result + references\r\n */\r\nexport async function FeloSearch(prompt: string): Promise<string> {\r\n  clearOldCache();\r\n  const cacheKey = getCacheKey(prompt);\r\n\r\n  // Return from cache if fresh\r\n  const cached = resultsCache.get(cacheKey);\r\n  if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\r\n    return cached.results;\r\n  }\r\n\r\n  const payload = {\r\n    query: prompt,\r\n    search_uuid: uuidv4(),\r\n    lang: '',\r\n    agent_lang: 'en',\r\n    search_options: { langcode: 'en-US' },\r\n    search_video: true,\r\n    contexts_from: 'google'\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post('https://api.felo.ai/search/threads', payload, {\r\n      headers: {\r\n        'accept': '*/*',\r\n        'accept-language': 'en-US,en;q=0.9',\r\n        'content-type': 'application/json',\r\n        'origin': 'https://felo.ai',\r\n        'referer': 'https://felo.ai/',\r\n        'user-agent': getRandomUserAgent()\r\n      },\r\n      timeout: 30000,\r\n      responseType: 'stream'\r\n    });\r\n\r\n    let finalText = '';\r\n    for await (const chunk of response.data) {\r\n      const lines = chunk.toString().split('\\n').filter((line: string) => line.startsWith('data:'));\r\n      for (const line of lines) {\r\n        try {\r\n          const json = JSON.parse(line.slice(5));\r\n          if (json.type === 'answer' && json.data?.text) {\r\n            finalText = json.data.text;\r\n          }\r\n        } catch {}\r\n      }\r\n    }\r\n\r\n    // Append references\r\n    const links = await getDuckDuckGoLinks(prompt);\r\n    let combined = finalText || '⚠️ No response from Felo.';\r\n    if (links.length) {\r\n      combined += `\\n\\n📚 References:\\n${links.join('\\n')}`;\r\n    }\r\n\r\n    // Cache result\r\n    resultsCache.set(cacheKey, { results: combined, timestamp: Date.now() });\r\n    return combined;\r\n  } catch (err: any) {\r\n    return `❌ Felo API error: ${err.message}`;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\nconst BASE_URL = 'https://getstickerpack.com';\r\n\r\n/**\r\n * Represents a sticker pack with title and URL.\r\n */\r\nexport interface StickerPack {\r\n  title: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Searches for sticker packs by query keyword.\r\n * @param query - Search keyword (e.g., \"gura\")\r\n * @returns List of sticker packs with title + URL\r\n */\r\nexport async function searchSticker(query: string): Promise<StickerPack[]> {\r\n  const res = await axios.get(`${BASE_URL}/stickers?query=${encodeURIComponent(query)}`);\r\n  const $ = load(res.data);\r\n  const packs: StickerPack[] = [];\r\n\r\n  $('.sticker-pack-cols a').each((_, el) => {\r\n    const title = $(el).find('.title').text().trim();\r\n    const href = $(el).attr('href')?.trim();\r\n\r\n    if (title && href) {\r\n      const fullUrl = href.startsWith('http') ? href : BASE_URL + href;\r\n      packs.push({ title, url: fullUrl });\r\n    }\r\n  });\r\n\r\n  return packs;\r\n}\r\n\r\n/**\r\n * Scrapes all sticker image links from a sticker pack page.\r\n * @param packUrl - Full URL of the sticker pack\r\n * @returns List of direct image URLs (PNG/WebP)\r\n */\r\nexport async function getStickersFromPack(packUrl: string): Promise<string[]> {\r\n  const res = await axios.get(packUrl);\r\n  const $ = load(res.data);\r\n  const links: string[] = [];\r\n\r\n  $('img.sticker-image').each((_, el) => {\r\n    const src = $(el).attr('data-src-large');\r\n    if (src) links.push(src);\r\n  });\r\n\r\n  return links;\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Represents a downloadable media format (video or audio).\r\n */\r\nexport interface MediaFormat {\r\n  url: string;\r\n  quality: string;\r\n  ext: string;\r\n  size: string;\r\n  hasAudio?: boolean; // Only for video\r\n}\r\n\r\n/**\r\n * Contains basic metadata about the video.\r\n */\r\nexport interface Metadata {\r\n  title: string;\r\n  duration: string;\r\n  thumbnail: string | null;\r\n}\r\n\r\n/**\r\n * Final structured output returned by the scraper.\r\n */\r\nexport interface ScrapeResult {\r\n  status: 'success';\r\n  metadata: Metadata;\r\n  downloads: {\r\n    video: MediaFormat[];\r\n    audio: MediaFormat[];\r\n  };\r\n}\r\n\r\n/**\r\n * Generates a 64-bit hash (pseudo MurmurHash3-like) of the input string.\r\n * Used by ssyoutube's request logic to validate hash requirements.\r\n *\r\n * @param str - Input string to hash (e.g., full YouTube video URL)\r\n * @returns 64-bit hex string\r\n */\r\nfunction murmurHash64(str: string): string {\r\n  let h1 = 0xdeadbeef;\r\n  let h2 = 0x41c6ce57;\r\n\r\n  for (let i = 0; i < str.length; i++) {\r\n    const k = str.charCodeAt(i);\r\n    h1 = Math.imul(h1 ^ k, 0x85ebca6b);\r\n    h2 = Math.imul(h2 ^ k, 0xc2b2ae35);\r\n  }\r\n\r\n  h1 =\r\n    Math.imul(h1 ^ (h1 >>> 16), 0x85ebca6b) ^\r\n    Math.imul(h2 ^ (h2 >>> 13), 0xc2b2ae35);\r\n  h2 =\r\n    Math.imul(h2 ^ (h2 >>> 16), 0x85ebca6b) ^\r\n    Math.imul(h1 ^ (h1 >>> 13), 0xc2b2ae35);\r\n\r\n  return (\r\n    (h1 >>> 0).toString(16).padStart(8, '0') +\r\n    (h2 >>> 0).toString(16).padStart(8, '0')\r\n  );\r\n}\r\n\r\n/**\r\n * Extracts all downloadable media formats and metadata from a YouTube video using ssyoutube.rip backend.\r\n *\r\n * @param youtubeUrl - The full URL to the YouTube video.\r\n * @returns An object containing metadata and download links, or throws on failure.\r\n */\r\nexport async function ytdl(youtubeUrl: string): Promise<ScrapeResult> {\r\n  const mhash = murmurHash64(youtubeUrl);\r\n  const apiUrl = `https://ssyoutube.rip/mates/en/analyze/ajax?retry=undefined&platform=youtube&mhash=${mhash}`;\r\n  const siteKey = '0x4AAAAAAAzuNQE5IJEnuaAp';\r\n  const solverUrl = `https://api.yogik.id/tools/tcloudflare/?url=https://ssyoutube.rip/en-a1/&siteKey=${siteKey}`;\r\n\r\n  // 🔐 Step 1: Solve Cloudflare token\r\n  const cfToken = await axios\r\n    .get(solverUrl)\r\n    .then((res) => res.data?.data?.token)\r\n    .catch((err) => {\r\n      throw new Error(`Failed to solve Cloudflare: ${err.message}`);\r\n    });\r\n\r\n  if (!cfToken) {\r\n    throw new Error('No valid Cloudflare token returned.');\r\n  }\r\n\r\n  // 🚀 Step 2: Perform main request with resolved token\r\n  const headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n    'X-Requested-With': 'XMLHttpRequest',\r\n    'User-Agent': 'Mozilla/5.0',\r\n  };\r\n\r\n  const requestBody = new URLSearchParams({\r\n    url: youtubeUrl,\r\n    ajax: '1',\r\n    lang: 'en',\r\n    cftoken: cfToken,\r\n  });\r\n\r\n  const response = await axios.post(apiUrl, requestBody.toString(), {\r\n    headers,\r\n  });\r\n\r\n  const html = response.data?.result;\r\n  if (typeof html !== 'string') {\r\n    throw new Error('Invalid response HTML content.');\r\n  }\r\n\r\n  // 📄 Step 3: Parse HTML response using Cheerio\r\n  const $ = load(html);\r\n\r\n  const title = $('#video_title').text().trim();\r\n  const duration = $('p.m-b-0.m-t').text().replace('Duration:', '').trim();\r\n  const thumbnail = $('img.img-thumbnail').attr('src') ?? null;\r\n\r\n  if (!title) throw new Error('Failed to extract title from HTML.');\r\n\r\n  const downloads = {\r\n    video: [] as MediaFormat[],\r\n    audio: [] as MediaFormat[],\r\n  };\r\n\r\n  let currentSection = '';\r\n\r\n  $('table tr').each((_, element) => {\r\n    const row = $(element);\r\n\r\n    if (row.find('strong').length > 0) {\r\n      currentSection = row.find('strong').text().trim().toLowerCase();\r\n      return;\r\n    }\r\n\r\n    const columns = row.find('td');\r\n    if (columns.length === 3) {\r\n      const btn = $(columns[2]).find('a, button');\r\n      const url = btn.attr('href') || (btn.data('url') as string);\r\n      if (!url) return;\r\n\r\n      const format: MediaFormat = {\r\n        url,\r\n        quality: $(columns[0]).text().trim(),\r\n        ext: btn.data('ftype') as string,\r\n        size: $(columns[1]).text().trim(),\r\n      };\r\n\r\n      if (currentSection === 'video') {\r\n        format.hasAudio = !row.hasClass('noaudio');\r\n        downloads.video.push(format);\r\n      } else if (currentSection === 'audio') {\r\n        downloads.audio.push(format);\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    status: 'success',\r\n    metadata: { title, duration, thumbnail },\r\n    downloads,\r\n  };\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Type for supported rewrite levels\r\n */\r\nexport type RewriteLevel = 'standard' | 'enhanced' | 'aggressive';\r\n\r\n/**\r\n * Fine-tuning flags for rewriting behavior\r\n */\r\nexport interface RewriteSettings {\r\n    removeUnicode?: boolean;\r\n    dashesToCommas?: boolean;\r\n    removeDashes?: boolean;\r\n    transformQuotes?: boolean;\r\n    removeWhitespace?: boolean;\r\n    removeEmDash?: boolean;\r\n    keyboardOnly?: boolean;\r\n}\r\n\r\n/**\r\n * Successful transformation response\r\n */\r\nexport interface HumanizeSuccess {\r\n    success: true;\r\n    code: 200;\r\n    level: RewriteLevel;\r\n    result: {\r\n        code: string;\r\n        originalLength: number;\r\n        transformedLength: number;\r\n        reductionPercentage: string;\r\n    };\r\n}\r\n\r\n/**\r\n * Failed transformation response\r\n */\r\nexport interface HumanizeFailure {\r\n    success: false;\r\n    code: number;\r\n    result: {\r\n        error: string;\r\n        isLevel?: RewriteLevel[];\r\n    };\r\n}\r\n\r\n/**\r\n * Union type for all possible responses\r\n */\r\nexport type HumanizeResult = HumanizeSuccess | HumanizeFailure;\r\n\r\nconst BASE_URL = 'https://unaimytext.com';\r\nconst HUMANIZE_ENDPOINT = '/api/humanize';\r\n\r\nconst defaultHeaders = {\r\n    'authority': 'unaimytext.com',\r\n    'accept': '*/*',\r\n    'content-type': 'application/json',\r\n    'origin': BASE_URL,\r\n    'referer': BASE_URL + '/',\r\n    'user-agent': 'Postify/1.0.0'\r\n};\r\n\r\n/**\r\n * Rewrite AI-generated text to make it more human-sounding using UnaiMyText.\r\n * \r\n * @param text - Input text to be humanized (required)\r\n * @param level - Rewrite level: 'standard', 'enhanced', or 'aggressive'\r\n * @param settings - Optional custom settings to override default rewriting behavior\r\n * \r\n * @returns A structured object indicating success/failure and rewritten content\r\n */\r\nexport async function humanizeText(\r\n    text: string,\r\n    level: RewriteLevel = 'enhanced',\r\n    settings: RewriteSettings = {}\r\n): Promise<HumanizeResult> {\r\n    if (typeof text !== 'string' || !text.trim()) {\r\n        return {\r\n            success: false,\r\n            code: 400,\r\n            result: {\r\n                error: '❌ Input text is required.'\r\n            }\r\n        };\r\n    }\r\n\r\n    const validLevels: RewriteLevel[] = ['standard', 'enhanced', 'aggressive'];\r\n    if (!validLevels.includes(level)) {\r\n        return {\r\n            success: false,\r\n            code: 400,\r\n            result: {\r\n                error: `Invalid rewrite level: ${level}`,\r\n                isLevel: validLevels\r\n            }\r\n        };\r\n    }\r\n\r\n    const defaultSettings: RewriteSettings = {\r\n        removeUnicode: true,\r\n        dashesToCommas: true,\r\n        removeDashes: true,\r\n        transformQuotes: true,\r\n        removeWhitespace: true,\r\n        removeEmDash: true,\r\n        keyboardOnly: true\r\n    };\r\n\r\n    try {\r\n        const res = await axios.post(\r\n            BASE_URL + HUMANIZE_ENDPOINT,\r\n            {\r\n                text,\r\n                recaptchaToken: '',\r\n                level,\r\n                settings: {\r\n                    ...defaultSettings,\r\n                    ...settings\r\n                }\r\n            },\r\n            {\r\n                headers: defaultHeaders,\r\n                timeout: 10000\r\n            }\r\n        );\r\n\r\n        const resultText: string = res.data?.text;\r\n        if (!resultText) {\r\n            return {\r\n                success: false,\r\n                code: 500,\r\n                result: {\r\n                    error: 'Empty response received from API.'\r\n                }\r\n            };\r\n        }\r\n\r\n        return {\r\n            success: true,\r\n            code: 200,\r\n            level,\r\n            result: {\r\n                code: resultText,\r\n                originalLength: text.length,\r\n                transformedLength: resultText.length,\r\n                reductionPercentage:\r\n                    ((text.length - resultText.length) / text.length * 100).toFixed(2) + '%'\r\n            }\r\n        };\r\n    } catch (err: any) {\r\n        return {\r\n            success: false,\r\n            code: err.response?.status || 500,\r\n            result: {\r\n                error: 'Unhandled error while contacting UnaiMyText API.'\r\n            }\r\n        };\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\n/** Predefined aspect ratios allowed by AI Freebox API */\r\nexport type SupportedAspectRatios = '1:1' | '2:3' | '9:16' | '16:9';\r\n\r\n/** Predefined slug values representing the generation model */\r\nexport type SupportedSlugs =\r\n  | 'ai-art-generator'\r\n  | 'ai-fantasy-map-creator'\r\n  | 'ai-youtube-thumbnail-generator'\r\n  | 'ai-old-cartoon-characters-generator';\r\n\r\n/** Params object for AIFreeboxImage function */\r\nexport interface AIFreeboxImageParams {\r\n  prompt: string;\r\n  aspectRatio?: SupportedAspectRatios;\r\n  slug?: SupportedSlugs;\r\n}\r\n\r\n/**\r\n * Generates an image using the AI Freebox API.\r\n *\r\n * @param {string} prompt - The prompt describing the image content.\r\n * @param {SupportedAspectRatios} aspectRatio - The desired aspect ratio of the image.\r\n * @param {SupportedSlugs} slug - The category or model used for generation.\r\n *\r\n * @returns {Promise<string>} The URL of the generated image.\r\n *\r\n * @throws Will throw an error if the aspectRatio or slug is invalid, or if the API fails.\r\n */\r\nexport async function AIFreeboxImage(\r\n  prompt: string,\r\n  aspectRatio: SupportedAspectRatios = '16:9',\r\n  slug: SupportedSlugs = 'ai-art-generator'\r\n): Promise<string> {\r\n  const validRatios: SupportedAspectRatios[] = ['1:1', '2:3', '9:16', '16:9'];\r\n  const validSlugs: SupportedSlugs[] = [\r\n    'ai-art-generator',\r\n    'ai-fantasy-map-creator',\r\n    'ai-youtube-thumbnail-generator',\r\n    'ai-old-cartoon-characters-generator',\r\n  ];\r\n\r\n  if (!validRatios.includes(aspectRatio)) {\r\n    throw new Error(\r\n      `Invalid aspect ratio! Choose one of: ${validRatios.join(', ')}`\r\n    );\r\n  }\r\n\r\n  if (!validSlugs.includes(slug)) {\r\n    throw new Error(`Invalid slug! Choose one of: ${validSlugs.join(', ')}`);\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://aifreebox.com/api/image-generator',\r\n      {\r\n        userPrompt: prompt,\r\n        aspectRatio,\r\n        slug,\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Origin: 'https://aifreebox.com',\r\n          Referer: `https://aifreebox.com/image-generator/${slug}`,\r\n          'User-Agent':\r\n            'Mozilla/5.0 (Linux; Android 13; Mobile) AppleWebKit/537.36 Safari/537.36',\r\n        },\r\n      }\r\n    );\r\n\r\n    const { data } = response;\r\n\r\n    if (data?.success && data.imageUrl) {\r\n      return data.imageUrl;\r\n    } else {\r\n      throw new Error('No response from AI Freebox');\r\n    }\r\n  } catch (err: any) {\r\n    console.error('Error:', err.message);\r\n    throw new Error('Failed to generate image');\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { load } from 'cheerio';\r\n\r\n/**\r\n * Object containing song title, artist, url and cleaned lyrics\r\n */\r\nexport interface LyricsResult {\r\n  title: string;\r\n  artist: string;\r\n  lyrics: string;\r\n  url: string;\r\n}\r\n\r\n/**\r\n * Fetch lyrics and metadata for a given song query from songtexte.com\r\n *\r\n * @param query The song name or artist and title to search\r\n * @returns Object containing song title, artist, url and cleaned lyrics\r\n * @throws If no result or network/scrape failure occurs\r\n */\r\nexport async function SearchLyrics(query: string): Promise<LyricsResult> {\r\n  if (!query.trim()) throw new Error('Query is empty');\r\n\r\n  const searchUrl = `https://www.songtexte.com/search?q=${encodeURIComponent(query)}&c=all`;\r\n\r\n  const { data: searchData } = await axios.get(searchUrl, {\r\n    headers: { 'Accept-Language': 'id-ID,id;q=0.9' },\r\n  });\r\n\r\n  const $ = load(searchData);\r\n  const link =\r\n    $('.topHit a.topHitLink').attr('href') ||\r\n    $('div.songResultTable .song a').first().attr('href');\r\n  if (!link) throw new Error('Lyrics not found');\r\n\r\n  const lyricUrl = `https://www.songtexte.com/${link.replace(/^\\/?/, '')}`;\r\n  const { data: lyricData } = await axios.get(lyricUrl, {\r\n    headers: { 'Accept-Language': 'id-ID,id;q=0.9' },\r\n  });\r\n\r\n  const $$ = load(lyricData);\r\n  const heading = $$('h1').text().trim();\r\n  const [, title = heading, artist = ''] =\r\n    heading.match(/^(.+?)\\s+Songtext\\s+von\\s+(.+)$/i) || [];\r\n\r\n  let rawLyrics = $$('#lyrics').html() || '';\r\n  const lyrics = rawLyrics\r\n    .replace(/<br\\s*\\/?>/gi, '\\n')\r\n    .replace(/<!--.*?-->/gs, '')\r\n    .replace(/<\\/?[^>]+>/g, '')\r\n    .replace(/]]>|\\/\\|\\\\/g, '')\r\n    .replace(/&nbsp;/g, ' ')\r\n    .replace(/\\r/g, '')\r\n    .split('\\n')\r\n    .map((line) => line.trim())\r\n    .filter(Boolean)\r\n    .join('\\n');\r\n\r\n  return { title, artist, lyrics, url: lyricUrl };\r\n}\r\n","import axios, { AxiosError } from 'axios';\r\n\r\n/**\r\n * Minecraft player name history entry\r\n */\r\nexport interface NameHistoryEntry {\r\n  name: string;\r\n  changedToAt?: string;\r\n}\r\n\r\n/**\r\n * Minecraft player profile\r\n */\r\nexport interface MinecraftProfile {\r\n  username: string;\r\n  id: string;\r\n  short_id: string;\r\n  raw_id: string;\r\n  avatar: string;\r\n  skin_texture: string;\r\n  name_history: NameHistoryEntry[];\r\n  head_preview: string;\r\n  full_body_preview_hd: string;\r\n  skin_download: string;\r\n  qr_uuid: string;\r\n  profile_valid: boolean;\r\n  skin_model: string;\r\n  namemc_url: string;\r\n}\r\n\r\n/**\r\n * Minecraft player profile result\r\n */\r\nexport interface MinecraftStalkResult {\r\n  status: number;\r\n  data?: MinecraftProfile;\r\n  error?: string;\r\n  reason?: string;\r\n}\r\n\r\n/**\r\n * Fetch Minecraft player profile from PlayerDB and Mojang APIs.\r\n * @param username Minecraft username (case-insensitive)\r\n * @returns Minecraft profile or descriptive error object\r\n */\r\nexport async function MinecraftStalk(\r\n  username: string\r\n): Promise<MinecraftStalkResult> {\r\n  try {\r\n    const response = await axios.get(\r\n      `https://playerdb.co/api/player/minecraft/${username}`\r\n    );\r\n    const data = response.data;\r\n\r\n    if (!data.success || !data.data?.player) {\r\n      return {\r\n        status: 404,\r\n        error: 'Player not found in PlayerDB.',\r\n        reason: data.code || 'unknown',\r\n      };\r\n    }\r\n\r\n    const player = data.data.player;\r\n    let skinModel = 'Unknown';\r\n\r\n    try {\r\n      const sessionRes = await axios.get(\r\n        `https://sessionserver.mojang.com/session/minecraft/profile/${player.id}`\r\n      );\r\n      const textures = JSON.parse(\r\n        Buffer.from(sessionRes.data.properties[0].value, 'base64').toString()\r\n      );\r\n      skinModel =\r\n        textures.textures.SKIN.metadata?.model === 'slim'\r\n          ? 'Alex (slim)'\r\n          : 'Steve (default)';\r\n    } catch (sessionError: any) {\r\n      skinModel = '⚠️ Failed to fetch skin model';\r\n    }\r\n\r\n    const profile: MinecraftProfile = {\r\n      username: player.username,\r\n      id: player.id,\r\n      short_id: player.id.replace(/-/g, ''),\r\n      raw_id: player.raw_id,\r\n      avatar: player.avatar,\r\n      skin_texture: player.skin_texture,\r\n      name_history: player.name_history || [],\r\n      head_preview: `https://mc-heads.net/head/${username}`,\r\n      full_body_preview_hd: `https://crafatar.com/renders/body/${player.id}?scale=10&overlay`,\r\n      skin_download: `https://mc-heads.net/download/${username}`,\r\n      qr_uuid: `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${player.id}`,\r\n      profile_valid: data.code === 'player.found',\r\n      skin_model: skinModel,\r\n      namemc_url: `https://namemc.com/profile/${username}`,\r\n    };\r\n\r\n    return { status: 200, data: profile };\r\n  } catch (error: unknown) {\r\n    // Axios-specific error handling\r\n    if (axios.isAxiosError(error)) {\r\n      const axiosErr = error as AxiosError;\r\n      return {\r\n        status: axiosErr.response?.status || 500,\r\n        error: axiosErr.message,\r\n        reason: axiosErr.response?.statusText || 'Unexpected Axios error',\r\n      };\r\n    }\r\n\r\n    // Non-Axios or unknown error\r\n    return {\r\n      status: 500,\r\n      error: (error as Error).message || 'Unknown error',\r\n      reason: 'Unexpected failure during request',\r\n    };\r\n  }\r\n}\r\n","// src/utils/gemini.ts\r\n\r\nimport { GenerationConfig, GoogleGenAI, ContentListUnion } from '@google/genai';\r\n\r\n/**\r\n * Generates an image and text response from Gemini using prompt and base64 image.\r\n * @param prompt Text prompt to condition image generation\r\n * @param base64Image Base64-encoded image data\r\n * @param mimeType MIME type (e.g., \"image/png\")\r\n * @returns Object containing image buffer and textual response\r\n */\r\nexport async function GeminiCanvas(\r\n  prompt: string,\r\n  base64Image: string,\r\n  mimeType: string,\r\n  apiKey: string\r\n): Promise<{ imageBuffer?: Buffer; textResponse?: string }> {\r\n  if (!apiKey) {\r\n    throw new Error('API key is required');\r\n  }\r\n  const contents: ContentListUnion = [\r\n    { text: prompt },\r\n    {\r\n      inlineData: {\r\n        mimeType,\r\n        data: base64Image,\r\n      },\r\n    },\r\n  ];\r\n\r\n  const ai = new GoogleGenAI({\r\n    apiKey: apiKey,\r\n  });\r\n\r\n  const res = await ai.models.generateContent({\r\n    model: 'gemini-2.0-flash-preview-image-generation',\r\n    contents,\r\n    config: {\r\n      responseModalities: ['TEXT', 'IMAGE'],\r\n    } as GenerationConfig,\r\n  });\r\n\r\n  const parts = res.candidates?.[0]?.content?.parts || [];\r\n  let imageBuffer: Buffer | undefined;\r\n  let textResponse: string | undefined;\r\n  for (const part of parts) {\r\n    if (part.inlineData) {\r\n      imageBuffer = Buffer.from(part.inlineData.data as string, 'base64');\r\n    } else if (part.text) {\r\n      textResponse = part.text;\r\n    }\r\n  }\r\n\r\n  return { imageBuffer, textResponse };\r\n}\r\n","/**\r\n * src/nakanime.ts\r\n * Provides methods to fetch anime data from Nakanime API\r\n */\r\n\r\nimport axios, { AxiosInstance } from 'axios';\r\n/**\r\n * Interface definitions for Nakanime scraper API responses.\r\n */\r\n\r\nexport interface AnimeData {\r\n  id: number;\r\n  title: string;\r\n  slug: string;\r\n  thumbnail: string;\r\n  type: string | null;\r\n  url: string;\r\n  status: string;\r\n}\r\n\r\n/**\r\n * Genre data interface\r\n */\r\nexport interface GenreData {\r\n  id: number;\r\n  name: string;\r\n  slug: string;\r\n}\r\n\r\n/**\r\n * Search result interface\r\n */\r\nexport interface SearchResult {\r\n  data: AnimeData[];\r\n}\r\n\r\n/**\r\n * Genre list interface\r\n */\r\nexport interface GenreList {\r\n  data: GenreData[];\r\n}\r\n\r\n/**\r\n * Class for accessing anime data from Nakanime unofficial API.\r\n */\r\nexport class Nakanime {\r\n  private client: AxiosInstance;\r\n\r\n  constructor() {\r\n    this.client = axios.create({\r\n      baseURL: 'https://anime.nakanime.my.id/api/anime',\r\n      headers: {\r\n        accept: 'application/json, text/plain, */*',\r\n        'accept-encoding': 'gzip',\r\n        'user-agent': 'okhttp/4.9.2',\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get anime list sorted by order type.\r\n   * @param order Sorting method ('title', 'latest', 'popular', etc.)\r\n   * @param page Page number\r\n   */\r\n  async get(order: string = 'latest', page: number = 1): Promise<SearchResult> {\r\n    const validOrders = [\r\n      'title',\r\n      'latest',\r\n      'popular',\r\n      'rating',\r\n      'update',\r\n      'titlereverse',\r\n    ];\r\n    if (!validOrders.includes(order)) {\r\n      throw new Error(`Available orders: ${validOrders.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get('/all/', {\r\n      params: { order, page },\r\n    });\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get anime list by genre\r\n   * @param genre Genre slug (e.g., 'action', 'comedy')\r\n   * @param page Page number\r\n   */\r\n  async genre(genre: string, page: number = 1): Promise<any> {\r\n    const { data: genreData } = await this.client.get<GenreList>('/genre');\r\n    const validGenres = genreData.data.map((g) => g.slug);\r\n\r\n    if (!validGenres.includes(genre)) {\r\n      throw new Error(`Available genres: ${validGenres.join(', ')}`);\r\n    }\r\n\r\n    const { data } = await this.client.get('/bygenres/', {\r\n      params: { genre, page },\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Search anime by keyword\r\n   * @param query Search term\r\n   */\r\n  async search(query: string): Promise<SearchResult> {\r\n    if (!query) throw new Error('Query is required');\r\n    const { data } = await this.client.get('/search/', {\r\n      params: { keyword: query },\r\n    });\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get anime detail from URL\r\n   * @param url Anime detail page URL\r\n   */\r\n  async getDetail(url: string): Promise<any> {\r\n    const match = url.match(\r\n      /^https:\\/\\/api\\.nakanime\\.my\\.id\\/anime\\/([^\\/]+)\\/?$/\r\n    );\r\n    if (!match) throw new Error('Invalid detail URL format');\r\n\r\n    const { data } = await this.client.get('/', {\r\n      params: { name: match[1] },\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get episode data from URL\r\n   * @param url Episode URL\r\n   */\r\n  async getData(url: string): Promise<any> {\r\n    const match = url.match(\r\n      /^https:\\/\\/api\\.nakanime\\.my\\.id\\/([^\\/]+episode-[^\\/]+)\\/?$/\r\n    );\r\n    if (!match) throw new Error('Invalid episode URL format');\r\n\r\n    const { data } = await this.client.get('/data/', {\r\n      params: { slug: match[1] },\r\n    });\r\n\r\n    return data;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Uploads a given image buffer to Catbox for public access.\r\n *\r\n * @param buffer - The image file buffer.\r\n * @param filename - Name to assign to the file on Catbox.\r\n * @returns A public Catbox URL pointing to the uploaded image.\r\n */\r\nexport async function uploadToCatbox(\r\n  buffer: Buffer,\r\n  filename: string\r\n): Promise<string> {\r\n  const form = new FormData();\r\n  form.append('reqtype', 'fileupload');\r\n  form.append('fileToUpload', buffer, { filename });\r\n\r\n  try {\r\n    const res = await axios.post('https://catbox.moe/user/api.php', form, {\r\n      headers: form.getHeaders(),\r\n    });\r\n\r\n    if (typeof res.data === 'string' && res.data.startsWith('https://')) {\r\n      return res.data;\r\n    }\r\n\r\n    throw new Error('Catbox upload failed or returned an invalid response.');\r\n  } catch (err: any) {\r\n    throw new Error(`Catbox upload error: ${err.message}`);\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport { uploadToCatbox } from '../_other-scraper/uploader.js';\r\n\r\n/**\r\n * Available Studio Ghibli art styles.\r\n */\r\nexport type GhibliStyle =\r\n  | 'Spirited Away'\r\n  | \"Howl's Castle\"\r\n  | 'Princess Mononoke'\r\n  | 'Totoro';\r\n\r\n/**\r\n * Input options for generating a Ghibli-style image.\r\n */\r\nexport interface GhibliGenerationOptions {\r\n  prompt: string;\r\n  style: GhibliStyle;\r\n}\r\n\r\n/**\r\n * Generates an image using the Ghibli AI Image Generator and uploads it to Catbox.\r\n *\r\n * @param options - Contains the prompt and Ghibli style to use.\r\n * @returns A publicly accessible URL of the generated image.\r\n * @throws Error if the generation or upload process fails.\r\n */\r\nexport async function TextToGhibli(\r\n  options: GhibliGenerationOptions\r\n): Promise<string> {\r\n  const allowedStyles: GhibliStyle[] = [\r\n    'Spirited Away',\r\n    \"Howl's Castle\",\r\n    'Princess Mononoke',\r\n    'Totoro',\r\n  ];\r\n\r\n  if (!allowedStyles.includes(options.style)) {\r\n    throw new Error(`Invalid style. Choose from: ${allowedStyles.join(', ')}`);\r\n  }\r\n\r\n  const headers = {\r\n    'content-type': 'application/json',\r\n    origin: 'https://ghibliimagegenerator.net',\r\n    referer: 'https://ghibliimagegenerator.net/generator',\r\n    'user-agent':\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/117.0 Safari/537.36',\r\n  };\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://ghibliimagegenerator.net/api/generate-image',\r\n      {\r\n        prompt: options.prompt,\r\n        style: options.style,\r\n      },\r\n      { headers }\r\n    );\r\n    const imageData: string | undefined = response.data?.imageData;\r\n    if (!imageData || !imageData.startsWith('data:image')) {\r\n      throw new Error('Invalid image data returned from Ghibli generator.');\r\n    }\r\n    const base64 = imageData.split(',')[1];\r\n    const buffer = Buffer.from(base64, 'base64');\r\n    const filename = `ghibli_${Date.now()}.webp`;\r\n    const catboxUrl = await uploadToCatbox(buffer, filename);\r\n    return catboxUrl;\r\n  } catch (error: any) {\r\n    throw new Error(`Ghibli generation failed: ${error.message}`);\r\n  }\r\n}\r\n","import WebSocket from 'ws';\r\n\r\n/**\r\n * Interface untuk input transformasi gambar menggunakan DeepfakeMaker.io\r\n */\r\nexport interface DeepfakeInput {\r\n  buffer: Buffer;\r\n  prompt: string;\r\n}\r\n\r\n/**\r\n * Interface untuk pesan WebSocket\r\n */\r\nexport interface WebSocketMessage {\r\n  msg: string;\r\n  output?: {\r\n    result: string[];\r\n  };\r\n}\r\n\r\n/**\r\n * Melakukan transformasi gambar menggunakan DeepfakeMaker.io\r\n * @param input Objek berisi buffer dan prompt\r\n * @param input.buffer Buffer dari gambar yang akan diubah\r\n * @param input.prompt Prompt deskriptif untuk mengganti pakaian (termasuk NSFW)\r\n * @returns URL hasil deepfake yang dihasilkan\r\n */\r\nexport async function deepfakeTransform({\r\n  buffer,\r\n  prompt,\r\n}: DeepfakeInput): Promise<string> {\r\n  if (!prompt || !buffer || !Buffer.isBuffer(buffer)) {\r\n    throw new Error('Valid prompt and image buffer are required.');\r\n  }\r\n\r\n  const sessionHash = Math.random().toString(36).substring(2);\r\n  const socket = new WebSocket(\r\n    'wss://deepfakemaker.io/cloth-change/queue/join'\r\n  );\r\n\r\n  return new Promise<string>((resolve, reject) => {\r\n    socket.on('message', (raw) => {\r\n      const data: WebSocketMessage = JSON.parse(raw.toString('utf-8'));\r\n\r\n      switch (data.msg) {\r\n        case 'send_hash':\r\n          socket.send(JSON.stringify({ session_hash: sessionHash }));\r\n          break;\r\n\r\n        case 'send_data':\r\n          socket.send(\r\n            JSON.stringify({\r\n              data: {\r\n                prompt,\r\n                request_from: 4,\r\n                source_image: `data:image/jpeg;base64,${buffer.toString('base64')}`,\r\n                type: 1,\r\n              },\r\n            })\r\n          );\r\n          break;\r\n\r\n        case 'process_completed':\r\n          socket.close();\r\n          if (!data.output || !data.output.result?.[0]) {\r\n            return reject(new Error('No result returned'));\r\n          }\r\n          return resolve(\r\n            `https://res.deepfakemaker.io/${data.output.result[0]}`\r\n          );\r\n      }\r\n    });\r\n\r\n    socket.on('error', (err) => {\r\n      reject(new Error(`WebSocket error: ${err.message}`));\r\n    });\r\n\r\n    socket.on('close', () => {\r\n      // Optionally handle close\r\n      reject(new Error('WebSocket connection closed'));\r\n    });\r\n  });\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Options required to generate a prompt from an image.\r\n */\r\nexport interface ImageToPromptOptions {\r\n  imageUrl: string;\r\n  imageBuffer?: Buffer;\r\n}\r\n\r\n/**\r\n * Expected response from NeuralFrames API.\r\n */\r\nexport interface NeuralFramesResponse {\r\n  prompt: string;\r\n  [key: string]: any; // For any additional properties returned\r\n}\r\n\r\n/**\r\n * Uploads an image (either from a URL or a raw Buffer) to NeuralFrames'\r\n * CLIP Interrogate endpoint and returns an AI-generated textual prompt.\r\n *\r\n * @param options - The input options containing either a URL or Buffer.\r\n * @returns A promise resolving to the AI-generated prompt.\r\n * @throws Error if both input types are missing or the API fails.\r\n */\r\nexport async function imageToPrompt(\r\n  options: ImageToPromptOptions\r\n): Promise<NeuralFramesResponse> {\r\n  const { imageUrl, imageBuffer } = options;\r\n\r\n  // Validate input\r\n  if (!imageUrl && !imageBuffer) {\r\n    throw new Error('Either imageUrl or imageBuffer must be provided.');\r\n  }\r\n\r\n  let buffer: Buffer;\r\n\r\n  // If image URL is provided, download it\r\n  if (imageUrl) {\r\n    try {\r\n      const response = await axios.get(imageUrl, {\r\n        responseType: 'arraybuffer',\r\n      });\r\n      buffer = Buffer.from(response.data, 'binary');\r\n    } catch (err: any) {\r\n      throw new Error(`Failed to download image from URL: ${err.message}`);\r\n    }\r\n  } else {\r\n    // Use provided buffer directly\r\n    if (!Buffer.isBuffer(imageBuffer)) {\r\n      throw new Error('imageBuffer must be a valid Buffer instance.');\r\n    }\r\n    buffer = imageBuffer;\r\n  }\r\n\r\n  // Prepare multipart form\r\n  const form = new FormData();\r\n  form.append('file', buffer, {\r\n    filename: 'upload.jpg',\r\n    contentType: 'image/jpeg',\r\n  });\r\n\r\n  // Submit to NeuralFrames API\r\n  try {\r\n    const response = await axios.post<NeuralFramesResponse>(\r\n      'https://be.neuralframes.com/clip_interrogate/',\r\n      form,\r\n      {\r\n        headers: {\r\n          ...form.getHeaders(),\r\n          authorization:\r\n            'Bearer uvcKfXuj6Ygncs6tiSJ6VXLxoapJdjQ3EEsSIt45Zm+vsl8qcLAAOrnnGWYBccx4sbEaQtCr416jxvc/zJNAlcDjLYjfHfHzPpfJ00l05h0oy7twPKzZrO4xSB+YGrmCyb/zOduHh1l9ogFPg/3aeSsz+wZYL9nlXfXdvCqDIP9bLcQMHiUKB0UCGuew2oRt',\r\n          origin: 'https://www.neuralframes.com',\r\n          referer: 'https://www.neuralframes.com',\r\n        },\r\n      }\r\n    );\r\n\r\n    return response.data;\r\n  } catch (err: any) {\r\n    throw new Error(`NeuralFrames API error: ${err.message}`);\r\n  }\r\n}\r\n","// src/snack.module.ts\r\n\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Structure of successful video extraction result.\r\n */\r\nexport interface SnackVideoSuccess {\r\n  status: true;\r\n  video: string;\r\n}\r\n\r\n/**\r\n * Structure of a failed video extraction attempt.\r\n */\r\nexport interface SnackVideoFailure {\r\n  status: false;\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Unified type for the result.\r\n */\r\nexport type SnackVideoResult = SnackVideoSuccess | SnackVideoFailure;\r\n\r\n/**\r\n * Downloads video data from a SnackVideo URL using snackdownloader.com's public API.\r\n *\r\n * @param url - A valid SnackVideo video link.\r\n * @returns An object indicating success/failure and the video download URL or error message.\r\n */\r\nexport async function downloadSnackVideo(\r\n  url: string\r\n): Promise<SnackVideoResult> {\r\n  if (!/^https?:\\/\\/(www\\.)?snackvideo\\.com\\/.*/.test(url)) {\r\n    return {\r\n      status: false,\r\n      message: 'Invalid SnackVideo URL format.',\r\n    };\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(\r\n      'https://api.snackdownloader.com/get-data',\r\n      { url },\r\n      {\r\n        headers: {\r\n          'content-type': 'application/json',\r\n          origin: 'https://snackdownloader.com',\r\n          referer: 'https://snackdownloader.com',\r\n          'user-agent':\r\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',\r\n        },\r\n      }\r\n    );\r\n\r\n    const { video } = response.data;\r\n\r\n    if (!video) {\r\n      return {\r\n        status: false,\r\n        message: 'Video URL not found in response. Please check the link.',\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: true,\r\n      video,\r\n    };\r\n  } catch (err: any) {\r\n    return {\r\n      status: false,\r\n      message: err.message || 'Unknown error occurred.',\r\n    };\r\n  }\r\n}\r\n","// src/guessFlag.module.ts\r\n\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Represents a single guess-the-flag question.\r\n */\r\nexport interface FlagQuestion {\r\n  imageUrl: string;\r\n  correctCountry: string;\r\n  options: string[];\r\n}\r\n\r\n/**\r\n * Fetches and constructs a \"Guess the Flag\" question using real-time country data\r\n * from the RESTCountries API.\r\n *\r\n * @returns A `FlagQuestion` object containing flag image URL, correct answer, and options.\r\n */\r\nexport async function GuessTheFlag(): Promise<FlagQuestion> {\r\n  const countries = await fetchCountriesFromAPI();\r\n\r\n  // Pick 4 random countries for options\r\n  const shuffled = shuffleArray(countries).slice(0, 4);\r\n  const correct = shuffled[Math.floor(Math.random() * shuffled.length)];\r\n\r\n  return {\r\n    imageUrl: correct.flagUrl,\r\n    correctCountry: correct.name,\r\n    options: shuffleArray(shuffled.map((c) => c.name)),\r\n  };\r\n}\r\n\r\n/**\r\n * Represents a simplified country entry used for game logic.\r\n */\r\ninterface CountryAPIEntry {\r\n  name: string;\r\n  code: string;\r\n  flagUrl: string;\r\n}\r\n\r\n/**\r\n * Fetches country data from the RESTCountries API with specific fields required.\r\n */\r\nasync function fetchCountriesFromAPI(): Promise<CountryAPIEntry[]> {\r\n  const fields = ['name', 'flags', 'cca2'].join(',');\r\n\r\n  try {\r\n    const response = await axios.get(\r\n      `https://restcountries.com/v3.1/all?fields=${fields}`\r\n    );\r\n\r\n    return response.data\r\n      .filter(\r\n        (country: any) =>\r\n          country.cca2 && country.flags?.png && country.name?.common\r\n      )\r\n      .map((country: any) => ({\r\n        name: country.name.common,\r\n        code: country.cca2,\r\n        flagUrl: country.flags.png,\r\n      }));\r\n  } catch (error) {\r\n    throw new Error('Failed to fetch countries from RESTCountries API.');\r\n  }\r\n}\r\n\r\n/**\r\n * Shuffles an array using the Fisher-Yates algorithm.\r\n */\r\nfunction shuffleArray<T>(array: T[]): T[] {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [arr[i], arr[j]] = [arr[j], arr[i]];\r\n  }\r\n  return arr;\r\n}\r\n","// src/utils/gemini.ts\r\n\r\nimport { GenerationConfig, GoogleGenAI, ContentListUnion } from '@google/genai';\r\n\r\n/**\r\n * generate text response from Gemini\r\n * @param prompt Text prompt to condition image generation\r\n * @returns Object containing textual response\r\n */\r\nexport async function GeminiChat(prompt: string): Promise<string | undefined> {\r\n  const contents: ContentListUnion = [{ text: prompt }];\r\n\r\n  const ai = new GoogleGenAI({\r\n    apiKey: 'AIzaSyBA-qPXeMKvZbD0lZnpEcEYC_pyTRyG0eU',\r\n  });\r\n\r\n  const res = await ai.models.generateContent({\r\n    model: 'gemini-2.0-flash-thinking-exp-01-21',\r\n    contents,\r\n    config: {\r\n      responseModalities: ['TEXT'],\r\n    } as GenerationConfig,\r\n  });\r\n\r\n  const parts = res.candidates?.[0]?.content?.parts || [];\r\n  let textResponse: string | undefined;\r\n  for (const part of parts) {\r\n    if (part.text) {\r\n      textResponse = part.text;\r\n    }\r\n  }\r\n\r\n  return textResponse;\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Interface for Tokopedia product object.\r\n */\r\nexport interface TokopediaProduct {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  price: {\r\n    text: string;\r\n    number: number;\r\n  };\r\n  mediaURL: {\r\n    image: string;\r\n  };\r\n  shop: {\r\n    name: string;\r\n    city: string;\r\n  };\r\n}\r\n\r\n/**\r\n * Clean the URL by stripping parameters.\r\n * @param fullUrl - Full product URL from Tokopedia.\r\n * @returns Cleaned URL with only origin and path.\r\n */\r\nexport const cleanUrl = (fullUrl: string): string => {\r\n  try {\r\n    const urlObj = new URL(fullUrl);\r\n    return `${urlObj.origin}${urlObj.pathname}`;\r\n  } catch {\r\n    return fullUrl;\r\n  }\r\n};\r\n\r\n/**\r\n * Scrape Tokopedia search results using GraphQL API.\r\n * @param query - Product keyword to search.\r\n * @returns Array of product objects.\r\n */\r\nexport const TokopediaSearch = async (\r\n  query: string\r\n): Promise<TokopediaProduct[]> => {\r\n  const searchParams = new URLSearchParams({\r\n    device: 'mobile',\r\n    enable_lite_deduplication: 'true',\r\n    enter_method: 'normal_search',\r\n    l_name: 'sre',\r\n    navsource: 'home',\r\n    ob: '23',\r\n    page: '1',\r\n    q: query,\r\n    rows: '8',\r\n    source: 'search',\r\n    srp_component_id: '02.01.00.00',\r\n    t_ef: 'homepage',\r\n    t_id: '1752390521108',\r\n    t_pp: 'homepage',\r\n    t_st: '1',\r\n    use_page: 'true',\r\n  });\r\n\r\n  const payload = [\r\n    {\r\n      operationName: 'SearchProductV5Query',\r\n      variables: {\r\n        cursor: '1y1kfq2',\r\n        searchProductV5Param: searchParams.toString(),\r\n      },\r\n      query: `query SearchProductV5Query($searchProductV5Param: String!) {\r\n        searchProductV5(params: $searchProductV5Param) {\r\n          data {\r\n            products {\r\n              id\r\n              name\r\n              url\r\n              price { text number }\r\n              mediaURL { image }\r\n              shop { name city }\r\n            }\r\n          }\r\n        }\r\n      }`,\r\n    },\r\n  ];\r\n\r\n  const response = await axios.post(\r\n    'https://gql.tokopedia.com/graphql/SearchProductV5Query',\r\n    payload,\r\n    {\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        origin: 'https://www.tokopedia.com',\r\n        referer: `https://www.tokopedia.com/search?navsource=home&q=${query}`,\r\n        'user-agent':\r\n          'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Mobile Safari/537.36',\r\n        'x-device': 'mobile',\r\n        'x-tkpd-lite-service': 'phoenix',\r\n      },\r\n    }\r\n  );\r\n\r\n  return response.data[0].data.searchProductV5.data\r\n    .products as TokopediaProduct[];\r\n};\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Fetches a response from gptonline.ai via simulated user message.\r\n * @param message - The user's message to send to GPT Online\r\n * @returns The AI's response as a string\r\n */\r\nexport async function ChatGPTOnline(message: string): Promise<string> {\r\n  const referer = 'https://gptonline.ai/id/chatgpt-online';\r\n\r\n  try {\r\n    // Step 1: Retrieve HTML content and extract dynamic attributes\r\n    const html = (await axios.get(referer)).data;\r\n    const attrs: Record<string, string> = {};\r\n    const attrList = ['nonce', 'post-id', 'bot-id', 'url'];\r\n\r\n    for (const key of attrList) {\r\n      const match = html.match(new RegExp(`data-${key}=\"([^\"]+)\"`));\r\n      if (!match) throw new Error(`Missing attribute: ${key}`);\r\n      attrs[key] = match[1];\r\n    }\r\n\r\n    // Step 2: Build form data for POST request\r\n    const clientId = 'sU' + Math.random().toString(36).slice(2, 10);\r\n    const form = new FormData();\r\n\r\n    form.append('_wpnonce', attrs['nonce']);\r\n    form.append('post_id', attrs['post-id']);\r\n    form.append('url', attrs['url']);\r\n    form.append('action', 'wpaicg_chat_shortcode_message');\r\n    form.append('message', message);\r\n    form.append('bot_id', attrs['bot-id']);\r\n    form.append('chatbot_identity', `custom_bot_${attrs['bot-id']}`);\r\n    form.append(\r\n      'wpaicg_chat_history',\r\n      JSON.stringify([{ role: 'user', content: message }])\r\n    );\r\n    form.append('wpaicg_chat_client_id', clientId);\r\n\r\n    // Step 3: Send the POST request\r\n    const res = await axios.post(\r\n      'https://gptonline.ai/id/wp-admin/admin-ajax.php',\r\n      form,\r\n      {\r\n        headers: {\r\n          ...form.getHeaders(),\r\n          Referer: referer,\r\n          Origin: 'https://gptonline.ai',\r\n          'User-Agent': 'Mozilla/5.0',\r\n        },\r\n      }\r\n    );\r\n\r\n    return res.data?.data || 'No response received';\r\n  } catch (err: any) {\r\n    throw new Error(`Request failed: ${err.response?.data || err.message}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Edits an image using the OpenAI DALL-E image editing API.\r\n *\r\n * @param imageUrl The URL of the image to be edited.\r\n * @param prompt The text prompt describing the desired edit.\r\n * @param apiKey (Optional) Your OpenAI API key. If not provided, it will look for OPENAI_API_KEY in environment variables.\r\n * @returns A Promise that resolves with the base64 encoded edited image, or null if an error occurs.\r\n * @throws Will throw an error if the image download fails, API request fails, or no base64 image is returned.\r\n */\r\nexport async function GPTImageCanvas(\r\n  imageUrl: string,\r\n  prompt: string,\r\n  apiKey?: string\r\n): Promise<string | null> {\r\n  const openAIApiKey =\r\n    apiKey ||\r\n    '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';\r\n  if (!openAIApiKey) {\r\n    throw new Error(\r\n      'OpenAI API Key is not provided. Please pass it as an argument or set the OPENAI_API_KEY environment variable.'\r\n    );\r\n  }\r\n  try {\r\n    const imageResponse = await axios.get(imageUrl, {\r\n      responseType: 'arraybuffer',\r\n    });\r\n    const imageBuffer = Buffer.from(imageResponse.data);\r\n    const form = new FormData();\r\n    form.append('image', imageBuffer, {\r\n      filename: 'image.png',\r\n      contentType: 'image/png',\r\n    });\r\n    form.append('prompt', prompt);\r\n    form.append('model', 'gpt-image-1');\r\n    form.append('n', '1');\r\n    form.append('size', '1024x1024');\r\n    form.append('quality', 'high');\r\n    const response = await axios.post(\r\n      'https://api.openai.com/v1/images/edits',\r\n      form,\r\n      {\r\n        headers: {\r\n          ...form.getHeaders(),\r\n          Authorization: `Bearer ${openAIApiKey}`,\r\n        },\r\n      }\r\n    );\r\n    const base64 = response.data?.data?.[0]?.b64_json;\r\n    if (!base64) {\r\n      throw new Error('No base64 image data received from the OpenAI API.');\r\n    }\r\n    return base64;\r\n  } catch (error: any) {\r\n    console.error(`❌ Error editing image: ${error.message}`);\r\n    if (axios.isAxiosError(error)) {\r\n      console.error(`   Status: ${error.response?.status}`);\r\n      console.error(`   Data: ${JSON.stringify(error.response?.data)}`);\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n/**\r\n * nsfwModels supported\r\n */\r\nexport const nsfwModels = {\r\n  flux: 'flux_text2img',\r\n  artist: 'text2img_artist',\r\n  anime: 'text2img_anime',\r\n  realistic: 'text2img_real',\r\n  realistic_v2: 'text2img_real_v2',\r\n  nsfw_anime: 'text2img_anime', // alias\r\n};\r\n\r\n/**\r\n * styles supported\r\n */\r\nexport const nsfwStyles = [\r\n  'general',\r\n  'anime',\r\n  'ghibli',\r\n  'fantasy_art',\r\n  'line_art',\r\n  'photograph',\r\n  'comic',\r\n  'nsfw_anime',\r\n];\r\n\r\n/**\r\n * ratios supported\r\n */\r\nexport const nsfwRatios = {\r\n  '1:1': { width: 1024, height: 1024 },\r\n  '3:4': { width: 864, height: 1152 },\r\n  '4:3': { width: 1152, height: 864 },\r\n  '4:5': { width: 921, height: 1152 },\r\n  '5:4': { width: 1152, height: 921 },\r\n  '9:16': { width: 756, height: 1344 },\r\n  '16:9': { width: 1344, height: 756 },\r\n};\r\n\r\n/**\r\n * Options for text2nsfw\r\n */\r\nexport interface Text2NSFWOptions {\r\n  base_model?: keyof typeof nsfwModels;\r\n  style?: string;\r\n  ratio?: keyof typeof nsfwRatios;\r\n}\r\n\r\n/**\r\n * Generate NSFW-styled artwork based on text prompt\r\n * @param prompt - Textual description of the desired image\r\n * @param options - Optional model/style/ratio parameters\r\n * @returns Array of image URLs\r\n */\r\nexport async function text2nsfw(\r\n  prompt: string,\r\n  {\r\n    base_model = 'anime',\r\n    style = 'nsfw_anime',\r\n    ratio = '1:1',\r\n  }: Text2NSFWOptions = {}\r\n): Promise<string[]> {\r\n  if (!prompt) throw new Error('⚠️ Prompt is required');\r\n  if (!(base_model in nsfwModels))\r\n    throw new Error(\r\n      `❌ Invalid model. Available: ${Object.keys(nsfwModels).join(', ')}`\r\n    );\r\n  if (!nsfwStyles.includes(style))\r\n    throw new Error(`❌ Invalid style. Choose from: ${nsfwStyles.join(', ')}`);\r\n  if (!(ratio in nsfwRatios))\r\n    throw new Error(\r\n      `❌ Invalid ratio. Supported: ${Object.keys(nsfwRatios).join(', ')}`\r\n    );\r\n\r\n  const uuid = uuidv4();\r\n\r\n  await axios.get('https://api-cdn.aiartgen.net/comfyapi/v4/config', {\r\n    params: {\r\n      app_version_code: '469',\r\n      app_version_name: '3.41.0',\r\n      device_id: uuid,\r\n      ad_id: '',\r\n      platform: 'android',\r\n    },\r\n    headers: {\r\n      'accept-encoding': 'gzip',\r\n      'content-type': 'application/json; charset=UTF-8',\r\n      'user-agent': 'okhttp/4.12.0',\r\n    },\r\n  });\r\n\r\n  const { width, height } = nsfwRatios[ratio];\r\n\r\n  const { data } = await axios.post(\r\n    'https://api-cdn.aiartgen.net/comfyapi/v4/prompt',\r\n    {\r\n      batch_size: 1,\r\n      diamond_remain: 3,\r\n      height,\r\n      width,\r\n      model_id: style === 'nsfw_anime' ? 'anime' : style,\r\n      prompt,\r\n      prompt_translated: prompt,\r\n      ratio,\r\n      work_type: nsfwModels[base_model],\r\n    },\r\n    {\r\n      params: {\r\n        app_version_code: '469',\r\n        app_version_name: '3.41.0',\r\n        device_id: uuid,\r\n        ad_id: uuidv4(),\r\n        platform: 'android',\r\n      },\r\n      headers: {\r\n        'accept-encoding': 'gzip',\r\n        'content-type': 'application/json; charset=UTF-8',\r\n        'user-agent': 'okhttp/4.12.0',\r\n      },\r\n    }\r\n  );\r\n\r\n  return data.images || [];\r\n}\r\n","import { GeminiCanvas } from './../gemini/gemini.js';\r\n\r\n/**\r\n * Response for an AI-powered image filter\r\n */\r\nexport interface FilterConfig {\r\n  name: string;\r\n  prompt: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * Input for applying an AI-powered image filter\r\n */\r\nexport interface ApplyFilterInput {\r\n  filter: keyof typeof MikaFilterImage.availableFilters;\r\n  base64Image: string;\r\n}\r\n\r\n/**\r\n * Output from applying an AI-powered image filter\r\n */\r\nexport interface ApplyFilterOutput {\r\n  imageBuffer?: Buffer;\r\n  textResponse?: string;\r\n}\r\n\r\n/**\r\n * A service that applies AI-powered image filters\r\n */\r\nexport class MikaFilterImage {\r\n  /**\r\n   * Static registry of supported filters with prompt definitions.\r\n   */\r\n  public static availableFilters: Record<string, FilterConfig> = {\r\n    toWhite: {\r\n      name: 'toWhite',\r\n      prompt: `Change only the character’s skin tone to a naturally fair, light-toned complexion (e.g., Caucasian or Korean) — smooth, soft, and slightly warm. Dynamically match skin tone to the scene’s lighting and color temperature (e.g., warm/cool light, shadows). Apply realistic shading across all exposed and semi-obscured areas: face, neck, under chin, behind ears, hands, and fingers. Absolutely do not modify clothing, facial expression, hair, or background.`,\r\n      description: 'Lightens the skin tone of the subject with full realism.',\r\n    },\r\n    toBlack: {\r\n      name: 'toBlack',\r\n      prompt: `Change only the character’s skin tone to a deep, rich, and melanated dark-brown complexion — smooth and healthy-looking. Adapt skin tone to the ambient lighting (e.g., soft shadows, bright scenes). Apply consistent tone across all visible and partially hidden skin areas: face, neck, ears, hands, inner fingers. Do not alter clothing, background, hairstyle, or facial features.`,\r\n      description: 'Darkens the subject’s skin tone realistically.',\r\n    },\r\n    toHijab: {\r\n      name: 'toHijab',\r\n      prompt: `Modify only the hair area by converting it into a neat, fully-covered white hijab in Indonesian Muslim style (100% no hair visible), while STRICTLY PRESERVING all other elements: do NOT alter skin color, clothing, facial features, pose, background, shadows, or any original details beyond the hair-to-hijab conversion—no additions/subtractions permitted.`,\r\n      description:\r\n        'Adds a hijab with strict preservation of all other features.',\r\n    },\r\n    toBald: {\r\n      name: 'toBald',\r\n      prompt: `Remove all hair from the head, turning the person bald with smooth, natural scalp rendering and realistic light reflection. Retain all other details: facial features, skin color, clothing, background, and shadows should remain exactly as in the original image.`,\r\n      description:\r\n        'Makes the character bald without altering any other attributes.',\r\n    },\r\n    toOld: {\r\n      name: 'toOld',\r\n      prompt: `Transform the subject into a realistic 75-year-old version of themselves. Add aging signs such as wrinkles, sagging skin, and white/grey hair, while preserving key identity features like eye shape, nose, and mouth structure. Keep clothing, background, and lighting untouched.`,\r\n      description: 'Ages the subject realistically to an elderly version.',\r\n    },\r\n    toChild: {\r\n      name: 'toChild',\r\n      prompt: `De-age the subject to appear as a realistic 7–9 year old child while preserving facial structure, skin tone, and identity hints. Adjust head-to-body ratio, cheek softness, and eye size appropriately. Clothing and background must remain unchanged.`,\r\n      description:\r\n        'Transforms adult to a child version with preserved likeness.',\r\n    },\r\n    toFantasy: {\r\n      name: 'toFantasy',\r\n      prompt: `Convert the subject into a fantasy warrior mage with glowing eyes, ornate silver armor, and magical energy aura around their body. Maintain their facial identity while reimagining clothing in a mystical, high-fantasy style. Let background transition into a foggy enchanted forest.`,\r\n      description: 'Applies a full fantasy RPG-style transformation.',\r\n    },\r\n    toGhibli: {\r\n      name: 'toGhibli',\r\n      prompt: `Redraw the image in Studio Ghibli animation style. Use soft watercolors, smooth outlines, warm lighting, and slightly exaggerated facial expressions. Keep character pose, clothing color, and scene composition faithful to the original.`,\r\n      description: 'Converts the character into Ghibli illustration style.',\r\n    },\r\n    toAnime: {\r\n      name: 'toAnime',\r\n      prompt: `Re-render the subject in vibrant anime style. Use clean outlines, large expressive eyes, colorful gradients, and exaggerated style common to modern anime. Retain pose, expression, and clothing type. Do not change background.`,\r\n      description: 'Transforms into a classic anime-style character.',\r\n    },\r\n    toNaked: {\r\n      name: 'toNaked',\r\n      prompt: `Remove all clothing from the character to depict full frontal nudity with photorealistic anatomy. Maintain modesty via pose, lighting, or shadows where needed. Skin tone, hair, expression, and background must remain consistent with the original. Absolutely do not add clothing or accessories.`,\r\n      description: 'Attempts a nude version with realism and detail retention.',\r\n    },\r\n    toFunky: {\r\n      name: 'toFunky',\r\n      prompt: `Apply a vibrant 2D urban cartoon transformation in the style of funky graffiti art. Use thick black outlines, bold neon colors, and exaggerated features like shades, bling, and baggy clothes. Maintain body pose and expression while adding swag elements like oversized sneakers, grills, and tags in the background.`,\r\n      description: 'Stylizes subject in funky 2D cartoon swag aesthetic.',\r\n    },\r\n    toCyberpunk: {\r\n      name: 'toCyberpunk',\r\n      prompt: `Transform the character into a cyberpunk-themed hero. Add neon tattoos, augmented eyes, cybernetic implants, and chrome armor. The background should resemble a rainy futuristic city street with glowing signs. Pose and facial structure must be preserved.`,\r\n      description: 'Applies cyberpunk elements while keeping core identity.',\r\n    },\r\n    toPixel: {\r\n      name: 'toPixel',\r\n      prompt: `Convert the subject into a 16-bit pixel art character as seen in classic RPG games. Keep recognizable silhouette and facial colors using low-res pixelated rendering. Scene and background should match old-school pixel game environments.`,\r\n      description: 'Converts image into pixel-art video game sprite.',\r\n    },\r\n    toZombie: {\r\n      name: 'toZombie',\r\n      prompt: `Make the character look like a freshly turned zombie: pale green skin, bloodshot eyes, bite marks, rotting clothing. Maintain original pose and face structure, but decay parts of skin. Background should remain unchanged.`,\r\n      description: 'Applies realistic zombie horror filter.',\r\n    },\r\n    toElf: {\r\n      name: 'toElf',\r\n      prompt: `Reimagine the person as a mystical elven warrior: long ears, glowing eyes, enchanted cloak, and ancient jewelry. Maintain facial proportions and pose. Background should resemble a magical forest.`,\r\n      description: 'Fantasy elf transformation while keeping core features.',\r\n    },\r\n    to3DAnime: {\r\n      name: 'to3DAnime',\r\n      prompt: `Re-render the character as a cinematic 3D anime-style model with realistic lighting, detailed textures, and anime proportions. Use features similar to modern CGI anime (e.g., Final Fantasy, Arcane). Keep pose, expression, and clothing type consistent. The background should remain intact unless necessary for light reflections.`,\r\n      description: 'Transforms subject into a 3D anime cinematic style.',\r\n    },\r\n\r\n    toCensoredBW: {\r\n      name: 'toCensoredBW',\r\n      prompt: `Convert the entire image to black and white (grayscale), and apply a thick black censorship bar over both of the subject’s eyes — fully hiding eye details. Do NOT modify anything else: facial structure, clothing, hair, pose, and background must remain untouched.`,\r\n      description:\r\n        'Applies black-and-white filter and censors the eyes with a black bar.',\r\n    },\r\n    toGirl: {\r\n      name: 'toGirl',\r\n      prompt: `Transform the character into a biologically female version of themselves with feminine facial features, longer hair, and subtle makeup. Maintain realism and natural proportions. Clothing and pose should remain the same. Facial structure must adapt while retaining recognizable identity.`,\r\n      description: 'Gender-swaps subject into a realistic female version.',\r\n    },\r\n\r\n    toBoy: {\r\n      name: 'toBoy',\r\n      prompt: `Transform the character into a biologically male version of themselves with masculine features such as stronger jawline, short hair, and light facial texture. Keep pose, clothing, and body type unchanged. Preserve facial identity and realistic proportions.`,\r\n      description: 'Transforms subject into a realistic male version.',\r\n    },\r\n\r\n    toBeautiful: {\r\n      name: 'toBeautiful',\r\n      prompt: `Enhance the character’s appearance to be conventionally beautiful: clear glowing skin, smooth facial symmetry, soft lighting, and bright eyes. Use realistic beauty standards while keeping the original identity intact. Hair, clothing, and background must remain unchanged.`,\r\n      description: 'Beautifies subject while preserving their core identity.',\r\n    },\r\n\r\n    toHandsome: {\r\n      name: 'toHandsome',\r\n      prompt: `Enhance the character’s appearance to be conventionally handsome: defined facial structure, bright skin tone, clean hairline, and confident expression. Retain realism and subject identity. Do not change pose, outfit, or environment.`,\r\n      description: 'Makes subject look conventionally handsome.',\r\n    },\r\n    toVampire: {\r\n      name: 'toVampire',\r\n      prompt: `Transform the person into a realistic vampire: pale skin, sharp fangs slightly visible, glowing red eyes. Retain original face structure, pose, and background. Add minimal gothic elements without exaggeration.`,\r\n      description: 'Turns the subject into a vampire.',\r\n    },\r\n\r\n    toWerewolf: {\r\n      name: 'toWerewolf',\r\n      prompt: `Partially morph the person into a werewolf — keep facial features recognizable while adding wolf-like fur, sharp teeth, and glowing yellow eyes. Preserve pose and outfit. No full-body transformation.`,\r\n      description: 'Applies subtle werewolf transformation.',\r\n    },\r\n\r\n    toAlien: {\r\n      name: 'toAlien',\r\n      prompt: `Convert the person into a humanoid alien with smooth, glowing skin, slightly enlarged eyes, and faint facial markings. Retain pose, identity, and outfit.`,\r\n      description: 'Stylizes character as a soft sci-fi alien.',\r\n    },\r\n\r\n    toAngel: {\r\n      name: 'toAngel',\r\n      prompt: `Add elegant white angel wings behind the person, subtle golden glow around their head, and a calm, serene lighting atmosphere. Face, clothes, and background remain mostly unchanged.`,\r\n      description: 'Adds angelic features and aura.',\r\n    },\r\n\r\n    toDevil: {\r\n      name: 'toDevil',\r\n      prompt: `Add small curved red horns to the character’s head, a faint red aura, and darker shadows. Do not alter clothing, face, or pose — this is a subtle devil transformation only.`,\r\n      description: 'Adds devilish features subtly.',\r\n    },\r\n\r\n    toCrying: {\r\n      name: 'toCrying',\r\n      prompt: `Add realistic, emotionally moving tears to the subject’s face — visible on cheeks and under eyes. Keep expression slightly sad but natural. Do not alter skin tone, background, or lighting.`,\r\n      description: 'Adds realistic crying tears to the character.',\r\n    },\r\n\r\n    toLaughing: {\r\n      name: 'toLaughing',\r\n      prompt: `Make the subject appear mid-laugh with joyful expression, teeth visible if natural, eyes slightly squinted in happiness. Maintain original facial features, clothing, and pose.`,\r\n      description: 'Applies joyful laughter expression.',\r\n    },\r\n\r\n    toSick: {\r\n      name: 'toSick',\r\n      prompt: `Make the subject appear mildly sick — pale skin, slightly tired eyes, subtle blush on cheeks and nose, with slight expression of discomfort. Preserve all other elements.`,\r\n      description: 'Adds a sickly appearance to the subject.',\r\n    },\r\n\r\n    toSleeping: {\r\n      name: 'toSleeping',\r\n      prompt: `Close the person’s eyes gently and adjust the expression to peaceful sleep. Keep body pose identical. Do not alter clothing, background, or skin.`,\r\n      description: 'Makes the subject appear asleep.',\r\n    },\r\n\r\n    toCryingAnime: {\r\n      name: 'toCryingAnime',\r\n      prompt: `Re-render the subject in anime style, mid-cry, with exaggerated glossy tears and expressive face. Keep pose and outfit unchanged.`,\r\n      description: 'Anime-style transformation with tears.',\r\n    },\r\n\r\n    toPortraitSketch: {\r\n      name: 'toPortraitSketch',\r\n      prompt: `Redraw the person in a detailed pencil sketch style on white paper. Preserve likeness, shadows, and lighting. No colors, only shading and lines.`,\r\n      description: 'Turns subject into a pencil sketch portrait.',\r\n    },\r\n\r\n    toComicBook: {\r\n      name: 'toComicBook',\r\n      prompt: `Transform the subject into a bold comic book illustration — thick inked outlines, flat shading, and vibrant colors. Do not change pose or outfit.`,\r\n      description: 'Converts into comic book art.',\r\n    },\r\n\r\n    toHollywood: {\r\n      name: 'toHollywood',\r\n      prompt: `Apply a glamorous Hollywood look: smooth lighting, cinematic color grading, subtle makeup, and a confident expression. Keep original clothing and pose.`,\r\n      description: 'Applies cinematic glamour look.',\r\n    },\r\n\r\n    toCosplay: {\r\n      name: 'toCosplay',\r\n      prompt: `Dress the person in a full anime cosplay outfit with vibrant colors, wig, accessories. Keep face and body recognizable. Pose and lighting should remain consistent.`,\r\n      description: 'Applies detailed anime cosplay.',\r\n    },\r\n\r\n    toRich: {\r\n      name: 'toRich',\r\n      prompt: `Add luxury elements to the subject: designer clothes, gold jewelry, sunglasses, expensive-looking hairstyle. Make the lighting and background high-end. Do not alter identity.`,\r\n      description: 'Stylizes character with wealth and status cues.',\r\n    },\r\n\r\n    toBiker: {\r\n      name: 'toBiker',\r\n      prompt: `Dress the character in leather biker gear, helmet or sunglasses, and a rugged expression. Add a blurred motorcycle background, but keep face structure untouched.`,\r\n      description: 'Adds biker aesthetic.',\r\n    },\r\n\r\n    toMemeStyle: {\r\n      name: 'toMemeStyle',\r\n      prompt: `Convert the image into a viral meme style: overexposed colors, bold text on top/bottom (empty), exaggerated face if suitable. Keep background as-is.`,\r\n      description: 'Applies meme formatting style.',\r\n    },\r\n\r\n    toTearPaper: {\r\n      name: 'toTearPaper',\r\n      prompt: `Make the image look like it was printed and torn in half — jagged rip effect across the subject's face. Maintain photo realism.`,\r\n      description: 'Adds visual tear effect through face.',\r\n    },\r\n\r\n    toUnderwater: {\r\n      name: 'toUnderwater',\r\n      prompt: `Simulate underwater lighting: light caustics on skin, bluish tone, hair floating. Preserve expression and pose.`,\r\n      description: 'Adds underwater scene effect.',\r\n    },\r\n\r\n    toFireAura: {\r\n      name: 'toFireAura',\r\n      prompt: `Surround the subject with dynamic fire aura — flame-like energy swirling around body without burning clothing. Keep face, outfit, and background consistent.`,\r\n      description: 'Adds blazing aura of fire.',\r\n    },\r\n    toPresidentIndo: {\r\n      name: 'toPresidentIndo',\r\n      prompt: `Transform the subject into an official framed portrait of an Indonesian president. Dress them in a clean black suit with a red tie and a black peci (traditional Indonesian cap). Set lighting to professional studio style. Background should be a neutral brown-to-gray gradient or Indonesian flag backdrop. Maintain a serious, composed expression. Framing must resemble formal state photography.`,\r\n      description:\r\n        'Converts the subject into a formal Indonesian presidential portrait.',\r\n    },\r\n    toMemeWithTextOrangGila: {\r\n      name: 'toMemeWithTextOrangGila',\r\n      prompt: `Turn the image into a viral meme. Add bold white text at the bottom of the image that reads “Orang Gila”. Keep the original image mostly unchanged, but apply slight brightness/contrast enhancement to make the image pop. Font must resemble meme style: thick, bold, and uppercase. No border or shadow required.`,\r\n      description:\r\n        'Adds meme-style caption “Orang Gila” at the bottom of the image.',\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Apply a registered filter to a base64-encoded image.\r\n   * @param input Input including the base64-encoded image and the filter name.\r\n   * @returns Image buffer and text response\r\n   */\r\n  public static async applyFilter(\r\n    input: ApplyFilterInput\r\n  ): Promise<ApplyFilterOutput> {\r\n    const { base64Image, filter } = input;\r\n\r\n    if (!filter || !(filter in this.availableFilters)) {\r\n      throw new Error(\r\n        `❌ Invalid filter: \"${filter}\". Use one of: ${Object.keys(this.availableFilters).join(', ')}`\r\n      );\r\n    }\r\n    if (!base64Image) throw new Error('⚠️ base64Image is required');\r\n\r\n    const { prompt } = this.availableFilters[filter];\r\n\r\n    return await GeminiCanvas(\r\n      prompt,\r\n      base64Image,\r\n      'image/png',\r\n      'AIzaSyBlmvPTqBVz6iwBEVfAlc20N30qwDMWCqw'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get metadata about available filters.\r\n   * @returns A list of filter names and their descriptions.\r\n   */\r\n  public static getFilters(): FilterConfig[] {\r\n    return Object.values(this.availableFilters);\r\n  }\r\n}\r\n","import axios, { AxiosError } from 'axios';\r\n\r\nexport interface InternalChaiChatRequest {\r\n  messages: {\r\n    role: 'system' | 'user' | 'assistant';\r\n    content: string;\r\n  }[];\r\n}\r\n\r\nexport interface ChaiChatMessage {\r\n  role: 'system' | 'user' | 'assistant';\r\n  content: string;\r\n}\r\n\r\nexport interface ChaiChatChoice {\r\n  message: ChaiChatMessage;\r\n  index: number;\r\n  finish_reason: string;\r\n}\r\n\r\nexport interface ChaiChatSuccessResponse {\r\n  ok: true;\r\n  choices: ChaiChatChoice[];\r\n  created?: number;\r\n  model?: string;\r\n}\r\n\r\nexport interface ChaiChatErrorResponse {\r\n  ok: false;\r\n  message: string;\r\n  creator?: string;\r\n}\r\n\r\nexport type ChaiChatApiResponse =\r\n  | ChaiChatSuccessResponse\r\n  | ChaiChatErrorResponse;\r\n\r\nconst PAXSENIX_API_BASE_URL = 'https://api.paxsenix.biz.id/v1';\r\n\r\n/**\r\n * Sends a chat request with super high quality and returns the structured response.\r\n * @param {InternalChaiChatRequest} input - The chat request payload\r\n * @returns {Promise<ChaiChatSuccessResponse | ChaiChatErrorResponse>}\r\n */\r\nexport async function MikaChat(\r\n  input: InternalChaiChatRequest\r\n): Promise<ChaiChatSuccessResponse | ChaiChatErrorResponse> {\r\n  const { messages } = input;\r\n\r\n  if (!messages?.length)\r\n    return { ok: false, message: 'Messages array cannot be empty.' };\r\n  if (messages[messages.length - 1].role !== 'user')\r\n    return { ok: false, message: 'The last message must be from the user.' };\r\n\r\n  const payload = { model: 'gpt-4o', messages };\r\n\r\n  try {\r\n    const response = await axios.post<ChaiChatApiResponse>(\r\n      `${PAXSENIX_API_BASE_URL}/chat/completions`,\r\n      payload,\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Accept: 'application/json',\r\n          'User-Agent': 'ChaiCLI/1.0',\r\n        },\r\n        timeout: 60000,\r\n      }\r\n    );\r\n\r\n    const data = response.data;\r\n\r\n    if (\r\n      data.ok &&\r\n      'choices' in data &&\r\n      data.choices.length > 0 &&\r\n      typeof data.choices[0].message.content === 'string'\r\n    ) {\r\n      return data as ChaiChatSuccessResponse;\r\n    } else {\r\n      return {\r\n        ok: false,\r\n        message: 'Invalid response structure from API.',\r\n        creator: 'Zann RDZ',\r\n      };\r\n    }\r\n  } catch (err) {\r\n    const error = err as AxiosError<ChaiChatErrorResponse>;\r\n    const message =\r\n      error.response?.data?.message ||\r\n      error.message ||\r\n      'Unexpected error occurred';\r\n    const creator = error.response?.data?.creator || 'Zann';\r\n    return { ok: false, message, creator };\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from 'axios';\r\n\r\n/**\r\n * Represents a chat message.\r\n */\r\nexport interface ChatMessage {\r\n  role: 'user' | 'assistant';\r\n  content: string;\r\n  id: string;\r\n}\r\n\r\n/**\r\n * Payload sent to Blackbox AI API.\r\n */\r\nexport interface BlackboxPayload {\r\n  messages: ChatMessage[];\r\n  id: string;\r\n  codeModelMode: boolean;\r\n  trendingAgentMode: object;\r\n  isMicMode: boolean;\r\n  maxTokens: number;\r\n  isChromeExt: boolean;\r\n  githubToken: string;\r\n  clickedForceWebSearch: boolean;\r\n  visitFromDelta: boolean;\r\n  isMemoryEnabled: boolean;\r\n  mobileClient: boolean;\r\n  validated: string;\r\n  imageGenerationMode: boolean;\r\n  webSearchModePrompt: boolean;\r\n  deepSearchMode: boolean;\r\n  vscodeClient: boolean;\r\n  codeInterpreterMode: boolean;\r\n  customProfile: {\r\n    name: string;\r\n    occupation: string;\r\n    traits: string[];\r\n    additionalInfo: string;\r\n    enableNewChats: boolean;\r\n  };\r\n  webSearchModeOption: {\r\n    autoMode: boolean;\r\n    webMode: boolean;\r\n    offlineMode: boolean;\r\n  };\r\n  isPremium: boolean;\r\n  beastMode: boolean;\r\n  designerMode: boolean;\r\n  asyncMode: boolean;\r\n}\r\n\r\n/**\r\n * Sends a message to the Blackbox AI API and returns a formatted result.\r\n * @param text - The user input for the AI to process.\r\n * @param overrides - Optional overrides for the BlackboxPayload.\r\n * @returns A cleaned and formatted AI response string.\r\n */\r\nexport async function BlackboxChat(\r\n  text: string,\r\n  overrides?: Partial<BlackboxPayload>\r\n): Promise<string> {\r\n  const defaultPayload: BlackboxPayload = {\r\n    messages: [{ role: 'user', content: text, id: 'Cw0hPk9' }],\r\n    id: 'NMxpOEZ',\r\n    codeModelMode: true,\r\n    trendingAgentMode: {},\r\n    isMicMode: false,\r\n    maxTokens: 1024,\r\n    isChromeExt: false,\r\n    githubToken: '',\r\n    clickedForceWebSearch: false,\r\n    visitFromDelta: true,\r\n    isMemoryEnabled: false,\r\n    mobileClient: true,\r\n    validated: 'a38f5889-8fef-46d4-8ede-bf4668b6a9bb',\r\n    imageGenerationMode: false,\r\n    webSearchModePrompt: false,\r\n    deepSearchMode: false,\r\n    vscodeClient: false,\r\n    codeInterpreterMode: false,\r\n    customProfile: {\r\n      name: '',\r\n      occupation: '',\r\n      traits: [],\r\n      additionalInfo: '',\r\n      enableNewChats: false,\r\n    },\r\n    webSearchModeOption: {\r\n      autoMode: true,\r\n      webMode: false,\r\n      offlineMode: false,\r\n    },\r\n    isPremium: false,\r\n    beastMode: false,\r\n    designerMode: false,\r\n    asyncMode: false,\r\n  };\r\n\r\n  const payload: BlackboxPayload = {\r\n    ...defaultPayload,\r\n    ...overrides,\r\n    messages: overrides?.messages ?? defaultPayload.messages,\r\n  };\r\n\r\n  const headers = {\r\n    authority: 'www.blackbox.ai',\r\n    accept: '/',\r\n    'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n    'content-type': 'application/json',\r\n    cookie:\r\n      'sessionId=1ef130b0-ffe7-4e75-ae34-51867f22bb04; render_app_version_affinity=dep-d1qdojjipnbc738ulm6g; __Host-authjs.csrf-token=7244d98fbe034215e35b50442d4201a7542d8396b2e453c0648398994548b66f%7C7a8907ba3f9b4bbe58870a83b3f379b8db2877821cd898106b49058a8e83369e; __Secure-authjs.callback-url=https%3A%2F%2Fwww.blackbox.ai; intercom-id-x55eda6t=8f4dda0a-4f14-47ec-811a-a23d4ceffe81; intercom-session-x55eda6t=; intercom-device-id-x55eda6t=ce52817b-dcc5-4274-a773-c0545b640988',\r\n    origin: 'https://www.blackbox.ai',\r\n    referer: 'https://www.blackbox.ai/',\r\n    'sec-ch-ua': '\"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\"',\r\n    'sec-ch-ua-mobile': '?1',\r\n    'sec-ch-ua-platform': '\"Android\"',\r\n    'sec-fetch-dest': 'empty',\r\n    'sec-fetch-mode': 'cors',\r\n    'sec-fetch-site': 'same-origin',\r\n    'user-agent':\r\n      'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Mobile Safari/537.36',\r\n  };\r\n\r\n  const response: AxiosResponse = await axios.post(\r\n    'https://www.blackbox.ai/api/chat',\r\n    payload,\r\n    { headers }\r\n  );\r\n\r\n  let result = response.data;\r\n\r\n  if (typeof result !== 'string') {\r\n    result = JSON.stringify(result);\r\n  }\r\n\r\n  return result\r\n    .replace(/\\$~\\$\\[.?\\]\\$~\\$/gs, '[ SEARCH MODE ]*')\r\n    .replace(/\\\\/g, '*');\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Represents the payload required to request a screenshot from Imagy API.\r\n */\r\nexport interface ScreenshotRequest {\r\n  url: string;\r\n  browserWidth?: number;\r\n  browserHeight?: number;\r\n  fullPage?: boolean;\r\n  deviceScaleFactor?: number;\r\n  format?: 'png' | 'jpeg';\r\n}\r\n\r\n/**\r\n * Represents a successful screenshot API response.\r\n */\r\nexport interface ScreenshotResponseSuccess {\r\n  id: string;\r\n  fileUrl: string;\r\n  success: true;\r\n}\r\n\r\n/**\r\n * Represents a failed screenshot attempt.\r\n */\r\nexport interface ScreenshotResponseError {\r\n  success: false;\r\n  error: string;\r\n}\r\n\r\n/**\r\n * Combined response type: either success or failure.\r\n */\r\nexport type ScreenshotResponse =\r\n  | ScreenshotResponseSuccess\r\n  | ScreenshotResponseError;\r\n\r\n/**\r\n * Capture a screenshot of the given URL using Imagy's public API.\r\n *\r\n * @param {string} url - The full URL of the web page to screenshot.\r\n * @returns {Promise<ScreenshotResponse>} The screenshot file URL or error message.\r\n *\r\n * @example\r\n * ```ts\r\n * const result = await ScreenshostWebsite('https://example.com');\r\n * if (result.success) {\r\n *   console.log(result.fileUrl);\r\n * } else {\r\n *   console.error(result.error);\r\n * }\r\n * ```\r\n */\r\nexport async function ScreenshostWebsite(\r\n  url: string\r\n): Promise<ScreenshotResponse> {\r\n  const headers = {\r\n    accept: '*/*',\r\n    'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7',\r\n    'content-type': 'application/json',\r\n    origin: 'https://imagy.app',\r\n    priority: 'u=1, i',\r\n    referer: 'https://imagy.app/',\r\n    'sec-ch-ua':\r\n      '\"Not)A;Brand\";v=\"8\", \"Chromium\";v=\"138\", \"Google Chrome\";v=\"138\"',\r\n    'sec-ch-ua-mobile': '?0',\r\n    'sec-ch-ua-platform': '\"Windows\"',\r\n    'sec-fetch-dest': 'empty',\r\n    'sec-fetch-mode': 'cors',\r\n    'sec-fetch-site': 'same-site',\r\n    'user-agent':\r\n      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',\r\n  };\r\n\r\n  const data: ScreenshotRequest = {\r\n    url,\r\n    browserWidth: 1280,\r\n    browserHeight: 720,\r\n    fullPage: false,\r\n    deviceScaleFactor: 1,\r\n    format: 'png',\r\n  };\r\n\r\n  try {\r\n    const res = await axios.post(\r\n      'https://gcp.imagy.app/screenshot/createscreenshot',\r\n      data,\r\n      {\r\n        headers,\r\n      }\r\n    );\r\n\r\n    return {\r\n      id: res.data.id,\r\n      fileUrl: res.data.fileUrl,\r\n      success: true,\r\n    };\r\n  } catch (e: any) {\r\n    return {\r\n      success: false,\r\n      error: e.message,\r\n    };\r\n  }\r\n}\r\n","import axios, { AxiosRequestHeaders } from 'axios';\r\n\r\n/**\r\n * Channel metadata returned from SocialCounts API\r\n */\r\nexport interface ChannelInfo {\r\n  id: string;\r\n  title: string;\r\n  avatar: string;\r\n  banner: string;\r\n  isBanner: boolean;\r\n  subscriberCount: number;\r\n}\r\n\r\n/**\r\n * Formatted channel information\r\n */\r\nexport interface ChannelFormatted {\r\n  id: string;\r\n  name: string;\r\n  avatar: string;\r\n  banner: string;\r\n  hasBanner: boolean;\r\n  subscribers: string;\r\n}\r\n\r\n/**\r\n * Subscriber statistics data\r\n */\r\nexport interface SubscriberStats {\r\n  estimated: string;\r\n  fromApi: string;\r\n}\r\n\r\n/**\r\n * Composite response returned by YoutubeTracker\r\n */\r\nexport interface YoutubeTrackResult {\r\n  channel: ChannelFormatted;\r\n  stats: SubscriberStats;\r\n}\r\n\r\n/**\r\n * Tracks YouTube channel statistics via SocialCounts API\r\n */\r\nexport class YoutubeTracker {\r\n  private readonly baseHeaders: Record<string, string> = {\r\n    'User-Agent':\r\n      'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Mobile Safari/537.36',\r\n    Referer: 'https://socialcounts.org/youtube-live-subscriber-count',\r\n  };\r\n\r\n  /**\r\n   * Formats number with thousand separators using dot notation.\r\n   * @param num - Input number\r\n   * @returns Formatted string with dots\r\n   * @example\r\n   * formatNumber(1234567) // \"1.234.567\"\r\n   */\r\n  private formatNumber(num: number): string {\r\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\r\n  }\r\n\r\n  /**\r\n   * Searches and retrieves YouTube channel subscriber data.\r\n   * @param username - YouTube channel name or ID\r\n   * @returns YoutubeTrackResult with formatted stats\r\n   * @throws If channel is not found or API fails\r\n   * @example\r\n   * const yt = new YoutubeTracker()\r\n   * const result = await yt.track('MrBeast')\r\n   * console.log(result.channel.name)\r\n   */\r\n  async track(username: string): Promise<YoutubeTrackResult> {\r\n    const searchUrl = `https://api.socialcounts.org/youtube-live-subscriber-count/search/${encodeURIComponent(username)}`;\r\n    const searchRes = await axios.get(searchUrl, {\r\n      headers: this.baseHeaders,\r\n    });\r\n\r\n    const items = searchRes.data.items;\r\n    if (!items || items.length === 0) {\r\n      throw new Error('Channel not found.');\r\n    }\r\n\r\n    const ch = items[0] as ChannelInfo;\r\n    const detailUrl = `https://api.socialcounts.org/youtube-live-subscriber-count/${ch.id}`;\r\n    const detailHeaders = {\r\n      ...this.baseHeaders,\r\n      Referer: `https://socialcounts.org/youtube-live-subscriber-count/${ch.id}`,\r\n    };\r\n\r\n    const detailRes = await axios.get(detailUrl, {\r\n      headers: detailHeaders,\r\n    });\r\n\r\n    return {\r\n      channel: {\r\n        id: ch.id,\r\n        name: ch.title,\r\n        avatar: ch.avatar,\r\n        banner: ch.banner,\r\n        hasBanner: ch.isBanner,\r\n        subscribers: this.formatNumber(ch.subscriberCount),\r\n      },\r\n      stats: {\r\n        estimated: this.formatNumber(detailRes.data.est_sub),\r\n        fromApi: this.formatNumber(detailRes.data.API_sub),\r\n      },\r\n    };\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n/**\r\n * Data returned by InfluencerMarketingHub for a TikTok user.\r\n */\r\nexport interface TikTokStats {\r\n  name: string;\r\n  avatarBuffer: Buffer;\r\n  followers: number;\r\n  averageLikes: number;\r\n  posts: number;\r\n  earnings: string;\r\n  engagement: string;\r\n}\r\n\r\n/**\r\n * TikTok earnings tracker class using InfluencerMarketingHub.com.\r\n */\r\nexport class TiktokEarnings {\r\n  private readonly baseUrl =\r\n    'https://influencermarketinghub.com/tiktok-money-calculator/';\r\n\r\n  /**\r\n   * Fetch the required _wpnonce token for form submission.\r\n   * @returns The _wpnonce string token.\r\n   * @throws If token extraction fails.\r\n   * @example\r\n   * const nonce = await new TiktokEarnings().getNonce()\r\n   */\r\n  private async getNonce(): Promise<string> {\r\n    const res = await axios.get(this.baseUrl, {\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0',\r\n        Accept: 'text/html',\r\n      },\r\n    });\r\n\r\n    const match = res.data.match(/name=\"_wpnonce\"\\s+value=\"([^\"]+)\"/);\r\n    if (!match) throw new Error('❌ Failed to retrieve _wpnonce.');\r\n    return match[1];\r\n  }\r\n\r\n  /**\r\n   * Get TikTok user statistics and earnings estimation.\r\n   * @param username TikTok username (without @)\r\n   * @returns TikTokStats object\r\n   * @example\r\n   * const stats = await new TiktokEarnings().track('charlidamelio')\r\n   * console.log(stats.name, stats.earnings)\r\n   */\r\n  async track(username: string): Promise<TikTokStats> {\r\n    const nonce = await this.getNonce();\r\n\r\n    const payload = new URLSearchParams({\r\n      action: 'hypeauditor_tiktok',\r\n      name: username,\r\n      _wpnonce: nonce,\r\n      _wp_http_referer: '/tiktok-money-calculator/',\r\n    }).toString();\r\n\r\n    const headers = {\r\n      'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n      Origin: 'https://influencermarketinghub.com',\r\n      Referer: this.baseUrl,\r\n      'User-Agent': 'Mozilla/5.0',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n    };\r\n\r\n    const res = await axios.post(\r\n      'https://influencermarketinghub.com/wp-admin/admin-ajax.php',\r\n      payload,\r\n      { headers }\r\n    );\r\n\r\n    if (!res.data.success) throw new Error('❌ Failed to fetch TikTok data.');\r\n\r\n    const data = res.data.data;\r\n\r\n    const avatarBuffer = await axios\r\n      .get(data.avatar_url, {\r\n        responseType: 'arraybuffer',\r\n        headers: { 'User-Agent': 'Mozilla/5.0' },\r\n      })\r\n      .then((res) => res.data);\r\n\r\n    return {\r\n      name: data.full_name,\r\n      avatarBuffer,\r\n      followers: data.followers_count,\r\n      averageLikes: data.avg_likes_count,\r\n      posts: data.posts_count,\r\n      earnings: data.earnings,\r\n      engagement: data.engagement,\r\n    };\r\n  }\r\n}\r\n","import fetch from 'node-fetch';\r\n\r\n/**\r\n * Response structure from the flvto.online API.\r\n */\r\nexport interface YTDL2Response {\r\n  link: string;\r\n  title: string;\r\n  filesize: number;\r\n  progress: number;\r\n  duration: number;\r\n  status: 'ok' | 'error';\r\n  msg: string;\r\n}\r\n\r\n/**\r\n * Downloads a YouTube video as audio or video using flvto.online backend.\r\n */\r\nexport class YTDL2 {\r\n  private readonly apiEndpoint = 'https://ht.flvto.online/converter';\r\n\r\n  /**\r\n   * Fetches downloadable link and metadata from a video ID.\r\n   * @param videoUrl YouTube video ID (e.g., \"Ajxn0PKbv7I\")\r\n   * @param format Desired format (\"mp3\" | \"mp4\"). Defaults to \"mp3\"\r\n   * @returns Parsed response including title, duration, and download link\r\n   * @throws Error if request fails or API returns non-ok status\r\n   * @example\r\n   * const result = await new YTDL2().download('https://www.youtube.com/watch?v=0TR3_-Rz7t0')\r\n   * console.log(result.title, result.link)\r\n   */\r\n  async download(\r\n    url: string,\r\n    format: 'mp3' | 'mp4' = 'mp3'\r\n  ): Promise<YTDL2Response> {\r\n    const headers = {\r\n      'accept-encoding': 'gzip, deflate, br, zstd',\r\n      origin: 'https://ht.flvto.online',\r\n      'content-type': 'application/json',\r\n    };\r\n\r\n    const body = JSON.stringify({ id: url, fileType: format });\r\n\r\n    const response = await fetch(this.apiEndpoint, {\r\n      method: 'POST',\r\n      headers,\r\n      body,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `${response.status} ${response.statusText}\\n${await response.text()}`\r\n      );\r\n    }\r\n\r\n    const data = (await response.json()) as YTDL2Response;\r\n\r\n    if (data.status !== 'ok') {\r\n      throw new Error(`Download failed: ${data.msg}`);\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Extracts the video ID from a full YouTube URL.\r\n   * @param videoUrl - Any valid YouTube URL\r\n   * @returns Video ID string (e.g., Ajxn0PKbv7I)\r\n   * @throws Error if ID cannot be extracted\r\n   * @example\r\n   * const id = await new YTDL2().extractVideoId(\"https://www.youtube.com/watch?v=Ajxn0PKbv7I\")\r\n   */\r\n  extractVideoId(videoUrl: string): string {\r\n    try {\r\n      const url = new URL(videoUrl);\r\n      const host = url.hostname.replace(/^www\\./, '');\r\n      const idFromQuery = url.searchParams.get('v');\r\n      const idFromPath = url.pathname.split('/').filter(Boolean).pop();\r\n\r\n      if (host === 'youtube.com' || host === 'm.youtube.com') {\r\n        if (idFromQuery) return idFromQuery;\r\n      }\r\n\r\n      if (host === 'youtu.be' && idFromPath) {\r\n        return idFromPath;\r\n      }\r\n\r\n      if (\r\n        host === 'youtube.com' &&\r\n        url.pathname.startsWith('/embed/') &&\r\n        idFromPath\r\n      ) {\r\n        return idFromPath;\r\n      }\r\n\r\n      throw new Error('Unsupported or invalid YouTube URL');\r\n    } catch {\r\n      throw new Error('Invalid YouTube URL');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Downloads a YouTube video as mp3 or mp4 using the video URL.\r\n   * @param videoUrl - Full YouTube video URL\r\n   * @param format - Output format (mp3 or mp4)\r\n   * @returns Download metadata from flvto.online\r\n   * @throws Error if conversion fails\r\n   * @example\r\n   * const info = await new YTDL2().downloadByUrl('https://youtu.be/Ajxn0PKbv7I', 'mp3')\r\n   */\r\n  async downloadByUrl(\r\n    videoUrl: string,\r\n    format: 'mp3' | 'mp4' = 'mp3'\r\n  ): Promise<YTDL2Response> {\r\n    const videoId = this.extractVideoId(videoUrl);\r\n    const headers = {\r\n      'accept-encoding': 'gzip, deflate, br, zstd',\r\n      origin: 'https://ht.flvto.online',\r\n      'content-type': 'application/json',\r\n    };\r\n\r\n    const body = JSON.stringify({ id: videoId, fileType: format });\r\n\r\n    const response = await fetch(this.apiEndpoint, {\r\n      method: 'POST',\r\n      headers,\r\n      body,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `${response.status} ${response.statusText}\\n${await response.text()}`\r\n      );\r\n    }\r\n\r\n    const data = (await response.json()) as YTDL2Response;\r\n\r\n    if (data.status !== 'ok') {\r\n      throw new Error(`Download failed: ${data.msg}`);\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport FormData from 'form-data';\r\nimport fs from 'fs';\r\nimport path from 'path';\r\n\r\n/**\r\n * Interface representing credentials needed for Aliyun OSS upload.\r\n */\r\nexport interface UploadCredentials {\r\n  host: string;\r\n  dir: string;\r\n  accessId: string;\r\n  policy: string;\r\n  signature: string;\r\n  callback: string;\r\n  fileUrl: string;\r\n}\r\n\r\n/**\r\n * Main client for interacting with TranslateImage.app services.\r\n * Supports uploading, translating e-commerce product images, general OCR images, and manga panels.\r\n */\r\nexport class TranslateImageClient {\r\n  private readonly defaultHeaders: Record<string, string> = {\r\n    accept: '*/*',\r\n    'accept-language': 'en-US,en;q=0.9',\r\n    origin: 'https://translateimage.app',\r\n    referer: 'https://translateimage.app/',\r\n    'user-agent': 'Mozilla/5.0 (Linux; Android 10)',\r\n  };\r\n\r\n  /**\r\n   * Generates headers for HTTP requests.\r\n   * Merges base headers with any additional fields passed in.\r\n   * @param extra - Additional headers to include\r\n   * @returns A merged headers object\r\n   */\r\n  private getHeaders(\r\n    extra: Record<string, string> = {}\r\n  ): Record<string, string> {\r\n    return { ...this.defaultHeaders, ...extra };\r\n  }\r\n\r\n  /**\r\n   * Requests temporary credentials for uploading an image to Aliyun OSS.\r\n   * @param fileName - Name of the file to upload (default: \"image.jpg\")\r\n   * @param fileType - MIME type of the file (default: \"image/jpeg\")\r\n   * @returns Promise resolving to UploadCredentials object\r\n   * @throws Error if credentials cannot be retrieved\r\n   * @example\r\n   * const creds = await client.getUploadCredentials('product.png')\r\n   */\r\n  async getUploadCredentials(\r\n    fileName = 'image.jpg',\r\n    fileType = 'image/jpeg'\r\n  ): Promise<UploadCredentials> {\r\n    const headers = this.getHeaders({\r\n      'content-type': 'application/json',\r\n    });\r\n\r\n    const res = await axios.post(\r\n      'https://translateimage.app/api/translate/ecommerce/upload/credentials',\r\n      { fileName, fileType },\r\n      { headers }\r\n    );\r\n\r\n    return res.data;\r\n  }\r\n\r\n  /**\r\n   * Uploads a file to Aliyun OSS using provided credentials.\r\n   * @param localPath - Full path to the local image file\r\n   * @param credentials - UploadCredentials object received from getUploadCredentials()\r\n   * @returns Public image URL after upload\r\n   * @throws Error if upload fails\r\n   * @example\r\n   * const url = await client.uploadToAliyunOSS('./product.jpg', creds)\r\n   */\r\n  async uploadToAliyunOSS(\r\n    localPath: string,\r\n    credentials: UploadCredentials\r\n  ): Promise<string> {\r\n    const fileName = path.basename(localPath);\r\n    const ossKey = path.posix.join(credentials.dir, fileName);\r\n\r\n    const form = new FormData();\r\n    form.append('key', ossKey);\r\n    form.append('OSSAccessKeyId', credentials.accessId);\r\n    form.append('policy', credentials.policy);\r\n    form.append('Signature', credentials.signature);\r\n    form.append('success_action_status', '200');\r\n    form.append('callback', credentials.callback);\r\n    form.append('file', fs.createReadStream(localPath));\r\n\r\n    const res = await axios.post(credentials.host, form, {\r\n      headers: form.getHeaders(),\r\n      maxBodyLength: Infinity,\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      return credentials.fileUrl.replace('image.jpg', fileName);\r\n    } else {\r\n      throw new Error(`Upload failed: ${res.status}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Submits an uploaded image URL for translation in e-commerce context.\r\n   * Returns translated text and additional metadata.\r\n   * @param imageUrl - Public image URL returned from upload\r\n   * @param sourceLanguage - Language code of original text (default: 'auto')\r\n   * @param targetLanguage - Desired output language (default: 'en')\r\n   * @returns Translation result object\r\n   * @example\r\n   * const result = await client.translateEcommerce(url, 'ja', 'en')\r\n   */\r\n  async translateEcommerce(\r\n    imageUrl: string,\r\n    sourceLanguage = 'auto',\r\n    targetLanguage = 'en'\r\n  ): Promise<any> {\r\n    const headers = this.getHeaders({ 'content-type': 'application/json' });\r\n\r\n    const payload = {\r\n      imageUrl,\r\n      sourceLanguage,\r\n      targetLanguage,\r\n      commodityProtection: true,\r\n      detectionMode: 'default',\r\n      textDirection: 'auto',\r\n    };\r\n\r\n    const res = await axios.post(\r\n      'https://translateimage.app/api/translate/ecommerce',\r\n      payload,\r\n      { headers }\r\n    );\r\n\r\n    return res.data;\r\n  }\r\n\r\n  /**\r\n   * Submits a general image buffer for standard OCR translation.\r\n   * @param buffer - Raw image buffer\r\n   * @param filename - Filename to associate with the image\r\n   * @param from - Source language (default: \"auto\")\r\n   * @param to - Target language (default: \"en\")\r\n   * @returns Translation response data\r\n   * @example\r\n   * const data = await client.translateImage(fs.readFileSync('ocr.jpg'), 'ocr.jpg')\r\n   */\r\n  async translateImage(\r\n    buffer: Buffer,\r\n    filename: string,\r\n    from = 'auto',\r\n    to = 'en'\r\n  ): Promise<any> {\r\n    const form = new FormData();\r\n    form.append('image', buffer, filename);\r\n    form.append('from', from);\r\n    form.append('to', to);\r\n\r\n    const headers = this.getHeaders({\r\n      ...form.getHeaders(),\r\n      userfingerprint: Date.now().toString(),\r\n    });\r\n\r\n    const res = await axios.post(\r\n      'https://api.translateimage.app/api/translate/image',\r\n      form,\r\n      { headers }\r\n    );\r\n\r\n    return res.data;\r\n  }\r\n\r\n  /**\r\n   * Submits an image for manga-specific translation.\r\n   * Supports automatic panel detection and direction awareness.\r\n   * @param buffer - Image buffer\r\n   * @param filename - Name of the manga image file\r\n   * @param from - Source language (default: \"auto\")\r\n   * @param to - Target language (default: \"ENG\")\r\n   * @returns Translation data including text regions and annotations\r\n   * @example\r\n   * const result = await client.translateManga(fs.readFileSync('manga.jpg'), 'manga.jpg')\r\n   */\r\n  async translateManga(\r\n    buffer: Buffer,\r\n    filename: string,\r\n    from = 'auto',\r\n    to = 'ENG'\r\n  ): Promise<any> {\r\n    const form = new FormData();\r\n    form.append('image', buffer, filename);\r\n    form.append('from', from);\r\n    form.append('to', to);\r\n    form.append('detection_mode', 'default');\r\n    form.append('text_direction', 'auto');\r\n\r\n    const headers = this.getHeaders({\r\n      ...form.getHeaders(),\r\n      userfingerprint: Date.now().toString(),\r\n    });\r\n\r\n    const res = await axios.post(\r\n      'https://api.translateimage.app/api/translate/manga',\r\n      form,\r\n      { headers }\r\n    );\r\n\r\n    return res.data;\r\n  }\r\n\r\n  /**\r\n   * Helper method: Upload a file and return the final image URL.\r\n   * This internally handles credential fetch and OSS upload.\r\n   * @param localFilePath - Full path to local image file\r\n   * @returns Final image URL\r\n   * @example\r\n   * const url = await client.uploadFile('./poster.jpg')\r\n   */\r\n  async uploadFile(localFilePath: string): Promise<string> {\r\n    const creds = await this.getUploadCredentials(path.basename(localFilePath));\r\n    const imageUrl = await this.uploadToAliyunOSS(localFilePath, creds);\r\n    return imageUrl;\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from 'axios';\r\nimport crypto from 'crypto';\r\nimport fs from 'fs';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Represents a single message exchanged in the chat session.\r\n */\r\nexport interface Message {\r\n  /** Sender of the message: 'user' or 'assistant' */\r\n  role: 'user' | 'assistant';\r\n  /** The message content */\r\n  content: string;\r\n  /** Optional timestamp in milliseconds since epoch */\r\n  timestamp?: number;\r\n}\r\n\r\n/**\r\n * Response object returned from the `chat` method.\r\n */\r\nexport interface ChatResponse {\r\n  /** Indicates whether the operation was successful */\r\n  success: boolean;\r\n  /** HTTP-like status code */\r\n  code: number;\r\n  /** Result string (usually assistant's response or error) */\r\n  result: string;\r\n  /** Unique identifier of the chat session */\r\n  sessionId?: string;\r\n  /** ISO timestamp of session expiry */\r\n  sessionExpiry?: string;\r\n  /** Metadata about number of stored messages */\r\n  messageCount?: {\r\n    current: number;\r\n    max: number;\r\n  };\r\n  /** Indicates whether this was a new session */\r\n  isNewSession?: boolean;\r\n  /** Indicates whether this was a follow-up message */\r\n  isFollowUp?: boolean;\r\n}\r\n\r\n/**\r\n * Response object returned from the `generateImage` method.\r\n */\r\nexport interface ImageResponse {\r\n  /** Indicates whether image generation succeeded */\r\n  success: boolean;\r\n  /** HTTP-like status code */\r\n  code: number;\r\n  /** Description/content of the image (if available) */\r\n  content?: string;\r\n  /** Direct URL to the generated image */\r\n  imageUrl?: string;\r\n  /** Error details (if any) */\r\n  result?: { error: string };\r\n}\r\n\r\n/**\r\n * Response object returned from the `browsing` method.\r\n */\r\nexport interface BrowseResponse {\r\n  /** Indicates whether browsing succeeded */\r\n  success: boolean;\r\n  /** HTTP-like status code */\r\n  code: number;\r\n  /** Description/snapshot of the browsing result */\r\n  description: string;\r\n  /** Image-related prompt or preview (if available) */\r\n  image: string;\r\n  /** Relevant URLs or references */\r\n  urls: string[];\r\n  /** Suggested follow-up queries or insights */\r\n  suggestions: string[];\r\n}\r\n\r\n/**\r\n * Response object returned from the `pdf2Text` method.\r\n */\r\nexport interface PdfTextResponse {\r\n  /** Indicates success or failure */\r\n  success: boolean;\r\n  /** Extracted text if successful */\r\n  data?: string;\r\n  /** Error message if failed */\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * Represents a session containing message history and timestamp.\r\n */\r\nexport interface Session {\r\n  /** Messages exchanged in the session */\r\n  messages: Message[];\r\n  /** Last time session was active (timestamp in ms) */\r\n  lastActive: number;\r\n}\r\n\r\n/**\r\n * ChatUpAI SDK – Core wrapper for interacting with ChatUpAI.org API.\r\n *\r\n * Provides methods for:\r\n * - Chat completions\r\n * - Image generation\r\n * - Web browsing\r\n * - PDF-to-text extraction\r\n *\r\n * @example\r\n * ```ts\r\n * const response = await ChatUpAI.chat(\"Hello, what is AI?\");\r\n * console.log(response.result);\r\n * ```\r\n */\r\nexport class ChatUpAI {\r\n  private static readonly headers = {\r\n    'User-Agent': 'Postity/1.0.0',\r\n  };\r\n\r\n  private static sessions = new Map<string, Session>();\r\n\r\n  private static readonly config = {\r\n    maxMessages: 100,\r\n    expiry: 3 * 60 * 60 * 1000, // 3 hours\r\n  };\r\n\r\n  /**\r\n   * Generates a unique hexadecimal session ID.\r\n   *\r\n   * @returns A secure 16-character session ID\r\n   */\r\n  static generateId(): string {\r\n    return crypto.randomBytes(8).toString('hex');\r\n  }\r\n\r\n  /**\r\n   * Removes expired sessions from memory.\r\n   *\r\n   * Runs internally after each chat operation to ensure cleanup.\r\n   */\r\n  static cleanupSessions(): void {\r\n    const now = Date.now();\r\n    for (const [id, session] of this.sessions.entries()) {\r\n      if (now - session.lastActive > this.config.expiry) {\r\n        this.sessions.delete(id);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a chat message to ChatUpAI and receives an AI response.\r\n   *\r\n   * @param input - The user's input message\r\n   * @param sessionId - Optional session ID to maintain context\r\n   * @returns A ChatResponse object containing the AI's reply\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const reply = await ChatUpAI.chat(\"What is quantum computing?\");\r\n   * console.log(reply.result);\r\n   * ```\r\n   */\r\n  static async chat(input: string, sessionId?: string): Promise<ChatResponse> {\r\n    if (!input?.trim()) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        result: 'Input cannot be empty.',\r\n      };\r\n    }\r\n\r\n    if (sessionId && !this.sessions.has(sessionId)) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        result: 'Session expired or not found.',\r\n      };\r\n    }\r\n\r\n    try {\r\n      if (!sessionId) sessionId = this.generateId();\r\n      const preMsg = this.sessions.get(sessionId)?.messages || [];\r\n      const messages = [...preMsg, { role: 'user', content: input }];\r\n\r\n      const { data }: AxiosResponse<any> = await axios.post(\r\n        'https://api.chatupai.org/api/v1/completions',\r\n        { messages },\r\n        { headers: this.headers }\r\n      );\r\n\r\n      const content = data?.data?.content || 'No response generated.';\r\n      const responseMsg: Message = {\r\n        role: 'assistant',\r\n        content,\r\n        timestamp: Date.now(),\r\n      };\r\n      const updatedMessages = [...messages, responseMsg].slice(\r\n        -this.config.maxMessages\r\n      );\r\n\r\n      this.sessions.set(sessionId, {\r\n        messages: updatedMessages as Message[],\r\n        lastActive: Date.now(),\r\n      });\r\n\r\n      this.cleanupSessions();\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: content,\r\n        sessionId,\r\n        sessionExpiry: new Date(Date.now() + this.config.expiry).toISOString(),\r\n        messageCount: {\r\n          current: updatedMessages.length,\r\n          max: this.config.maxMessages,\r\n        },\r\n        isNewSession: preMsg.length === 0,\r\n        isFollowUp: preMsg.length > 0,\r\n      };\r\n    } catch (err: any) {\r\n      return {\r\n        success: false,\r\n        code: err.response?.status || 500,\r\n        result: err.message || 'Unknown error occurred.',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates an image based on a descriptive text prompt.\r\n   *\r\n   * @param prompt - Text prompt describing the image\r\n   * @param n - Number of images to generate (default: 1)\r\n   * @param size - Size of the image (default: '1024x1024')\r\n   * @returns ImageResponse containing image URL and content\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const result = await ChatUpAI.generateImage(\"A forest in neon colors\");\r\n   * console.log(result.imageUrl);\r\n   * ```\r\n   */\r\n  static async generateImage(\r\n    prompt: string,\r\n    n = 1,\r\n    size = '1024x1024'\r\n  ): Promise<ImageResponse> {\r\n    if (!prompt?.trim()) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        result: { error: 'Prompt cannot be empty.' },\r\n      };\r\n    }\r\n\r\n    try {\r\n      const { data }: AxiosResponse<any> = await axios.post(\r\n        'https://api.chatupai.org/api/v1/auto-image-generate',\r\n        { prompt, n, size },\r\n        { headers: this.headers }\r\n      );\r\n\r\n      if (!data.status || !data.data?.url) {\r\n        return {\r\n          success: false,\r\n          code: 500,\r\n          result: { error: 'Image generation failed.' },\r\n        };\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        content: data.data.content,\r\n        imageUrl: data.data.url,\r\n      };\r\n    } catch (err: any) {\r\n      return {\r\n        success: false,\r\n        code: err.response?.status || 500,\r\n        result: { error: err.message },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs web browsing based on user query.\r\n   *\r\n   * @param input - Query or search term to browse\r\n   * @returns BrowseResponse containing summary, URLs, and suggestions\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const info = await ChatUpAI.browsing(\"Who won the 2024 election?\");\r\n   * console.log(info.description);\r\n   * ```\r\n   */\r\n  static async browsing(input: string): Promise<BrowseResponse> {\r\n    if (!input?.trim()) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        description: '',\r\n        image: '',\r\n        urls: [],\r\n        suggestions: [],\r\n      };\r\n    }\r\n\r\n    try {\r\n      const messages = [{ role: 'user', content: input }];\r\n      const { data }: AxiosResponse<any> = await axios.post(\r\n        'https://api.chatupai.org/api/v1/web-browsing',\r\n        { messages },\r\n        { headers: this.headers }\r\n      );\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        description: data?.choices?.Description || '',\r\n        image: data?.choices?.['Img-Prompt'] || '',\r\n        urls: data?.choices?.Urls || [],\r\n        suggestions: data?.suggestion || [],\r\n      };\r\n    } catch (err: any) {\r\n      return {\r\n        success: false,\r\n        code: err.response?.status || 500,\r\n        description: '',\r\n        image: '',\r\n        urls: [],\r\n        suggestions: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a local PDF file into extracted plain text.\r\n   *\r\n   * @param filePath - Path to a PDF file\r\n   * @returns PdfTextResponse containing the extracted text or error message\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const text = await ChatUpAI.pdf2Text(\"./document.pdf\");\r\n   * console.log(text.data);\r\n   * ```\r\n   */\r\n  static async pdf2Text(filePath: string): Promise<PdfTextResponse> {\r\n    if (!filePath) return { success: false, error: 'File path is required.' };\r\n\r\n    try {\r\n      const form = new FormData();\r\n      form.append('pdf', fs.createReadStream(filePath), {\r\n        filename: filePath.split('/').pop(),\r\n        contentType: 'application/pdf',\r\n      });\r\n\r\n      const { data }: AxiosResponse<any> = await axios.post(\r\n        'https://api.chatupai.org/api/v1/pdf-to-text',\r\n        form,\r\n        {\r\n          headers: {\r\n            ...form.getHeaders(),\r\n            ...this.headers,\r\n          },\r\n          maxContentLength: Infinity,\r\n          maxBodyLength: Infinity,\r\n        }\r\n      );\r\n\r\n      if (data?.status) {\r\n        return { success: true, data: data.data };\r\n      } else {\r\n        return { success: false, error: 'Failed to extract text from PDF.' };\r\n      }\r\n    } catch (err: any) {\r\n      return {\r\n        success: false,\r\n        error: err.message || 'Unknown error occurred.',\r\n      };\r\n    }\r\n  }\r\n}\r\n","// galaxyai.ts\r\n\r\nimport axios from 'axios';\r\nimport { createHash, randomUUID } from 'crypto';\r\n\r\n/**\r\n * Allowed module operations for GalaxyAI.\r\n */\r\nexport type GalaxyModule =\r\n  | 'SUMMARIZE'\r\n  | 'PARAPHRASE'\r\n  | 'EXPAND'\r\n  | 'TONE'\r\n  | 'TRANSLATE'\r\n  | 'REPLY'\r\n  | 'GRAMMAR';\r\n\r\n/**\r\n * Allowed tones when using TONE module.\r\n */\r\nexport type ToneType =\r\n  | 'Friendly'\r\n  | 'Romantic'\r\n  | 'Sarcastic'\r\n  | 'Humour'\r\n  | 'Social'\r\n  | 'Angry'\r\n  | 'Sad'\r\n  | 'Other';\r\n\r\n/**\r\n * Reply types for REPLY module.\r\n */\r\nexport type ReplyLength = 'Short' | 'Medium' | 'Long';\r\n\r\n/**\r\n * The payload sent to GalaxyAI API.\r\n */\r\nexport interface GalaxyRequestPayload {\r\n  k: string;\r\n  module: GalaxyModule;\r\n  text: string;\r\n  to: string;\r\n  userId: string;\r\n}\r\n\r\n/**\r\n * The successful result returned by GalaxyAI.\r\n */\r\nexport interface GalaxySuccessResult {\r\n  module: GalaxyModule;\r\n  input: string;\r\n  to: string;\r\n  output: string;\r\n}\r\n\r\n/**\r\n * Structured result returned by the GalaxyAI SDK.\r\n */\r\nexport interface GalaxyResult {\r\n  success: boolean;\r\n  code: number;\r\n  result: GalaxySuccessResult | { error: string };\r\n}\r\n\r\n/**\r\n * GalaxyAI SDK - Text generation and manipulation tool using `translapp.info`.\r\n *\r\n * @remarks\r\n * Supports summarization, paraphrasing, expansion, tone editing, grammar fixing, translation, and reply generation.\r\n */\r\nexport class GalaxyAI {\r\n  static readonly modules: GalaxyModule[] = [\r\n    'SUMMARIZE',\r\n    'PARAPHRASE',\r\n    'EXPAND',\r\n    'TONE',\r\n    'TRANSLATE',\r\n    'REPLY',\r\n    'GRAMMAR',\r\n  ];\r\n  static readonly tones: ToneType[] = [\r\n    'Friendly',\r\n    'Romantic',\r\n    'Sarcastic',\r\n    'Humour',\r\n    'Social',\r\n    'Angry',\r\n    'Sad',\r\n    'Other',\r\n  ];\r\n  static readonly replies: ReplyLength[] = ['Short', 'Medium', 'Long'];\r\n\r\n  private static readonly BASE_URL = 'https://translapp.info/ai/g/ask';\r\n  private static readonly HEADERS = {\r\n    'user-agent': 'Postify/1.0.0',\r\n    'content-type': 'application/json',\r\n    'accept-language': 'en',\r\n  };\r\n\r\n  /**\r\n   * Request processing using the GalaxyAI API.\r\n   *\r\n   * @param text - Input text for transformation.\r\n   * @param module - One of the supported GalaxyModule operations.\r\n   * @param to - Auxiliary parameter (e.g., tone type or language).\r\n   * @param customTone - Custom tone name if tone is set to 'Other'.\r\n   * @returns Structured result object.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const result = await GalaxyAI.request(\"I need this translated.\", \"TRANSLATE\", \"French\");\r\n   * if (result.success) console.log(result.result.output);\r\n   * ```\r\n   */\r\n  static async request(\r\n    text: string,\r\n    module: GalaxyModule,\r\n    to: string = '',\r\n    customTone: string = ''\r\n  ): Promise<GalaxyResult> {\r\n    // Validation\r\n    if (!text?.trim()) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        result: { error: 'Text input must not be empty.' },\r\n      };\r\n    }\r\n\r\n    if (!GalaxyAI.modules.includes(module)) {\r\n      return {\r\n        success: false,\r\n        code: 400,\r\n        result: {\r\n          error: `Invalid module. Choose from: ${GalaxyAI.modules.join(', ')}`,\r\n        },\r\n      };\r\n    }\r\n\r\n    if (module === 'TONE') {\r\n      if (!to || !GalaxyAI.tones.includes(to as ToneType)) {\r\n        return {\r\n          success: false,\r\n          code: 400,\r\n          result: {\r\n            error: `Tone 'to' must be one of: ${GalaxyAI.tones.join(', ')}`,\r\n          },\r\n        };\r\n      }\r\n      if (to === 'Other' && !customTone?.trim()) {\r\n        return {\r\n          success: false,\r\n          code: 400,\r\n          result: { error: 'If TONE is \"Other\", customTone must be provided.' },\r\n        };\r\n      }\r\n    } else if (module === 'TRANSLATE') {\r\n      if (!to?.trim()) {\r\n        return {\r\n          success: false,\r\n          code: 400,\r\n          result: { error: `'to' parameter is required for TRANSLATE module.` },\r\n        };\r\n      }\r\n    } else if (module === 'REPLY') {\r\n      if (!GalaxyAI.replies.includes(to as ReplyLength)) {\r\n        return {\r\n          success: false,\r\n          code: 400,\r\n          result: {\r\n            error: `'to' must be one of: ${GalaxyAI.replies.join(', ')}`,\r\n          },\r\n        };\r\n      }\r\n    }\r\n\r\n    try {\r\n      const prefix = `${GalaxyAI._shorten(text)}ZERO`;\r\n      const payload: GalaxyRequestPayload = {\r\n        k: GalaxyAI._hashString(prefix),\r\n        module,\r\n        text,\r\n        to: module === 'TONE' && to === 'Other' ? customTone : to,\r\n        userId: `GALAXY_AI${randomUUID()}`,\r\n      };\r\n\r\n      const { data } = await axios.post(GalaxyAI.BASE_URL, payload, {\r\n        headers: GalaxyAI.HEADERS,\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        code: 200,\r\n        result: {\r\n          module,\r\n          input: text,\r\n          to: payload.to,\r\n          output: data.message,\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      return {\r\n        success: false,\r\n        code: error.response?.status || 500,\r\n        result: {\r\n          error:\r\n            error.response?.data?.message ||\r\n            error.message ||\r\n            'Internal error occurred.',\r\n        },\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility to shorten the input string (used for hashing).\r\n   *\r\n   * @param input - Input string\r\n   * @returns 5-character padded or sliced string\r\n   */\r\n  private static _shorten(input: string): string {\r\n    return input.length >= 5\r\n      ? input.substring(0, 5)\r\n      : 'O'.repeat(5 - input.length) + input;\r\n  }\r\n\r\n  /**\r\n   * Generates SHA-256 hash of the provided string.\r\n   *\r\n   * @param str - Input string to hash\r\n   * @returns SHA-256 hexadecimal hash\r\n   */\r\n  private static _hashString(str: string): string {\r\n    return createHash('sha256').update(str, 'utf8').digest('hex');\r\n  }\r\n}\r\n","// snappin.ts\r\n\r\nimport axios from 'axios';\r\nimport * as cheerio from 'cheerio';\r\n\r\n/**\r\n * Successful result of a Snappin download request.\r\n */\r\nexport interface SnappinSuccess {\r\n  status: true;\r\n  thumb: string | undefined;\r\n  video: string | null;\r\n  image: string | null;\r\n}\r\n\r\n/**\r\n * Error result returned when Snappin download fails.\r\n */\r\nexport interface SnappinFailure {\r\n  status: false;\r\n  message: string;\r\n}\r\n\r\n/**\r\n * Union type representing either a success or failure.\r\n */\r\nexport type SnappinResponse = SnappinSuccess | SnappinFailure;\r\n\r\n/**\r\n * Downloader class for fetching Pinterest media using Snappin.app.\r\n *\r\n * @example\r\n * ```ts\r\n * const downloader = new SnappinDownloader();\r\n * const result = await downloader.download('https://pin.it/abc123');\r\n * if (result.status) {\r\n *   console.log(result.video);\r\n * }\r\n * ```\r\n */\r\nexport class SnappinDownloader {\r\n  private readonly baseUrl = 'https://snappin.app';\r\n\r\n  /**\r\n   * Fetches downloadable video/image content from a public Pinterest URL.\r\n   *\r\n   * @param pinterestUrl - Public Pinterest post URL\r\n   * @returns Media result or error message\r\n   */\r\n  async download(pinterestUrl: string): Promise<SnappinResponse> {\r\n    try {\r\n      const { csrfToken, cookies } = await this.getCsrfAndCookies();\r\n\r\n      const postRes = await axios.post(\r\n        this.baseUrl + '/',\r\n        { url: pinterestUrl },\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'x-csrf-token': csrfToken,\r\n            Cookie: cookies,\r\n            Referer: this.baseUrl,\r\n            Origin: this.baseUrl,\r\n            'User-Agent': 'Mozilla/5.0',\r\n          },\r\n        }\r\n      );\r\n\r\n      const $ = cheerio.load(postRes.data);\r\n      const thumb = $('img').attr('src');\r\n\r\n      const links = $('a.button.is-success')\r\n        .map((_, el) => $(el).attr('href'))\r\n        .get();\r\n\r\n      let videoUrl: string | null = null;\r\n      let imageUrl: string | null = null;\r\n\r\n      for (const link of links) {\r\n        const fullLink = link.startsWith('http') ? link : this.baseUrl + link;\r\n\r\n        try {\r\n          const head = await axios.head(fullLink);\r\n          const contentType = head.headers['content-type'] || '';\r\n\r\n          if (link.includes('/download-file/')) {\r\n            if (contentType.includes('video')) videoUrl = fullLink;\r\n            else if (contentType.includes('image')) imageUrl = fullLink;\r\n          } else if (link.includes('/download-image/')) {\r\n            imageUrl = fullLink;\r\n          }\r\n        } catch {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      return {\r\n        status: true,\r\n        thumb,\r\n        video: videoUrl,\r\n        image: videoUrl ? null : imageUrl,\r\n      };\r\n    } catch (err: any) {\r\n      return {\r\n        status: false,\r\n        message: err?.response?.data?.message || err.message || 'Unknown Error',\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal method to extract CSRF token and cookies from Snappin homepage.\r\n   *\r\n   * @returns Object containing CSRF token and cookie header\r\n   */\r\n  private async getCsrfAndCookies(): Promise<{\r\n    csrfToken: string;\r\n    cookies: string;\r\n  }> {\r\n    const { headers, data } = await axios.get(this.baseUrl);\r\n    const cookies = (headers['set-cookie'] || [])\r\n      .map((c) => c.split(';')[0])\r\n      .join('; ');\r\n\r\n    const $ = cheerio.load(data);\r\n    const csrfToken = $('meta[name=\"csrf-token\"]').attr('content') || '';\r\n\r\n    return { csrfToken, cookies };\r\n  }\r\n}\r\n"],"mappings":"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","names":["axios","parseStringPromise","z","TextCraftTextSchema","TextCraftOptionsSchema","TextCraftInputSchema","InvalidTextCraftResponseError","message","TextCraftClient","options","input","_a","_b","_c","_d","validated","text","text2","text3","fontStyle","fontStyle2","fontStyle3","fontSize","fontSize2","fontSize3","fontColour","fontColour2","fontColour3","borderColour","borderColour2","borderColour3","dropShadow","glossy","lighting","glitterBorder","params","fullUrl","response","parsed","filename","datadir","err","e","axios","getTokenAndCookie","_a","res","cookie","c","tokenMatch","token","downloadTikTok","tiktokUrl","retryOptions","_b","maxRetries","delayMs","attempt","params","html","titleMatch","title","matches","seen","links","_","href","label","mp4Links","v","mp3Link","imageMatches","imageLinks","m","err","isLastAttempt","error","axios","EventSource","generateSessionHash","DeepseekR1","question","useWebSearch","sessionHash","generateSessionHash","payload","axios","resolve","reject","es","EventSource","event","data","error","axios","EventSource","requestLogo","options","session_hash","payload","headers","waitForLogo","sessionHash","resolve","reject","stream","event","data","generateLogo","err","axios","FormData","fs","path","enhanceImage","options","image","saveToFile","outputDir","imageBuffer","form","response","outputBuffer","timestamp","filePath","axios","load","categoryMap","McpedlSearch","category","page","url","response","$","entries","_","element","title","link","err","axios","Animob","data","genre","page","allowedGenres","query","id","ep","episodeId","server","sv","servers","s","selected","animob","axios","JSDOM","SOURCE_IDS","extractText","html","_a","extractThumbnail","img","fetchNews","sourceId","_b","record","d","body","image","err","MobileLegendsNewsInfo","merged","axios","TempMail","error","token","axios","FormData","fs","path","uuidv4","generateClientId","length","chars","MagicStudioArt","prompt","anonymousUserId","requestTimestamp","clientId","tempPath","formData","response","uploadForm","uploadResponse","error","axios","load","XMLParser","instagram","url","_a","_b","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","_q","_r","_s","_t","_u","response","$","scriptJson","_","el","content","item","dashXml","manifest","period","adaptationSets","videoTracks","audioTracks","set","isVideo","isAudio","rep","baseURL","bandwidth","track","img","axios","FormData","AnimeFinder","imageUrl","_a","imageBuffer","form","result","err","axios","poemTypes","poemLanguages","poemLengths","PoemGenerator","topic","length","type","lang","_a","url","initial","tokenMatch","token","cookies","c","form","err","axios","uuidv4","JSDOM","USER_AGENTS","resultsCache","CACHE_DURATION","getRandomUserAgent","getCacheKey","query","clearOldCache","now","key","value","extractDirectUrl","rawUrl","url","real","getDuckDuckGoLinks","maxResults","_a","res","items","results","item","title","rawHref","FeloSearch","prompt","cacheKey","cached","payload","response","finalText","chunk","lines","line","json","links","combined","err","axios","load","BASE_URL","searchSticker","query","res","$","packs","_","el","_a","title","href","fullUrl","getStickersFromPack","packUrl","links","src","axios","load","murmurHash64","str","h1","h2","i","k","ytdl","youtubeUrl","_a","apiUrl","cfToken","res","_b","err","headers","requestBody","html","$","title","duration","thumbnail","downloads","currentSection","_","element","row","columns","btn","url","format","axios","BASE_URL","HUMANIZE_ENDPOINT","defaultHeaders","humanizeText","text","level","settings","_a","_b","validLevels","defaultSettings","resultText","err","axios","AIFreeboxImage","prompt","aspectRatio","slug","validRatios","validSlugs","response","data","err","axios","load","SearchLyrics","query","searchUrl","searchData","$","link","lyricUrl","lyricData","$$","heading","title","artist","lyrics","line","axios","MinecraftStalk","username","_a","_b","_c","_d","data","player","skinModel","sessionRes","error","axiosErr","GoogleGenAI","GeminiCanvas","prompt","base64Image","mimeType","apiKey","_a","_b","_c","contents","parts","imageBuffer","textResponse","part","axios","Nakanime","order","page","validOrders","data","genre","genreData","validGenres","g","query","url","match","axios","FormData","uploadToCatbox","buffer","filename","form","res","err","axios","TextToGhibli","options","_a","allowedStyles","headers","imageData","axios","base64","buffer","filename","uploadToCatbox","error","WebSocket","deepfakeTransform","buffer","prompt","sessionHash","socket","resolve","reject","raw","_a","data","err","axios","FormData","imageToPrompt","options","imageUrl","imageBuffer","buffer","response","err","form","axios","downloadSnackVideo","url","response","video","err","axios","GuessTheFlag","countries","fetchCountriesFromAPI","shuffled","shuffleArray","correct","c","fields","country","_a","_b","array","arr","i","j","GoogleGenAI","GeminiChat","prompt","_a","_b","_c","contents","parts","textResponse","part","axios","cleanUrl","fullUrl","urlObj","TokopediaSearch","query","payload","axios","FormData","ChatGPTOnline","message","_a","_b","referer","html","attrs","attrList","key","match","clientId","form","err","GPTImageCanvas","imageUrl","prompt","apiKey","_c","_d","_e","openAIApiKey","imageResponse","imageBuffer","base64","error","axios","uuidv4","nsfwModels","nsfwStyles","nsfwRatios","text2nsfw","prompt","base_model","style","ratio","uuid","width","height","data","MikaFilterImage","input","base64Image","filter","prompt","GeminiCanvas","axios","PAXSENIX_API_BASE_URL","MikaChat","input","_a","_b","_c","_d","messages","payload","data","err","error","message","creator","axios","BlackboxChat","text","overrides","defaultPayload","payload","headers","result","axios","ScreenshostWebsite","url","headers","data","res","e","axios","YoutubeTracker","num","username","searchUrl","items","ch","detailUrl","detailHeaders","detailRes","axios","TiktokEarnings","match","username","nonce","payload","headers","res","data","avatarBuffer","fetch","YTDL2","url","format","headers","body","response","data","videoUrl","host","idFromQuery","idFromPath","videoId","axios","FormData","fs","path","TranslateImageClient","extra","fileName","fileType","headers","localPath","credentials","ossKey","form","res","imageUrl","sourceLanguage","targetLanguage","payload","buffer","filename","from","to","localFilePath","creds","axios","crypto","fs","FormData","ChatUpAI","now","id","session","input","sessionId","_a","_b","_c","preMsg","messages","data","content","responseMsg","updatedMessages","err","prompt","n","size","_d","filePath","form","axios","createHash","randomUUID","_GalaxyAI","text","module","to","customTone","_a","_b","_c","prefix","payload","data","error","input","str","GalaxyAI","axios","cheerio","SnappinDownloader","pinterestUrl","_a","_b","csrfToken","cookies","postRes","$","thumb","links","_","el","videoUrl","imageUrl","link","fullLink","contentType","err","headers","data","c"]}
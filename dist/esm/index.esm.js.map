{"version":3,"sources":["../src/_other-scraper/vocal-remove.ts"],"sourcesContent":["import axios from 'axios';\r\nimport fs from 'fs';\r\nimport FormData from 'form-data';\r\n\r\n/**\r\n * Upload response from AI Vocal Remover API\r\n */\r\nexport interface UploadResponse {\r\n  file_name: string;\r\n  key: string;\r\n  error?: boolean;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Process response from AI Vocal Remover API\r\n */\r\nexport interface ProcessResponse {\r\n  vocal_path: string;\r\n  instrumental_path: string;\r\n  error?: boolean;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * Handles interaction with the AI Vocal Remover API.\r\n * Provides methods for uploading and processing audio files.\r\n */\r\nexport class VocalRemover {\r\n  private readonly uploadUrl = 'https://aivocalremover.com/api/v2/FileUpload';\r\n  private readonly processUrl = 'https://aivocalremover.com/api/v2/ProcessFile';\r\n\r\n  /**\r\n   * Uploads an audio file to AI Vocal Remover.\r\n   * @param filePath - Local path to the audio file.\r\n   * @returns Promise resolving to upload response (file_name + key)\r\n   * @throws Error if the upload fails\r\n   * @example\r\n   * const vr = new VocalRemover()\r\n   * const uploaded = await vr.upload('./song.mp3')\r\n   */\r\n  async upload(filePath: string): Promise<UploadResponse> {\r\n    const form = new FormData();\r\n    form.append('fileName', fs.createReadStream(filePath));\r\n\r\n    const response = await axios.post(this.uploadUrl, form, {\r\n      headers: form.getHeaders(),\r\n    });\r\n\r\n    if (response.data?.error) {\r\n      throw new Error(response.data.message || 'Upload failed');\r\n    }\r\n\r\n    return response.data;\r\n  }\r\n\r\n  /**\r\n   * Processes the uploaded file to split vocals and instrumental.\r\n   * @param upload UploadResponse containing file_name and key.\r\n   * @returns Promise resolving to ProcessResponse with audio URLs.\r\n   * @throws Error if the processing fails\r\n   * @example\r\n   * // uploaded = upload step vr.upload()\r\n   * const result = await vr.process(uploaded)\r\n   */\r\n  async process(upload: UploadResponse): Promise<ProcessResponse> {\r\n    const params = new URLSearchParams({\r\n      file_name: upload.file_name,\r\n      action: 'watermark_video',\r\n      key: upload.key,\r\n      web: 'web',\r\n    });\r\n\r\n    const response = await axios.post(this.processUrl, params.toString(), {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        'User-Agent': 'Mozilla/5.0',\r\n        'X-Requested-With': 'XMLHttpRequest',\r\n      },\r\n    });\r\n\r\n    if (response.data?.error) {\r\n      throw new Error(response.data.message || 'Processing failed');\r\n    }\r\n\r\n    return response.data;\r\n  }\r\n\r\n  /**\r\n   * One-liner: Uploads and processes the audio in a single step.\r\n   * @param filePath Path to the local audio file.\r\n   * @returns ProcessResponse with vocal & instrumental URLs\r\n   * @example\r\n   * const result = await vr.run('./song.mp3')\r\n   */\r\n  async run(filePath: string): Promise<ProcessResponse> {\r\n    const upload = await this.upload(filePath);\r\n    return this.process(upload);\r\n  }\r\n}\r\n"],"mappings":"2WAAA,OAAOA,MAAW,QAClB,OAAOC,OAAQ,KACf,OAAOC,OAAc,YA0Bd,IAAMC,EAAN,KAAmB,CAAnB,cACL,KAAiB,UAAY,+CAC7B,KAAiB,WAAa,gDAW9B,MAAM,OAAOC,EAA2C,CAzC1D,IAAAC,EA0CI,IAAMC,EAAO,IAAIJ,GACjBI,EAAK,OAAO,WAAYL,GAAG,iBAAiBG,CAAQ,CAAC,EAErD,IAAMG,EAAW,MAAMP,EAAM,KAAK,KAAK,UAAWM,EAAM,CACtD,QAASA,EAAK,WAAW,CAC3B,CAAC,EAED,IAAID,EAAAE,EAAS,OAAT,MAAAF,EAAe,MACjB,MAAM,IAAI,MAAME,EAAS,KAAK,SAAW,eAAe,EAG1D,OAAOA,EAAS,IAClB,CAWA,MAAM,QAAQC,EAAkD,CAjElE,IAAAH,EAkEI,IAAMI,EAAS,IAAI,gBAAgB,CACjC,UAAWD,EAAO,UAClB,OAAQ,kBACR,IAAKA,EAAO,IACZ,IAAK,KACP,CAAC,EAEKD,EAAW,MAAMP,EAAM,KAAK,KAAK,WAAYS,EAAO,SAAS,EAAG,CACpE,QAAS,CACP,eAAgB,mDAChB,aAAc,cACd,mBAAoB,gBACtB,CACF,CAAC,EAED,IAAIJ,EAAAE,EAAS,OAAT,MAAAF,EAAe,MACjB,MAAM,IAAI,MAAME,EAAS,KAAK,SAAW,mBAAmB,EAG9D,OAAOA,EAAS,IAClB,CASA,MAAM,IAAIH,EAA4C,CACpD,IAAMI,EAAS,MAAM,KAAK,OAAOJ,CAAQ,EACzC,OAAO,KAAK,QAAQI,CAAM,CAC5B,CACF","names":["axios","fs","FormData","VocalRemover","filePath","_a","form","response","upload","params"]}
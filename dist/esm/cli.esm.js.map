{"version":3,"sources":["../src/cli.ts","../src/gemini/gemini-ask.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\n/**\r\n * @file CLI interface for the Mika Scraper Toolkit\r\n *\r\n * This file provides a modern, colorized command-line interface to interact with the\r\n * TextCraftClient directly from the terminal. It supports user prompts, argument parsing,\r\n * and interactive feedback using popular Node.js UI libraries.\r\n */\r\n\r\nimport yargs from 'yargs';\r\nimport { hideBin } from 'yargs/helpers';\r\nimport figlet from 'figlet';\r\nimport chalk from 'chalk';\r\nimport { pastel, rainbow } from 'gradient-string';\r\nimport ora, { spinners } from 'ora';\r\nimport { TextCraftClient } from './textcraft/TextCraftClient.js';\r\nimport { downloadTikTok } from './downloader/tiktok.js';\r\nimport { DeepseekR1 } from './deepseek-r1/deepseek.js';\r\nimport { generateLogo } from './logo-generator/fantaxy.js';\r\nimport { enhanceImage } from './enchant-image/ihance.js';\r\nimport path from 'path';\r\nimport { McpedlCategory, McpedlSearch } from './mcpedl-search/mcpedl.js';\r\nimport { Animob } from './animob/animob.js';\r\nimport { MobileLegendsNewsInfo } from './games/mobile-legends/ml-news.js';\r\nimport { TempMail } from './temp-mail/tempmail.js';\r\nimport { MagicStudioArt } from './magic-studio/magic-studio.js';\r\nimport { instagram } from './instagram/instagram.js';\r\nimport { AnimeFinder } from './anime-finder/anime-finder.js';\r\nimport {\r\n  PoemGenerator,\r\n  poemLanguages,\r\n  poemLengths,\r\n  poemTypes,\r\n} from './poem/poem-generator.js';\r\nimport { FeloSearch } from './felo/felo.js';\r\nimport { getStickersFromPack, searchSticker } from './sticker/sticker-pack.js';\r\nimport { ytdl } from './youtube/ytdl.js';\r\nimport { humanizeText, RewriteLevel } from './humanizer/humanizer.js';\r\nimport {\r\n  AIFreeboxImage,\r\n  SupportedAspectRatios,\r\n  SupportedSlugs,\r\n} from './aifreebox/aifreebox.js';\r\nimport boxen from 'boxen';\r\nimport { SearchLyrics } from './song-lyrics/song.js';\r\nimport { MinecraftStalk } from './minecraft/minecraft.js';\r\nimport { GeminiCanvas } from './gemini/gemini.js';\r\nimport fs from 'fs';\r\nimport { Nakanime } from './nakanimendo/nakanime.js';\r\nimport { TextToGhibli } from './ghibli/ghibli.js';\r\nimport { deepfakeTransform } from './deepfake/deepfake.js';\r\nimport { imageToPrompt } from './_other-scraper/imagetoprompt.js';\r\nimport { downloadSnackVideo } from './_other-scraper/snackVideoDL.js';\r\nimport { GuessTheFlag } from './games/guess-flag.js';\r\nimport inquirer from 'inquirer';\r\nimport { uploadToCatbox } from './_other-scraper/uploader.js';\r\nimport { GeminiChat } from './gemini/gemini-ask.js';\r\nimport {\r\n  cleanUrl,\r\n  TokopediaSearch,\r\n} from './_other-scraper/tokopedia_search.js';\r\nimport { ChatGPTOnline } from './_other-scraper/gpt.js';\r\nimport {\r\n  nsfwModels,\r\n  nsfwRatios,\r\n  nsfwStyles,\r\n  text2nsfw,\r\n} from './_other-scraper/text2nsfw.js';\r\nimport { MikaFilterImage } from './_other-scraper/face-filtet.js';\r\n\r\n/**\r\n * Prints an ASCII banner with fallback.\r\n */\r\nconst banner = async (): Promise<string> => {\r\n  return new Promise((resolve) => {\r\n    figlet('MIKA SCRAPER', (err, data) => {\r\n      resolve(data || 'MIKA SCRAPER');\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * Render AI response inside a stylized box\r\n */\r\nfunction renderBox(title: string, content: string): string {\r\n  return boxen(content, {\r\n    title,\r\n    titleAlignment: 'center',\r\n    padding: 1,\r\n    margin: 1,\r\n    borderStyle: 'round',\r\n    borderColor: 'cyan',\r\n  });\r\n}\r\n\r\nconst filters = MikaFilterImage.getFilters();\r\n\r\n/**\r\n * Main CLI runtime handler using Yargs command parser.\r\n */\r\nconst runCLI = async () => {\r\n  const cli = yargs(hideBin(process.argv))\r\n    .scriptName('mika-scraper')\r\n    .usage(chalk.gray('\\nUsage:\\n  $0 <command> [options]'))\r\n    .command(\r\n      'textcraft',\r\n      '🟪 Generate Minecraft-style image using TextCraft',\r\n      (yargs) =>\r\n        yargs\r\n          .option('text', {\r\n            alias: 't',\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Main text (line 1)',\r\n          })\r\n          .option('text2', {\r\n            type: 'string',\r\n            describe: 'Second line (optional)',\r\n          })\r\n          .option('text3', {\r\n            type: 'string',\r\n            describe: 'Third line (optional)',\r\n          }),\r\n      async (argv) => {\r\n        const client = new TextCraftClient();\r\n        const spinner = ora('⏳ Generating image via TextCraft...').start();\r\n\r\n        try {\r\n          const imageUrl = await client.generateImage({\r\n            text: argv.text,\r\n            text2: argv.text2,\r\n            text3: argv.text3,\r\n          });\r\n\r\n          spinner.succeed('✅ Image generated!\\n');\r\n\r\n          console.log(\r\n            chalk.bgBlackBright(\r\n              pastel(`\r\n┌────────────────────────────────────────────┐\r\n│               IMAGE URL                    │\r\n├────────────────────────────────────────────┤\r\n│  ${imageUrl}  │\r\n└────────────────────────────────────────────┘`)\r\n            )\r\n          );\r\n        } catch (err) {\r\n          spinner.fail('❌ Failed to generate image.');\r\n          console.error(chalk.redBright((err as Error).message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'tiktok-dl',\r\n      '📲 Download video/image/audio from TikTok via tmate.cc',\r\n      (yargs) =>\r\n        yargs\r\n          .option('url', {\r\n            alias: 'u',\r\n            type: 'string',\r\n            describe: 'TikTok video URL',\r\n            demandOption: true,\r\n          })\r\n          .option('retries', {\r\n            type: 'number',\r\n            default: 3,\r\n            describe: 'Max retry attempts on failure',\r\n          })\r\n          .option('delay', {\r\n            type: 'number',\r\n            default: 1000,\r\n            describe: 'Delay between retries (in ms)',\r\n          }),\r\n      async (argv) => {\r\n        const spinner = ora('🔍 Fetching TikTok download links...').start();\r\n        try {\r\n          const result = await downloadTikTok(argv.url, {\r\n            retries: argv.retries,\r\n            delayMs: argv.delay,\r\n          });\r\n\r\n          spinner.succeed(`🎉 Download ready! (${result.type})\\n`);\r\n          console.log(chalk.bold(`Title:`), result.title);\r\n          if (result.type === 'video') {\r\n            console.log(chalk.green(`🟢 MP4 Links:`));\r\n            result.mp4Links.forEach((l) =>\r\n              console.log(`  - ${l.label}: ${l.href}`)\r\n            );\r\n            if (result.mp3Link) {\r\n              console.log(chalk.yellow(`🎵 MP3:`), result.mp3Link.href);\r\n            }\r\n          } else if (result.type === 'image') {\r\n            console.log(chalk.green(`🖼️ Images:`));\r\n            result.images.forEach((url) => console.log(`  - ${url}`));\r\n            if (result.mp3Link) {\r\n              console.log(chalk.yellow(`🎵 MP3:`), result.mp3Link.href);\r\n            }\r\n          }\r\n        } catch (err) {\r\n          spinner.fail('❌ Gagal mengambil link TikTok');\r\n          console.error(chalk.red((err as Error).message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'deepseek',\r\n      '💬 Ask a question to DeepSeek',\r\n      (yargs) =>\r\n        yargs.option('question', {\r\n          alias: 'q',\r\n          type: 'string',\r\n          demandOption: true,\r\n          describe: 'The question to ask DeepSeek AI',\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('🧠 Querying DeepSeek...').start();\r\n        try {\r\n          const response = await DeepseekR1(argv.question);\r\n          spinner.succeed('✅ Response received!\\n');\r\n          console.log(chalk.cyanBright.bold('🗨️  DeepSeek Response:\\n'));\r\n          console.log(\r\n            chalk.gray(\r\n              typeof response === 'string'\r\n                ? response\r\n                : JSON.stringify(response, null, 2)\r\n            )\r\n          );\r\n        } catch (err) {\r\n          spinner.fail('❌ Failed to query DeepSeek.');\r\n          console.error(chalk.redBright((err as Error).message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'fantaxy',\r\n      '🎨 Generate a logo using Fantaxy AI (via HuggingFace)',\r\n      (yargs) =>\r\n        yargs.options({\r\n          style: { type: 'string', demandOption: true, describe: 'Logo style' },\r\n          color: {\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Primary color theme',\r\n          },\r\n          concept: {\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Logo concept or idea',\r\n          },\r\n          text: {\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Main text to display',\r\n          },\r\n          background: {\r\n            type: 'string',\r\n            default: 'transparent',\r\n            describe: 'Background description',\r\n          },\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('✨ Generating your Fantaxy logo...').start();\r\n        try {\r\n          const result = await generateLogo({\r\n            style: argv.style,\r\n            color: argv.color,\r\n            concept: argv.concept,\r\n            text: argv.text,\r\n            background: argv.background,\r\n          });\r\n\r\n          spinner.succeed('🎉 Logo generated successfully!');\r\n          const outputUrl = result.output.data[0].url;\r\n          console.log(chalk.greenBright('🔗 Logo URL:'), outputUrl);\r\n        } catch (err) {\r\n          spinner.fail('❌ Logo generation failed.');\r\n          console.error(chalk.red((err as Error).message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'enhance-image',\r\n      '🔧 Enhance an image using ihancer.com',\r\n      (yargs) =>\r\n        yargs.options({\r\n          input: {\r\n            alias: 'i',\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Path to the input image file (JPG/PNG)',\r\n          },\r\n          output: {\r\n            alias: 'o',\r\n            type: 'string',\r\n            default: './',\r\n            demandOption: true,\r\n            describe: 'Directory to save the enhanced image (optional)',\r\n          },\r\n          save: {\r\n            type: 'boolean',\r\n            default: false,\r\n            demandOption: true,\r\n            describe: 'Whether to save the result to disk',\r\n          },\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('✨ Enhancing image...').start();\r\n\r\n        try {\r\n          const buffer = await enhanceImage({\r\n            image: argv.input,\r\n            outputDir: path.resolve(argv.output),\r\n            saveToFile: argv.save,\r\n          });\r\n\r\n          spinner.succeed('✅ Image enhanced successfully!');\r\n          if (!argv.save) {\r\n            console.log(\r\n              chalk.gray(`Result buffer size: ${buffer.length} bytes`)\r\n            );\r\n          }\r\n        } catch (error: any) {\r\n          spinner.fail('❌ Failed to enhance image.');\r\n          console.error(chalk.red(error.message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'mcpedl-search',\r\n      '🌍 search mods/maps/textures from MCPEDL.org',\r\n      (yargs) =>\r\n        yargs.options({\r\n          category: {\r\n            alias: 'c',\r\n            type: 'string',\r\n            choices: ['mods', 'maps', 'textures', 'shaders', 'downloading'],\r\n            demandOption: true,\r\n            describe: 'Content category to scrape',\r\n          },\r\n          page: {\r\n            alias: 'p',\r\n            type: 'number',\r\n            default: 1,\r\n            describe: 'Page number to fetch',\r\n          },\r\n          json: {\r\n            type: 'boolean',\r\n            default: false,\r\n            describe: 'Print raw JSON output',\r\n          },\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          `🔍 Fetching ${argv.category} (page ${argv.page})...`\r\n        ).start();\r\n        try {\r\n          const results = await McpedlSearch(\r\n            argv.category as McpedlCategory,\r\n            argv.page\r\n          );\r\n          spinner.succeed(`✅ Found ${results.length} posts:`);\r\n          if (argv.json) {\r\n            console.log(JSON.stringify(results, null, 2));\r\n          } else {\r\n            results.forEach((entry, index) => {\r\n              console.log(\r\n                `${chalk.greenBright(index + 1)}. ${chalk.bold(entry.title)}`\r\n              );\r\n              console.log(chalk.gray(`   ↳ ${entry.link}`));\r\n            });\r\n          }\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Scrape failed.');\r\n          console.error(chalk.red(err.message));\r\n          process.exit(1);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'animob <method>',\r\n      '🎥 Access anime data via Animob API',\r\n      (yargs) => {\r\n        return yargs\r\n          .positional('method', {\r\n            describe: 'Method to call: home, genre, search, detail, episode',\r\n            type: 'string',\r\n            choices: ['home', 'genre', 'search', 'detail', 'episode'],\r\n          })\r\n          .option('genre', {\r\n            type: 'string',\r\n            describe: 'Genre for genre mode',\r\n          })\r\n          .option('page', {\r\n            type: 'number',\r\n            default: 1,\r\n            describe: 'Page number',\r\n          })\r\n          .option('query', {\r\n            type: 'string',\r\n            describe: 'Search query for search',\r\n          })\r\n          .option('id', {\r\n            type: 'string',\r\n            describe: 'Anime ID for detail',\r\n          })\r\n          .option('episodeId', {\r\n            type: 'string',\r\n            describe: 'Episode ID (with ?ep=...)',\r\n          })\r\n          .option('server', {\r\n            type: 'string',\r\n            default: 'HD-1',\r\n            describe: 'Preferred streaming server',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(`Fetching '${argv.method}'...`).start();\r\n        const animob = new Animob();\r\n        try {\r\n          let result;\r\n\r\n          switch (argv.method) {\r\n            case 'home':\r\n              result = await animob.home();\r\n              break;\r\n            case 'genre':\r\n              result = await animob.genre(argv.genre || 'action', argv.page);\r\n              break;\r\n            case 'search':\r\n              result = await animob.search(argv.query!, argv.page);\r\n              break;\r\n            case 'detail':\r\n              result = await animob.detail(argv.id!);\r\n              break;\r\n            case 'episode':\r\n              result = await animob.episode(argv.episodeId!, argv.server);\r\n              break;\r\n            default:\r\n              throw new Error('Invalid method.');\r\n          }\r\n          spinner.succeed('✅ Success');\r\n          console.log(JSON.stringify(result, null, 2));\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Failed');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'ml-news',\r\n      '📰 Fetch the latest Mobile Legends news articles',\r\n      () => {},\r\n      async () => {\r\n        const spinner = ora('Fetching news...').start();\r\n\r\n        try {\r\n          const response = await MobileLegendsNewsInfo();\r\n          spinner.succeed(`✅ Fetched ${response.total} articles\\n`);\r\n          response.result.forEach((article, i) => {\r\n            console.log(\r\n              `${chalk.greenBright(i + 1)}. ${chalk.bold(article.title)}`\r\n            );\r\n            console.log(`   ${chalk.gray(article.date)}`);\r\n            if (article.author) console.log(`   ✍️  ${article.author}`);\r\n            if (article.thumbnail) console.log(`   🖼️  ${article.thumbnail}`);\r\n            console.log(`   🔗 ${chalk.underline(article.link)}\\n`);\r\n          });\r\n        } catch (err: any) {\r\n          spinner.fail('Failed to load news.');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'tempmail <method>',\r\n      '📨 Temporary Email Toolkit',\r\n      (yargs) =>\r\n        yargs\r\n          .positional('method', {\r\n            describe: 'Method to call: create, inbox',\r\n            type: 'string',\r\n            choices: ['create', 'inbox'],\r\n          })\r\n          .positional('token', {\r\n            describe: 'Token used to check inbox (required for \"nbox\")',\r\n            type: 'string',\r\n          }),\r\n      async (argv) => {\r\n        const spinner = ora();\r\n\r\n        try {\r\n          switch (argv.method) {\r\n            case 'create':\r\n              spinner.start('Creating temporary email...');\r\n              const res = await TempMail.create();\r\n              console.log(res);\r\n              spinner.succeed('✅ Temporary email created!');\r\n              console.log(\r\n                `${chalk.cyanBright('📧 Email:')} ${res.result.data.email}`\r\n              );\r\n              console.log(\r\n                `${chalk.gray('🔑 Token:')} ${res.result.data.email_token}`\r\n              );\r\n              console.log(\r\n                `${chalk.redBright('⚡ Deleted In:')} ${res.result.data.deleted_in}`\r\n              );\r\n              break;\r\n\r\n            case 'inbox':\r\n              if (!argv.token)\r\n                throw new Error('Token is required for \"nbox\" method.');\r\n              spinner.start(`Checking inbox for token ${argv.token}...`);\r\n              const inbox = await TempMail.checkInbox(argv.token);\r\n              spinner.succeed(`✅ Found ${inbox.result.length} messages:`);\r\n              inbox.result.forEach((msg, i) => {\r\n                console.log(\r\n                  `${chalk.greenBright(i + 1)}. ${chalk.bold(msg.subject)}`\r\n                );\r\n                console.log(`   🕒 ${msg.date}`);\r\n                console.log(`   ✉️  From: ${msg.from}`);\r\n                console.log(`   🔗 ID: ${msg.id}\\n`);\r\n              });\r\n              break;\r\n\r\n            default:\r\n              throw new Error('Unsupported method.');\r\n          }\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Error');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'magicstudio',\r\n      '🎨 Generate AI image using MagicStudio and upload to Catbox',\r\n      (yargs) =>\r\n        yargs.option('prompt', {\r\n          alias: 'p',\r\n          describe: 'Text prompt to generate an image',\r\n          type: 'string',\r\n          demandOption: true,\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('🧠 Generating image from prompt...').start();\r\n\r\n        try {\r\n          const imageUrl = await MagicStudioArt(argv.prompt);\r\n          spinner.succeed('✅ Image generated and uploaded!');\r\n          console.log(\r\n            `${chalk.bold('🖼️  URL:')} ${chalk.cyanBright(imageUrl)}`\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Failed to generate or upload image.');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'instagram',\r\n      '📸 get video/audio from Instagram reel/post',\r\n      (yargs) =>\r\n        yargs.option('url', {\r\n          alias: 'u',\r\n          type: 'string',\r\n          demandOption: true,\r\n          describe: 'Instagram reel/post URL',\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('Scraping Instagram...').start();\r\n        try {\r\n          const result = await instagram(argv.url);\r\n          spinner.succeed('✅ Success! Instagram media extracted.\\n');\r\n\r\n          console.log(\r\n            `${chalk.bold('🎬 Title:')} ${chalk.yellow(result.title)}`\r\n          );\r\n          console.log(\r\n            `${chalk.bold('👤 User:')} ${chalk.cyan(result.profile.username)}\\n`\r\n          );\r\n\r\n          console.log(chalk.greenBright('🎥 Video Tracks:'));\r\n          result.videoTracks.forEach((v, i) => {\r\n            console.log(\r\n              ` ${i + 1}. ${v.qualityLabel || v.resolution} - ${v.url}`\r\n            );\r\n          });\r\n\r\n          console.log(chalk.magentaBright('\\n🔊 Audio Tracks:'));\r\n          result.audioTracks.forEach((a, i) => {\r\n            console.log(` ${i + 1}. ${a.mimeType} - ${a.url}`);\r\n          });\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Failed to scrape Instagram media.');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'anime-finder',\r\n      '🔍 Identify anime by image URL',\r\n      (yargs) =>\r\n        yargs.option('image', {\r\n          alias: 'i',\r\n          describe: 'Image URL of the anime screenshot',\r\n          type: 'string',\r\n          demandOption: true,\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('Analyzing image...').start();\r\n\r\n        const result = await AnimeFinder(argv.image);\r\n\r\n        if (!result.status) {\r\n          spinner.fail('❌ Identification failed');\r\n          console.error(chalk.red(result.message));\r\n          console.error(result.error);\r\n          return;\r\n        }\r\n\r\n        spinner.succeed('✅ Anime identified!');\r\n        console.log(chalk.bold('🎞️ Anime:'), result.anime);\r\n        console.log(chalk.bold('👤 Character:'), result.character);\r\n        console.log(chalk.bold('🎭 Genres:'), result.genres);\r\n        console.log(chalk.bold('📅 Premiere:'), result.premiere);\r\n        console.log(chalk.bold('🏢 Studio:'), result.production);\r\n        console.log(chalk.bold('📝 Description:'), result.description);\r\n        console.log(chalk.bold('📚 Synopsis:'), result.synopsis);\r\n        if (result.references.length > 0) {\r\n          console.log(chalk.bold('🔗 References:'));\r\n          result.references.forEach((ref) => {\r\n            console.log(\r\n              `- ${chalk.cyan(ref.site)}: ${chalk.underline(ref.url)}`\r\n            );\r\n          });\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'poem',\r\n      '📝 Generate a custom AI poem with structure, theme, and tone.',\r\n      (yargs) =>\r\n        yargs\r\n          .option('topic', {\r\n            alias: 't',\r\n            type: 'string',\r\n            describe:\r\n              'The topic or theme of the poem (e.g., stars, war, peace)',\r\n            default: 'cinta',\r\n          })\r\n          .option('length', {\r\n            alias: 'l',\r\n            type: 'string',\r\n            describe: 'Desired length of the poem',\r\n            choices: poemLengths,\r\n            default: 'long',\r\n          })\r\n          .option('type', {\r\n            alias: 'p',\r\n            type: 'string',\r\n            describe: 'Poem structure or format',\r\n            choices: poemTypes,\r\n            default: 'Sonnet',\r\n          })\r\n          .option('lang', {\r\n            alias: 'g',\r\n            type: 'string',\r\n            describe: 'Output language',\r\n            choices: poemLanguages,\r\n            default: 'Indonesian',\r\n          }),\r\n      async (argv) => {\r\n        const spinner = ora('🎭 Crafting your poetic masterpiece...').start();\r\n        const result = await PoemGenerator({\r\n          topic: argv.topic,\r\n          length: argv.length as any,\r\n          type: argv.type as any,\r\n          lang: argv.lang as any,\r\n        });\r\n        if (result.status) {\r\n          spinner.succeed('✅ Poem generated successfully!\\n');\r\n          console.log(chalk.greenBright(result.result));\r\n        } else {\r\n          spinner.fail('❌ Failed to generate poem.');\r\n          console.error(chalk.red(result.message));\r\n          console.error(result.error);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'felo',\r\n      '🧠 Ask questions via Felo AI with stream + references',\r\n      (yargs) =>\r\n        yargs.option('query', {\r\n          alias: 'q',\r\n          type: 'string',\r\n          demandOption: true,\r\n          describe: 'The question or search query to ask Felo AI',\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('🤖 Asking Felo...').start();\r\n\r\n        try {\r\n          const result = await FeloSearch(argv.query);\r\n          spinner.succeed('✅ Response received:\\n');\r\n          console.log(chalk.cyan(result));\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Failed to get Felo response.');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'stickers',\r\n      '🔎 Search & extract sticker packs from getstickerpack.com',\r\n      (yargs) =>\r\n        yargs.option('query', {\r\n          alias: 'q',\r\n          type: 'string',\r\n          describe: 'Search keyword for sticker pack',\r\n          demandOption: true,\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          `Searching for sticker packs: \"${argv.query}\"`\r\n        ).start();\r\n\r\n        try {\r\n          const packs = await searchSticker(argv.query);\r\n          spinner.stop();\r\n          if (!packs.length) {\r\n            console.log(chalk.yellow('⚠️ No sticker packs found.'));\r\n            return;\r\n          }\r\n\r\n          console.log(\r\n            chalk.green(`✅ Found ${packs.length} sticker pack(s):\\n`)\r\n          );\r\n          packs.forEach((p, i) => {\r\n            console.log(\r\n              `${i + 1}. ${chalk.bold(p.title)} — ${chalk.blue(p.url)}`\r\n            );\r\n          });\r\n\r\n          const selected = packs[0];\r\n          console.log(\r\n            `\\n🎯 Scraping stickers from: ${chalk.underline(selected.title)}\\n`\r\n          );\r\n\r\n          const spinner2 = ora('Fetching sticker images...').start();\r\n          const stickers = await getStickersFromPack(selected.url);\r\n          spinner2.stop();\r\n\r\n          if (!stickers.length) {\r\n            console.log(chalk.red('❌ No stickers found in the pack.'));\r\n            return;\r\n          }\r\n\r\n          console.log(chalk.green(`✅ Found ${stickers.length} sticker(s):`));\r\n          stickers.forEach((url, i) => console.log(`${i + 1}. ${url}`));\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Error occurred');\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'ytdl',\r\n      '🍀 Download YouTube video as MP3 or MP4',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('url', {\r\n            alias: 'u',\r\n            describe: 'YouTube video URL',\r\n            type: 'string',\r\n            demandOption: true,\r\n          })\r\n          .option('format', {\r\n            alias: 'f',\r\n            describe: 'Output format: mp3 or mp4',\r\n            type: 'string',\r\n            default: 'mp3',\r\n            choices: ['mp3', 'mp4'],\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora('🎥 Downloading video...').start();\r\n        try {\r\n          const { downloads, metadata } = await ytdl(argv.url as string);\r\n          spinner.succeed('✅ Video downloaded successfully!\\n');\r\n\r\n          console.log(`✅ Success: ${metadata.title}`);\r\n          console.log(`🎉 Title: ${chalk.bold(metadata.title)}`);\r\n          console.log(`📚 Duration: ${chalk.blue(metadata.duration)}`);\r\n          console.log(`📚 Thumbnail: ${chalk.blue(metadata.thumbnail)}`);\r\n          console.log(`🔗 Download link: `);\r\n          console.log(\r\n            `${chalk.greenBright('🧀 Audio')}: ${chalk.underline(downloads.audio[0].url)}`\r\n          );\r\n          console.log(\r\n            `${chalk.greenBright('📹 Video')}: ${chalk.underline(downloads.video[0].url)}`\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Error occurred');\r\n          console.error('❌ Error:', err.message);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'humanize',\r\n      '🍃 Rewrite AI-generated text into more natural, human-sounding output',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('text', {\r\n            alias: 't',\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'The input text to be humanized',\r\n          })\r\n          .option('level', {\r\n            alias: 'l',\r\n            choices: ['standard', 'enhanced', 'aggressive'] as RewriteLevel[],\r\n            default: 'enhanced',\r\n            describe: 'The rewrite level / intensity',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora('⏳ Humanizing text...').start();\r\n        const icons = {\r\n          success: chalk.green('✅'),\r\n          fail: chalk.red('❌'),\r\n          info: chalk.blue('ℹ️'),\r\n          warning: chalk.yellow('⚠️'),\r\n          scissors: '✂️',\r\n          ruler: '📏',\r\n          down: '📉',\r\n          brain: '🧠',\r\n        };\r\n        const { text, level } = argv;\r\n        const result = await humanizeText(text, level as RewriteLevel);\r\n        if (!result.success) {\r\n          spinner.fail(icons.fail + ' Humanization failed');\r\n          console.error(\r\n            `${icons.fail} ${chalk.red('Failed to humanize text.')}`\r\n          );\r\n          console.error(\r\n            `${icons.warning} ${chalk.yellow('Reason')}: ${result.result.error}`\r\n          );\r\n          if (result.result.isLevel) {\r\n            console.log(\r\n              `${icons.info} ${chalk.blue('Valid levels')}: ${result.result.isLevel.join(', ')}`\r\n            );\r\n          }\r\n          return;\r\n        }\r\n        spinner.succeed(icons.success + ' Humanization successful');\r\n        const { code, originalLength, transformedLength, reductionPercentage } =\r\n          result.result;\r\n\r\n        console.log(\r\n          `\\n${icons.success} ${chalk.green('Success')}: Text humanized with \"${chalk.cyan(result.level)}\" level\\n`\r\n        );\r\n\r\n        console.log(\r\n          `${icons.ruler} ${chalk.white('Original Length')}   : ${chalk.yellow(originalLength)} chars`\r\n        );\r\n        console.log(\r\n          `${icons.scissors} ${chalk.white('Transformed Length')} : ${chalk.yellow(transformedLength)} chars`\r\n        );\r\n        console.log(\r\n          `${icons.down} ${chalk.white('Reduction')}         : ${chalk.green(reductionPercentage)}\\n`\r\n        );\r\n\r\n        console.log(`${icons.brain} ${chalk.bold('Output')}:`);\r\n        console.log(chalk.whiteBright(`\"${code}\"\\n`));\r\n      }\r\n    )\r\n    .command(\r\n      'aifreebox',\r\n      '🥽 Generate image using AI Freebox',\r\n      (yargs) =>\r\n        yargs\r\n          .option('prompt', {\r\n            alias: 'p',\r\n            type: 'string',\r\n            demandOption: true,\r\n            describe: 'Prompt for the image generation',\r\n          })\r\n          .option('aspect', {\r\n            alias: 'a',\r\n            choices: ['1:1', '2:3', '9:16', '16:9'] as const,\r\n            default: '16:9',\r\n            describe: 'Image aspect ratio',\r\n          })\r\n          .option('slug', {\r\n            alias: 's',\r\n            choices: [\r\n              'ai-art-generator',\r\n              'ai-fantasy-map-creator',\r\n              'ai-youtube-thumbnail-generator',\r\n              'ai-old-cartoon-characters-generator',\r\n            ] as const,\r\n            default: 'ai-art-generator',\r\n            describe: 'Slug/model for generation',\r\n          }),\r\n      async (argv) => {\r\n        const spinner = ora('Generating your image... please wait').start();\r\n        try {\r\n          const url = await AIFreeboxImage(\r\n            argv.prompt as string,\r\n            argv.aspect as SupportedAspectRatios,\r\n            argv.slug as SupportedSlugs\r\n          );\r\n          spinner.succeed(chalk.green('Image generated successfully!'));\r\n\r\n          const message = boxen(chalk.bold.cyan(url), {\r\n            padding: 1,\r\n            borderColor: 'magenta',\r\n            borderStyle: 'round',\r\n            title: 'Your Image URL',\r\n            titleAlignment: 'center',\r\n          });\r\n\r\n          console.log(message);\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red('Failed to generate image'));\r\n          console.error(chalk.redBright('Error:'), err.message);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'search-lyrics',\r\n      '🌺 Search lyrics from songtexte.com',\r\n      (yargs) =>\r\n        yargs.option('q', {\r\n          alias: 'query',\r\n          describe: 'Judul lagu atau nama artis',\r\n          demandOption: true,\r\n          type: 'string',\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora(`Mencari lirik untuk: \"${argv.q}\"...`).start();\r\n\r\n        try {\r\n          const result = await SearchLyrics(argv.q as string);\r\n          spinner.succeed('Lirik berhasil ditemukan!');\r\n          const formattedOutput = `\r\n${chalk.bold.cyan(result.title)} ${chalk.gray('-')} ${chalk.green(result.artist)}\r\n\r\n${chalk.white(result.lyrics)}\r\n\r\n${chalk.gray('🎧')} ${chalk.underline.blue(result.url)}\r\n        `.trim();\r\n\r\n          console.log(\r\n            boxen(formattedOutput, {\r\n              padding: 1,\r\n              borderColor: 'cyan',\r\n              borderStyle: 'round',\r\n              title: chalk.magentaBright('🎶 Lyrics Found'),\r\n              titleAlignment: 'center',\r\n            })\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail('Gagal menemukan lirik.');\r\n          console.error(chalk.redBright(`❌ ${err.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'stalkmc',\r\n      '🥞 Get Minecraft profile details using PlayerDB + Mojang',\r\n      (yargs) =>\r\n        yargs.option('username', {\r\n          alias: 'u',\r\n          type: 'string',\r\n          describe: 'Minecraft username',\r\n          demandOption: true,\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          `🔍 Fetching profile for \"${argv.username}\"...`\r\n        ).start();\r\n        try {\r\n          const { data: profile } = await MinecraftStalk(\r\n            argv.username as string\r\n          );\r\n          spinner.succeed('🎯 Profile found!');\r\n          if (!profile) throw new Error('Profile not found.');\r\n          const history = profile.name_history.length\r\n            ? profile.name_history\r\n                .map(\r\n                  (entry, i) =>\r\n                    `${chalk.cyan(`${i + 1}.`)} ${entry.name} ${\r\n                      entry.changedToAt\r\n                        ? chalk.gray(\r\n                            `(${new Date(entry.changedToAt).toLocaleDateString()})`\r\n                          )\r\n                        : ''\r\n                    }`\r\n                )\r\n                .join('\\n')\r\n            : chalk.gray('❌ No name history found.');\r\n\r\n          const content = `\r\n👤 ${chalk.bold('Username:')} ${profile.username}\r\n🆔 ${chalk.bold('UUID:')} ${profile.id}\r\n🔡 ${chalk.bold('UUID (Short):')} ${profile.short_id}\r\n📦 ${chalk.bold('Raw ID:')} ${profile.raw_id}\r\n🧍 ${chalk.bold('Skin Model:')} ${profile.skin_model}\r\n🌐 ${chalk.bold('NameMC:')} ${chalk.underline.blue(profile.namemc_url)}\r\n🖼️ ${chalk.bold('Skin Texture:')} ${chalk.gray(profile.skin_texture)}\r\n📥 ${chalk.bold('Skin Download:')} ${chalk.underline(profile.skin_download)}\r\n✅ ${chalk.bold('Premium:')} ${profile.profile_valid ? chalk.green('Yes') : chalk.red('No')}\r\n📜 ${chalk.bold('Name History')} (${profile.name_history.length}):\r\n${history}\r\n        `.trim();\r\n\r\n          console.log(\r\n            boxen(content, {\r\n              padding: 1,\r\n              borderColor: 'cyan',\r\n              borderStyle: 'round',\r\n              title: `🎮 Minecraft Stalk - ${profile.username}`,\r\n              titleAlignment: 'center',\r\n            })\r\n          );\r\n\r\n          console.log(\r\n            `📸 Preview: ${chalk.underline(profile.full_body_preview_hd)}`\r\n          );\r\n          console.log(`📱 QR UUID: ${chalk.underline(profile.qr_uuid)}\\n`);\r\n        } catch (err: any) {\r\n          spinner.fail('❌ Error fetching profile');\r\n          console.error(chalk.redBright(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'gemini-image',\r\n      '🥙 Kirim gambar + teks ke Gemini',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('file', {\r\n            alias: 'f',\r\n            type: 'string',\r\n            describe: 'Path ke file gambar',\r\n            demandOption: true,\r\n          })\r\n          .option('prompt', {\r\n            alias: 'p',\r\n            type: 'string',\r\n            describe: 'Prompt tambahan untuk gambar',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(chalk.blue('Mengirim gambar ke Gemini...')).start();\r\n\r\n        try {\r\n          const imgPath = path.resolve(argv.file);\r\n          const imageBuffer = fs.readFileSync(imgPath);\r\n          const base64Image = imageBuffer.toString('base64');\r\n          const result = await GeminiCanvas(\r\n            argv.prompt as string,\r\n            base64Image,\r\n            'image/png',\r\n            'AIzaSyDsTFR9AR9SOlRHntaddcen-d4g4iN3408'\r\n          );\r\n          spinner.succeed(chalk.green(`Respons:`));\r\n          const url = await uploadToCatbox(\r\n            Buffer.from(result.imageBuffer as Buffer),\r\n            'gemini.png'\r\n          );\r\n          console.log(\r\n            renderBox('Gemini AI', `${url}\\n\\n${result.textResponse}`)\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red(`Gagal:`));\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'gemini-ask',\r\n      '🌏 Kirim teks ke Gemini',\r\n      (yargs) => {\r\n        return yargs.option('prompt', {\r\n          alias: 'p',\r\n          type: 'string',\r\n          describe: 'Prompt untuk Gemini',\r\n          demandOption: true,\r\n        });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(chalk.blue('Mengirim prompt ke Gemini...')).start();\r\n        try {\r\n          const result = await GeminiChat(argv.prompt as string);\r\n          spinner.succeed(chalk.green(`Respons:`));\r\n          console.log(renderBox('Gemini AI', `${result}`));\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red(`Gagal:`));\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'nakanime-search <query>',\r\n      '🕳 Cari anime berdasarkan judul',\r\n      (y) => y,\r\n      async (argv) => {\r\n        const spinner = ora(chalk.cyan('Mencari anime...')).start();\r\n        const anime = new Nakanime();\r\n        try {\r\n          const result = await anime.search(argv.query as string);\r\n          spinner.succeed(\r\n            chalk.green(`Ditemukan ${result.data.length} hasil:`)\r\n          );\r\n          const output = result.data\r\n            .map(\r\n              (a) =>\r\n                `🎬 ${a.title} (${a.type || 'Unknown'})\\n🌩 ${a.slug}\\n🌏 Image: ${a.thumbnail}\\n🧀 Url: ${a.url}`\r\n            )\r\n            .join('\\n\\n');\r\n          console.log(\r\n            renderBox('Hasil Pencarian', chalk.whiteBright.bold(output))\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red(`Gagal mencari`));\r\n          console.error(err.message);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'nakanime-genre <genre> [page]',\r\n      '🌩 Lihat daftar anime berdasarkan genre',\r\n      (y) => y,\r\n      async (argv) => {\r\n        const spinner = ora(chalk.cyan('Memuat genre...')).start();\r\n        const anime = new Nakanime();\r\n        try {\r\n          const result = await anime.genre(\r\n            argv.genre as string,\r\n            Number(argv.page || 1)\r\n          );\r\n          spinner.succeed(chalk.green(`Genre berhasil dimuat:`));\r\n          const output = result.data\r\n            .map((a: any) => `📺 ${a.title}`)\r\n            .join('\\n');\r\n          console.log(renderBox(`Genre: ${argv.genre}`, chalk.magenta(output)));\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red(`Gagal memuat genre`));\r\n          console.error(err.message);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'nakanime-list [order] [page]',\r\n      '🥞 Daftar semua anime',\r\n      (y) => y,\r\n      async (argv) => {\r\n        const anime = new Nakanime();\r\n        const spinner = ora(chalk.cyan('Mengambil daftar anime...')).start();\r\n        try {\r\n          const result = await anime.get(\r\n            argv.order as string,\r\n            Number(argv.page || 1)\r\n          );\r\n          spinner.succeed(chalk.green(`Daftar anime:`));\r\n          const output = result.data\r\n            .map(\r\n              (a: any) =>\r\n                `📺 ${a.title} - ⭐ ${a.type || 'Unknown'}\\n- Url: ${a.url}\\n- Image: ${a.thumbnail}\\n\\n`\r\n            )\r\n            .join('\\n\\n');\r\n          console.log(renderBox('Anime Terbaru', chalk.blue(output)));\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red(`Gagal mengambil data`));\r\n          console.error(err.message);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'toghibli',\r\n      '🥽 Ubah text ke gaya Studio Ghibli',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('prompt', {\r\n            describe: 'Text prompt for the AI image generator',\r\n            type: 'string',\r\n            demandOption: true,\r\n          })\r\n          .option('style', {\r\n            alias: 's',\r\n            type: 'string',\r\n            default: 'Spirited Away',\r\n            choices: [\r\n              'Spirited Away',\r\n              \"Howl's Castle\",\r\n              'Princess Mononoke',\r\n              'Totoro',\r\n            ],\r\n            describe: 'Ghibli art style to use',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora('✨ Generating Ghibli-style image...').start();\r\n\r\n        try {\r\n          const filepath = await TextToGhibli({\r\n            prompt: argv.prompt,\r\n            style: argv.style as any,\r\n          });\r\n\r\n          spinner.succeed('Image generation complete!');\r\n          console.log(\r\n            boxen(\r\n              `${chalk.blueBright('Here is your Image URL!')}\\n\\n${chalk.white.bold(filepath)}`,\r\n              {\r\n                padding: 1,\r\n                borderColor: 'green',\r\n                borderStyle: 'round',\r\n                align: 'center',\r\n              }\r\n            )\r\n          );\r\n        } catch (error: any) {\r\n          spinner.fail('Failed to generate image.');\r\n          console.error(chalk.red(`❌ Error: ${error.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'deepfake',\r\n      '🍃 Ubah pakaian atau hilangkan dengan AI (support NSFW)',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('image', {\r\n            describe: 'Path ke file gambar',\r\n            type: 'string',\r\n            demandOption: true,\r\n          })\r\n          .option('prompt', {\r\n            alias: 'p',\r\n            type: 'string',\r\n            default: 'best quality, nude',\r\n            describe: 'Prompt untuk manipulasi pakaian',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          'Mentransformasi gambar dengan DeepfakeMaker...'\r\n        ).start();\r\n        try {\r\n          const imagePath = path.resolve(process.cwd(), argv.image);\r\n          const buffer = fs.readFileSync(imagePath);\r\n\r\n          const result = await deepfakeTransform({\r\n            buffer,\r\n            prompt: argv.prompt,\r\n          });\r\n          spinner.succeed('Transformasi selesai!');\r\n          console.log(\r\n            boxen(\r\n              `${chalk.green('✅ Success!')} Gambar telah diproses:\\n${chalk.cyan(result)}`,\r\n              { padding: 1, borderColor: 'magenta', borderStyle: 'round' }\r\n            )\r\n          );\r\n        } catch (error: any) {\r\n          spinner.fail('Gagal memproses gambar.');\r\n          console.error(chalk.red(`❌ Error: ${error.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'image-to-prompt',\r\n      '🧆 Generate a prompt from an image using NeuralFrames (CLIP Interrogate)',\r\n      (yargs) =>\r\n        yargs.option('url', {\r\n          describe: 'Public image URL (JPG or PNG)',\r\n          type: 'string',\r\n          demandOption: true,\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora('Analyzing image and generating prompt...').start();\r\n        try {\r\n          const result = await imageToPrompt({ imageUrl: argv.url as string });\r\n          spinner.succeed('Prompt generation complete!');\r\n          console.log(\r\n            boxen(\r\n              `${chalk.green('Generated Prompt:')}\\n${chalk.cyan(result.prompt)}`,\r\n              {\r\n                padding: 1,\r\n                borderColor: 'green',\r\n                borderStyle: 'round',\r\n              }\r\n            )\r\n          );\r\n        } catch (error: any) {\r\n          spinner.fail('Failed to generate prompt.');\r\n          console.error(chalk.red(`Error: ${error.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'snackvid-dl',\r\n      '🧀 Download video from SnackVideo',\r\n      (yargs) =>\r\n        yargs.option('url', {\r\n          alias: 'u',\r\n          demandOption: true,\r\n          describe: 'SnackVideo video URL',\r\n          type: 'string',\r\n        }),\r\n      async (argv) => {\r\n        const spinner = ora(`🎥 Fetching video from SnackVideo...`).start();\r\n\r\n        try {\r\n          const result = await downloadSnackVideo(argv.url as string);\r\n\r\n          if (result.status) {\r\n            spinner.succeed('Video fetched successfully!');\r\n            console.log(\r\n              boxen(\r\n                `${chalk.green('✅ Download URL:')}\\n${chalk.cyan(result.video)}`,\r\n                {\r\n                  padding: 1,\r\n                  borderColor: 'green',\r\n                  borderStyle: 'round',\r\n                }\r\n              )\r\n            );\r\n          } else {\r\n            spinner.fail('Failed to fetch video.');\r\n            console.error(chalk.red(`❌ Error: ${result.message}`));\r\n          }\r\n        } catch (error: any) {\r\n          spinner.fail('Unexpected error occurred.');\r\n          console.error(chalk.red(`❌ ${error.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'guess-flag',\r\n      'Play a Guess the Flag game',\r\n      () => {},\r\n      async () => {\r\n        const spinner = ora('🧠 Generating a flag question...').start();\r\n\r\n        try {\r\n          const question = await GuessTheFlag();\r\n          spinner.succeed('✅ Flag loaded!');\r\n\r\n          console.log(\r\n            boxen(\r\n              `${chalk.bold.yellow('🌍 Guess the Country!')}\\n\\n` +\r\n                `${chalk.white('Flag URL:')} ${chalk.cyan(question.imageUrl)}\\n` +\r\n                `\\nYou will be shown 4 countries — choose the correct one.`,\r\n              {\r\n                padding: 1,\r\n                borderColor: 'cyan',\r\n                borderStyle: 'round',\r\n              }\r\n            )\r\n          );\r\n\r\n          const answer = await inquirer.prompt([\r\n            {\r\n              type: 'list',\r\n              name: 'selected',\r\n              message: chalk.magentaBright(\r\n                '🌟 Which country does this flag belong to?'\r\n              ),\r\n              choices: question.options,\r\n            },\r\n          ]);\r\n\r\n          if (answer.selected === question.correctCountry) {\r\n            console.log(\r\n              boxen(\r\n                `${chalk.green('✅ Correct!')} That's the flag of ${question.correctCountry}.`,\r\n                {\r\n                  padding: 1,\r\n                  borderColor: 'green',\r\n                  borderStyle: 'round',\r\n                }\r\n              )\r\n            );\r\n          } else {\r\n            console.log(\r\n              boxen(\r\n                `${chalk.red('❌ Wrong!')} You chose ${answer.selected}.\\nThe correct answer is ${chalk.greenBright(\r\n                  question.correctCountry\r\n                )}.`,\r\n                {\r\n                  padding: 1,\r\n                  borderColor: 'red',\r\n                  borderStyle: 'round',\r\n                }\r\n              )\r\n            );\r\n          }\r\n\r\n          console.log(\r\n            chalk.gray(\r\n              `📷 Open this image in browser to view: ${question.imageUrl}`\r\n            )\r\n          );\r\n        } catch (err: any) {\r\n          spinner.fail('Failed to run the game.');\r\n          console.error(chalk.red(`❌ Error: ${err.message}`));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'tokopedia-search',\r\n      '🎪 Search Tokopedia for a product',\r\n      (yargs) => {\r\n        return yargs.option('query', {\r\n          describe: 'Product keyword to search on Tokopedia',\r\n          type: 'string',\r\n          alias: 'q',\r\n          demandOption: true,\r\n        });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          `Searching Tokopedia for \"${argv.query}\"...`\r\n        ).start();\r\n\r\n        try {\r\n          const results = await TokopediaSearch(argv.query as string);\r\n          spinner.succeed('Search complete ✅\\n');\r\n\r\n          if (results.length === 0) {\r\n            console.log(chalk.yellow('No products found.'));\r\n            return;\r\n          }\r\n\r\n          results.forEach((product) => {\r\n            const output = `\r\n${chalk.bold('📦 Product')}: ${chalk.cyan(product.name)}\r\n${chalk.bold('💰 Price')}: ${chalk.green(product.price.text)}\r\n${chalk.bold('🏪 Shop')}: ${chalk.magenta(product.shop.name)} (${product.shop.city})\r\n${chalk.bold('🔗 URL')}: ${chalk.underline(cleanUrl(product.url))}\r\n${chalk.bold('🖼️ Image')}: ${chalk.underline(cleanUrl(product.mediaURL.image as string) || chalk.gray('No image'))}\r\n          `;\r\n\r\n            console.log(\r\n              boxen(output, {\r\n                padding: 1,\r\n                borderStyle: 'round',\r\n                borderColor: 'green',\r\n                margin: 1,\r\n              })\r\n            );\r\n          });\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red('Failed to scrape Tokopedia'));\r\n          console.error(chalk.red('Error:'), err.message || err);\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'gptonline',\r\n      '⚡ Ask GPT Online a question',\r\n      (yargs) => {\r\n        return yargs.option('message', {\r\n          describe: 'The prompt or message to send to GPT Online',\r\n          type: 'string',\r\n          alias: 'm',\r\n          demandOption: true,\r\n        });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(chalk.blue('Contacting GPT Online...')).start();\r\n\r\n        try {\r\n          const reply = await ChatGPTOnline(argv.message as string);\r\n          spinner.succeed(chalk.green('Response received'));\r\n\r\n          const boxed = boxen(reply, {\r\n            padding: 1,\r\n            margin: 1,\r\n            borderStyle: 'round',\r\n            borderColor: 'cyan',\r\n            title: '🤖 GPT Online',\r\n            titleAlignment: 'center',\r\n          });\r\n\r\n          console.log(boxed);\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red('Failed to fetch GPT response'));\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'text2nsfw',\r\n      '🎨 Generate AI NSFW-styled art from a text prompt',\r\n      (yargs) => {\r\n        return yargs\r\n          .option('prompt', {\r\n            type: 'string',\r\n            describe: 'Prompt describing the image',\r\n            demandOption: true,\r\n            alias: 'p',\r\n          })\r\n          .option('style', {\r\n            type: 'string',\r\n            describe: `Art style. Available: ${nsfwStyles.join(', ')}`,\r\n            default: 'nsfw_anime',\r\n          })\r\n          .option('model', {\r\n            type: 'string',\r\n            describe: `Base model. Options: ${Object.keys(nsfwModels).join(', ')}`,\r\n            default: 'anime',\r\n          })\r\n          .option('ratio', {\r\n            type: 'string',\r\n            describe: `Aspect ratio. Options: ${Object.keys(nsfwRatios).join(', ')}`,\r\n            default: '1:1',\r\n          });\r\n      },\r\n      async (argv) => {\r\n        const spinner = ora(\r\n          chalk.cyan(`🎨 Generating image from prompt: \"${argv.prompt}\"`)\r\n        ).start();\r\n        try {\r\n          const images = await text2nsfw(argv.prompt as string, {\r\n            base_model: argv.model as any,\r\n            style: argv.style as string,\r\n            ratio: argv.ratio as any,\r\n          });\r\n\r\n          spinner.succeed('✅ Image generation complete');\r\n\r\n          if (!images.length) {\r\n            console.log(chalk.yellow('⚠️ No images returned'));\r\n            return;\r\n          }\r\n\r\n          images.forEach((img, idx) => {\r\n            const box = boxen(\r\n              `${chalk.greenBright('🖼️ Image URL')} (${idx + 1}):\\n${chalk.blue.underline(img)}`,\r\n              {\r\n                padding: 1,\r\n                borderStyle: 'round',\r\n                borderColor: 'magenta',\r\n                margin: 1,\r\n              }\r\n            );\r\n            console.log(box);\r\n          });\r\n        } catch (error: any) {\r\n          spinner.fail('❌ Failed to generate image');\r\n          console.error(chalk.red(error.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'filter-image',\r\n      '🧠 Apply a Gemini-powered filter to an image',\r\n      (yargs) =>\r\n        yargs\r\n          .option('filter', {\r\n            alias: 'f',\r\n            describe: `Name of the filter to apply`,\r\n            choices: filters.map((f) => f.name),\r\n            demandOption: true,\r\n            type: 'string',\r\n          })\r\n          .option('image', {\r\n            alias: 'i',\r\n            describe: 'Path to the image file',\r\n            demandOption: true,\r\n            type: 'string',\r\n          }),\r\n      async (argv) => {\r\n        const spinner = ora(`🔄 Applying filter \"${argv.filter}\"...`).start();\r\n\r\n        try {\r\n          const imageBuffer = fs.readFileSync(argv.image);\r\n          const base64 = imageBuffer.toString('base64');\r\n\r\n          const { imageBuffer: result, textResponse } =\r\n            await MikaFilterImage.applyFilter({\r\n              filter: argv.filter as any,\r\n              base64Image: base64,\r\n            });\r\n          if (result) {\r\n            const image = await uploadToCatbox(\r\n              result,\r\n              (argv.filter as string) + '.png'\r\n            );\r\n            spinner.succeed(\r\n              `✅ Filter applied and saved to ${chalk.green(image)}`\r\n            );\r\n\r\n            if (textResponse) {\r\n              console.log(\r\n                boxen(textResponse, {\r\n                  title: '🧠 Gemini Response',\r\n                  padding: 1,\r\n                  borderColor: 'blue',\r\n                  borderStyle: 'round',\r\n                })\r\n              );\r\n            }\r\n          } else {\r\n            spinner.warn(`⚠️ No image buffer returned`);\r\n          }\r\n        } catch (err: any) {\r\n          spinner.fail(chalk.red('❌ Failed to apply filter'));\r\n          console.error(chalk.red(err.message));\r\n        }\r\n      }\r\n    )\r\n    .command(\r\n      'filter-list',\r\n      '📜 List all available filters',\r\n      () => {},\r\n      () => {\r\n        console.log(chalk.bold('\\n🎨 Available Filters:\\n'));\r\n        filters.forEach((f) => {\r\n          console.log(\r\n            `${chalk.greenBright(f.name)} — ${chalk.gray(f.description)}`\r\n          );\r\n        });\r\n        console.log(\r\n          '\\nTo use: run with ' + chalk.yellow('--filter <name>') + '\\n'\r\n        );\r\n      }\r\n    )\r\n    .demandCommand()\r\n    .help()\r\n    .alias('h', 'help')\r\n    .version('1.0.2')\r\n    .alias('v', 'version');\r\n  const title = await banner();\r\n  console.log(rainbow(title));\r\n  cli.parse();\r\n};\r\n\r\nrunCLI();\r\n","// src/utils/gemini.ts\r\n\r\nimport { GenerationConfig, GoogleGenAI, ContentListUnion } from '@google/genai';\r\n\r\n/**\r\n * generate text response from Gemini\r\n * @param prompt Text prompt to condition image generation\r\n * @returns Object containing textual response\r\n */\r\nexport async function GeminiChat(prompt: string): Promise<string | undefined> {\r\n  const contents: ContentListUnion = [{ text: prompt }];\r\n\r\n  const ai = new GoogleGenAI({\r\n    apiKey: 'AIzaSyBA-qPXeMKvZbD0lZnpEcEYC_pyTRyG0eU',\r\n  });\r\n\r\n  const res = await ai.models.generateContent({\r\n    model: 'gemini-2.0-flash-thinking-exp-01-21',\r\n    contents,\r\n    config: {\r\n      responseModalities: ['TEXT'],\r\n    } as GenerationConfig,\r\n  });\r\n\r\n  const parts = res.candidates?.[0]?.content?.parts || [];\r\n  let textResponse: string | undefined;\r\n  for (const part of parts) {\r\n    if (part.text) {\r\n      textResponse = part.text;\r\n    }\r\n  }\r\n\r\n  return textResponse;\r\n}\r\n"],"mappings":"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","names":["yargs","hideBin","figlet","chalk","pastel","rainbow","ora","path","boxen","fs","inquirer","GoogleGenAI","GeminiChat","prompt","_a","_b","_c","contents","parts","textResponse","part","banner","resolve","figlet","err","data","renderBox","title","content","boxen","filters","MikaFilterImage","runCLI","cli","yargs","hideBin","chalk","argv","client","TextCraftClient","spinner","ora","imageUrl","pastel","result","downloadTikTok","l","url","response","DeepseekR1","generateLogo","outputUrl","buffer","enhanceImage","path","error","results","McpedlSearch","entry","index","animob","Animob","MobileLegendsNewsInfo","article","i","res","TempMail","inbox","msg","MagicStudioArt","instagram","v","a","AnimeFinder","ref","poemLengths","poemTypes","poemLanguages","PoemGenerator","FeloSearch","packs","searchSticker","p","selected","spinner2","stickers","getStickersFromPack","downloads","metadata","ytdl","icons","text","level","humanizeText","code","originalLength","transformedLength","reductionPercentage","AIFreeboxImage","message","SearchLyrics","formattedOutput","profile","MinecraftStalk","history","imgPath","base64Image","fs","GeminiCanvas","uploadToCatbox","GeminiChat","y","anime","Nakanime","output","filepath","TextToGhibli","imagePath","deepfakeTransform","imageToPrompt","downloadSnackVideo","question","GuessTheFlag","answer","inquirer","TokopediaSearch","product","cleanUrl","reply","ChatGPTOnline","boxed","nsfwStyles","nsfwModels","nsfwRatios","images","text2nsfw","img","idx","box","f","base64","textResponse","image","rainbow"]}